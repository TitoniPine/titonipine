(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,o,s=e[0],l=e[1],c=e[2],p=0,d=[];p<s.length;p++)o=s[p],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&d.push(a[o][0]),a[o]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(u&&u(e);d.length;)d.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==a[l]&&(r=!1)}r&&(i.splice(e--,1),n=o(o.s=t[0]))}return n}var r={},a={1:0},i=[];function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(n){return o.p+"assets/js/"+({}[n]||n)+"."+{2:"56fd5cb0",3:"5ae67027",4:"cb2134f5",5:"807ea28e",6:"0d59ddfa",7:"7d78bfbd",8:"a96fa62e",9:"ba92e156",10:"e34745fa",11:"0c5a5f56",12:"e37a3bae",13:"dec75161",14:"f78337c3",15:"99acbeb8",16:"b65d0402",17:"4d622483",18:"5d6d74a0"}[n]+".js"}(n);var l=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",l.name="ChunkLoadError",l.type=r,l.request=i,t[1](l)}a[n]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},o.m=n,o.c=r,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="/",o.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var u=l;i.push([233,0]),t()}([function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(60),a=Function.prototype,i=a.bind,o=a.call,s=r&&i.bind(o,o);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return o.apply(n,arguments)}}},function(n,e,t){var r=t(0),a=t(39).f,i=t(23),o=t(14),s=t(108),l=t(114),c=t(100);n.exports=function(n,e){var t,u,p,d,f,h=n.target,v=n.global,m=n.stat;if(t=v?r:m?r[h]||s(h,{}):(r[h]||{}).prototype)for(u in e){if(d=e[u],p=n.noTargetGet?(f=a(t,u))&&f.value:t[u],!c(v?u:h+(m?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;l(d,p)}(n.sham||p&&p.sham)&&i(d,"sham",!0),o(t,u,d,n)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(0),a=t(76),i=t(10),o=t(77),s=t(109),l=t(152),c=a("wks"),u=r.Symbol,p=u&&u.for,d=l?u:u&&u.withoutSetter||o;n.exports=function(n){if(!i(c,n)||!s&&"string"!=typeof c[n]){var e="Symbol."+n;s&&i(u,n)?c[n]=u[n]:c[n]=l&&p?p(e):d(e)}return c[n]}},function(n,e,t){var r=t(117),a=t(14),i=t(249);r||a(Object.prototype,"toString",i,{unsafe:!0})},function(n,e,t){var r=t(0),a=t(8),i=r.String,o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not an object")}},function(n,e,t){var r=t(4);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(3);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(1),a=t(15),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(a(n),e)}},function(n,e,t){var r=t(60),a=Function.prototype.call;n.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(n,e,t){var r=t(0),a=t(73),i=r.String;n.exports=function(n){if("Symbol"===a(n))throw TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){var r=t(0),a=t(9),i=t(154),o=t(153),s=t(7),l=t(79),c=r.TypeError,u=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=a?o?function(n,e,t){if(s(n),e=l(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return u(n,e,t)}:u:function(n,e,t){if(s(n),e=l(e),s(t),i)try{return u(n,e,t)}catch(n){}if("get"in t||"set"in t)throw c("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(0),a=t(4),i=t(10),o=t(23),s=t(108),l=t(84),c=t(36),u=t(63).CONFIGURABLE,p=c.get,d=c.enforce,f=String(String).split("String");(n.exports=function(n,e,t,l){var c,p=!!l&&!!l.unsafe,h=!!l&&!!l.enumerable,v=!!l&&!!l.noTargetGet,m=l&&void 0!==l.name?l.name:e;a(t)&&("Symbol("===String(m).slice(0,7)&&(m="["+String(m).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(t,"name")||u&&t.name!==m)&&o(t,"name",m),(c=d(t)).source||(c.source=f.join("string"==typeof m?m:""))),n!==r?(p?!v&&n[e]&&(h=!0):delete n[e],h?n[e]=t:o(n,e,t)):h?n[e]=t:s(e,t)})(Function.prototype,"toString",(function(){return a(this)&&p(this).source||l(this)}))},function(n,e,t){var r=t(0),a=t(17),i=r.Object;n.exports=function(n){return i(a(n))}},function(n,e,t){var r=t(0),a=t(4),i=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n){if(null==n)throw r("Can't call method on "+n);return n}},function(n,e,t){"use strict";var r=t(2),a=t(90);r({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(n,e,t){var r=t(59),a=t(17);n.exports=function(n){return r(a(n))}},function(n,e,t){var r=t(50);n.exports=function(n){return r(n.length)}},function(n,e,t){var r=t(1),a=r({}.toString),i=r("".slice);n.exports=function(n){return i(a(n),8,-1)}},function(n,e){n.exports=!1},function(n,e,t){var r=t(9),a=t(13),i=t(47);n.exports=r?function(n,e,t){return a.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){"use strict";var r=t(171).charAt,a=t(12),i=t(36),o=t(158),s=i.set,l=i.getterFor("String Iterator");o(String,"String",(function(n){s(this,{type:"String Iterator",string:a(n),index:0})}),(function(){var n,e=l(this),t=e.string,a=e.index;return a>=t.length?{value:void 0,done:!0}:(n=r(t,a),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){var r=t(14),a=t(265),i=Error.prototype;i.toString!==a&&r(i,"toString",a)},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(16);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(187),a="object"==typeof self&&self&&self.Object===Object&&self,i=r||a||Function("return this")();n.exports=i},function(n,e,t){"use strict";function r(n,e,t,r,a,i,o,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),o?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(o)},c._ssrRegister=l):a&&(l=s?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(n,e){return l.call(e),u(n,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(2),a=t(54).filter;r({target:"Array",proto:!0,forced:!t(88)("filter")},{filter:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),a=t(172),i=t(173),o=t(139),s=t(23),l=t(5),c=l("iterator"),u=l("toStringTag"),p=o.values,d=function(n,e){if(n){if(n[c]!==p)try{s(n,c,p)}catch(e){n[c]=p}if(n[u]||s(n,u,e),a[e])for(var t in o)if(n[t]!==o[t])try{s(n,t,o[t])}catch(e){n[t]=o[t]}}};for(var f in a)d(r[f]&&r[f].prototype,f);d(i,"DOMTokenList")},function(n,e,t){var r,a=t(7),i=t(140),o=t(112),s=t(61),l=t(157),c=t(78),u=t(83),p=u("IE_PROTO"),d=function(){},f=function(n){return"<script>"+n+"<\/script>"},h=function(n){n.write(f("")),n.close();var e=n.parentWindow.Object;return n=null,e},v=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;v="undefined"!=typeof document?document.domain&&r?h(r):((e=c("iframe")).style.display="none",l.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(f("document.F=Object")),n.close(),n.F):h(r);for(var t=o.length;t--;)delete v.prototype[o[t]];return v()};s[p]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(d.prototype=a(n),t=new d,d.prototype=null,t[p]=n):t=v(),void 0===e?t:i.f(t,e)}},function(n,e,t){var r=t(1);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(60),a=Function.prototype,i=a.apply,o=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?o.bind(i):function(){return o.apply(i,arguments)})},function(n,e,t){var r=t(0),a=t(4),i=t(81),o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not a function")}},function(n,e,t){var r,a,i,o=t(235),s=t(0),l=t(1),c=t(8),u=t(23),p=t(10),d=t(107),f=t(83),h=t(61),v=s.TypeError,m=s.WeakMap;if(o||d.state){var g=d.state||(d.state=new m),b=l(g.get),y=l(g.has),x=l(g.set);r=function(n,e){if(y(g,n))throw new v("Object already initialized");return e.facade=n,x(g,n,e),e},a=function(n){return b(g,n)||{}},i=function(n){return y(g,n)}}else{var _=f("state");h[_]=!0,r=function(n,e){if(p(n,_))throw new v("Object already initialized");return e.facade=n,u(n,_,e),e},a=function(n){return p(n,_)?n[_]:{}},i=function(n){return p(n,_)}}n.exports={set:r,get:a,has:i,enforce:function(n){return i(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!c(e)||(t=a(e)).type!==n)throw v("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var r=t(2),a=t(177);r({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(n,e,t){var r=t(0),a=t(172),i=t(173),o=t(177),s=t(23),l=function(n){if(n&&n.forEach!==o)try{s(n,"forEach",o)}catch(e){n.forEach=o}};for(var c in a)a[c]&&l(r[c]&&r[c].prototype);l(i)},function(n,e,t){var r=t(9),a=t(11),i=t(113),o=t(47),s=t(19),l=t(79),c=t(10),u=t(154),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=l(e),u)try{return p(n,e)}catch(n){}if(c(n,e))return o(!a(i.f,n,e),n[e])}},function(n,e,t){var r=t(2),a=t(0),i=t(34),o=t(261),s=a.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=o(n,e,l),r({global:!0,forced:l},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=o("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,forced:l},t)}};c("Error",(function(n){return function(e){return i(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),c("URIError",(function(n){return function(e){return i(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var r=t(285),a=t(288);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return o})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return f})),t.d(e,"m",(function(){return h})),t.d(e,"d",(function(){return m})),t.d(e,"k",(function(){return g})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(18),t(44),t(134),t(72),t(132),t(106),t(43),t(37),t(6),t(38),t(30),t(75),t(98),t(151),t(70),t(207),t(25),t(138);var r=/#.*$/,a=/\.(md|html)$/,i=/\/$/,o=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(a,"")}function l(n){return o.test(n)}function c(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(l(n))return n;var e=n.match(r),t=e?e[0]:"",a=s(n);return i.test(a)?n:a+".html"+t}function d(n,e){var t=n.hash,a=function(n){var e=n.match(r);if(e)return e[0]}(e);return(!a||t===a)&&s(n.path)===s(e)}function f(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));for(var r=s(e),a=0;a<n.length;a++)if(s(n[a].regularPath)===r)return Object.assign({},n[a],{type:"page",path:p(n[a].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function h(n,e,t,r){var a=t.pages,i=t.themeConfig,o=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||o.sidebar||i.sidebar))return v(n);var s=o.sidebar||i.sidebar;if(s){var l=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(r=n,/(\.html|\/)$/.test(r)?r:r+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var r;return{}}(e,s),c=l.base,u=l.config;return"auto"===u?v(n):u?u.map((function(n){return function n(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return f(t,e,r);if(Array.isArray(e))return Object.assign(f(t,e[0],r),{title:e[1]});a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var i=e.children||[];return 0===i.length&&e.path?Object.assign(f(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map((function(e){return n(e,t,r,a+1)})),collapsable:!1!==e.collapsable}}(n,a,c)})):[]}return[]}function v(n){var e=m(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function m(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function g(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e,t){"use strict";var r=t(2),a=t(54).map;r({target:"Array",proto:!0,forced:!t(88)("map")},{map:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(34),a=t(11),i=t(1),o=t(104),s=t(3),l=t(7),c=t(4),u=t(52),p=t(50),d=t(12),f=t(17),h=t(121),v=t(46),m=t(266),g=t(105),b=t(5)("replace"),y=Math.max,x=Math.min,_=i([].concat),w=i([].push),k=i("".indexOf),S=i("".slice),j="$0"==="a".replace(/./,"$0"),T=!!/./[b]&&""===/./[b]("a","$0");o("replace",(function(n,e,t){var i=T?"$":"$0";return[function(n,t){var r=f(this),i=null==n?void 0:v(n,b);return i?a(i,n,r,t):a(e,d(r),n,t)},function(n,a){var o=l(this),s=d(n);if("string"==typeof a&&-1===k(a,i)&&-1===k(a,"$<")){var f=t(e,o,s,a);if(f.done)return f.value}var v=c(a);v||(a=d(a));var b=o.global;if(b){var j=o.unicode;o.lastIndex=0}for(var T=[];;){var E=g(o,s);if(null===E)break;if(w(T,E),!b)break;""===d(E[0])&&(o.lastIndex=h(s,p(o.lastIndex),j))}for(var C,O="",I=0,A=0;A<T.length;A++){for(var z=d((E=T[A])[0]),R=y(x(u(E.index),s.length),0),P=[],L=1;L<E.length;L++)w(P,void 0===(C=E[L])?C:String(C));var M=E.groups;if(v){var B=_([z],P,R,s);void 0!==M&&w(B,M);var $=d(r(a,void 0,B))}else $=m(z,s,R,P,M,a);R>=I&&(O+=S(s,I,R)+$,I=R+z.length)}return O+S(s,I)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!j||T)},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(35);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r,a,i=t(0),o=t(27),s=i.process,l=i.Deno,c=s&&s.versions||l&&l.version,u=c&&c.v8;u&&(a=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&o&&(!(r=o.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=o.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){var r=t(52),a=Math.min;n.exports=function(n){return n>0?a(r(n),9007199254740991):0}},function(n,e,t){"use strict";var r=t(2),a=t(0),i=t(57),o=t(85),s=t(8),l=t(111),c=t(20),u=t(19),p=t(66),d=t(5),f=t(88),h=t(65),v=f("slice"),m=d("species"),g=a.Array,b=Math.max;r({target:"Array",proto:!0,forced:!v},{slice:function(n,e){var t,r,a,d=u(this),f=c(d),v=l(n,f),y=l(void 0===e?f:e,f);if(i(d)&&(t=d.constructor,(o(t)&&(t===g||i(t.prototype))||s(t)&&null===(t=t[m]))&&(t=void 0),t===g||void 0===t))return h(d,v,y);for(r=new(void 0===t?g:t)(b(y-v,0)),a=0;v<y;v++,a++)v in d&&p(r,a,d[v]);return r.length=a,r}})},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?r:t)(e)}},function(n,e,t){var r=t(1),a=t(35),i=t(60),o=r(r.bind);n.exports=function(n,e){return a(n),void 0===e?n:i?o(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){var r=t(53),a=t(1),i=t(59),o=t(15),s=t(20),l=t(143),c=a([].push),u=function(n){var e=1==n,t=2==n,a=3==n,u=4==n,p=6==n,d=7==n,f=5==n||p;return function(h,v,m,g){for(var b,y,x=o(h),_=i(x),w=r(v,m),k=s(_),S=0,j=g||l,T=e?j(h,k):t||d?j(h,0):void 0;k>S;S++)if((f||S in _)&&(y=w(b=_[S],S,x),n))if(e)T[S]=y;else if(y)switch(n){case 3:return!0;case 5:return b;case 6:return S;case 2:c(T,b)}else switch(n){case 4:return!1;case 7:c(T,b)}return p?-1:a||u?u:T}};n.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},function(n,e,t){var r=t(156),a=t(112).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e,t){var r=t(13).f,a=t(10),i=t(5)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!a(n,i)&&r(n,i,{configurable:!0,value:e})}},function(n,e,t){var r=t(21);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){var r=t(67),a=t(270),i=t(271),o=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":o&&o in Object(n)?a(n):i(n)}},function(n,e,t){var r=t(0),a=t(1),i=t(3),o=t(21),s=r.Object,l=a("".split);n.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==o(n)?l(n,""):s(n)}:s},function(n,e,t){var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var r=t(9),a=t(10),i=Function.prototype,o=r&&Object.getOwnPropertyDescriptor,s=a(i,"name"),l=s&&"something"===function(){}.name,c=s&&(!r||r&&o(i,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var r=t(1),a=t(7),i=t(236);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e,t){var r=t(1);n.exports=r([].slice)},function(n,e,t){"use strict";var r=t(79),a=t(13),i=t(47);n.exports=function(n,e,t){var o=r(e);o in n?a.f(n,o,i(0,t)):n[o]=t}},function(n,e,t){var r=t(28).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(75);var r=t(69);t(74),t(89),t(6),t(120),t(24),t(31),t(182);var a=t(96);t(40),t(25);function i(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(a.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(2),a=t(0),i=t(3),o=t(57),s=t(8),l=t(15),c=t(20),u=t(66),p=t(143),d=t(88),f=t(5),h=t(49),v=f("isConcatSpreadable"),m=a.TypeError,g=h>=51||!i((function(){var n=[];return n[v]=!1,n.concat()[0]!==n})),b=d("concat"),y=function(n){if(!s(n))return!1;var e=n[v];return void 0!==e?!!e:o(n)};r({target:"Array",proto:!0,forced:!g||!b},{concat:function(n){var e,t,r,a,i,o=l(this),s=p(o,0),d=0;for(e=-1,r=arguments.length;e<r;e++)if(y(i=-1===e?o:arguments[e])){if(d+(a=c(i))>9007199254740991)throw m("Maximum allowed index exceeded");for(t=0;t<a;t++,d++)t in i&&u(s,d,i[t])}else{if(d>=9007199254740991)throw m("Maximum allowed index exceeded");u(s,d++,i)}return s.length=d,s}})},function(n,e,t){var r=t(2),a=t(0),i=t(34),o=t(4),s=t(27),l=t(65),c=t(142),u=/MSIE .\./.test(s),p=a.Function,d=function(n){return function(e,t){var r=c(arguments.length,1)>2,a=o(e)?e:p(e),s=r?l(arguments,2):void 0;return n(r?function(){i(a,this,s)}:a,t)}};r({global:!0,bind:!0,forced:u},{setTimeout:d(a.setTimeout),setInterval:d(a.setInterval)})},function(n,e,t){"use strict";t(18);var r,a,i=t(2),o=t(0),s=t(11),l=t(1),c=t(4),u=t(8),p=(r=!1,(a=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===a.test("abc")&&r),d=o.Error,f=l(/./.test);i({target:"RegExp",proto:!0,forced:!p},{test:function(n){var e=this.exec;if(!c(e))return f(this,n);var t=s(e,this,n);if(null!==t&&!u(t))throw new d("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e,t){var r=t(0),a=t(117),i=t(4),o=t(21),s=t(5)("toStringTag"),l=r.Object,c="Arguments"==o(function(){return arguments}());n.exports=a?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=l(n),s))?t:c?o(e):"Object"==(r=o(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){"use strict";var r=t(2),a=t(0),i=t(16),o=t(34),s=t(11),l=t(1),c=t(22),u=t(9),p=t(109),d=t(3),f=t(10),h=t(57),v=t(4),m=t(8),g=t(33),b=t(80),y=t(7),x=t(15),_=t(19),w=t(79),k=t(12),S=t(47),j=t(32),T=t(82),E=t(55),C=t(179),O=t(115),I=t(39),A=t(13),z=t(140),R=t(113),P=t(65),L=t(14),M=t(76),B=t(83),$=t(61),D=t(77),J=t(5),N=t(180),F=t(181),q=t(56),U=t(36),H=t(54).forEach,V=B("hidden"),G=J("toPrimitive"),Q=U.set,X=U.getterFor("Symbol"),K=Object.prototype,W=a.Symbol,Y=W&&W.prototype,Z=a.TypeError,nn=a.QObject,en=i("JSON","stringify"),tn=I.f,rn=A.f,an=C.f,on=R.f,sn=l([].push),ln=M("symbols"),cn=M("op-symbols"),un=M("string-to-symbol-registry"),pn=M("symbol-to-string-registry"),dn=M("wks"),fn=!nn||!nn.prototype||!nn.prototype.findChild,hn=u&&d((function(){return 7!=j(rn({},"a",{get:function(){return rn(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=tn(K,e);r&&delete K[e],rn(n,e,t),r&&n!==K&&rn(K,e,r)}:rn,vn=function(n,e){var t=ln[n]=j(Y);return Q(t,{type:"Symbol",tag:n,description:e}),u||(t.description=e),t},mn=function(n,e,t){n===K&&mn(cn,e,t),y(n);var r=w(e);return y(t),f(ln,r)?(t.enumerable?(f(n,V)&&n[V][r]&&(n[V][r]=!1),t=j(t,{enumerable:S(0,!1)})):(f(n,V)||rn(n,V,S(1,{})),n[V][r]=!0),hn(n,r,t)):rn(n,r,t)},gn=function(n,e){y(n);var t=_(e),r=T(t).concat(_n(t));return H(r,(function(e){u&&!s(bn,t,e)||mn(n,e,t[e])})),n},bn=function(n){var e=w(n),t=s(on,this,e);return!(this===K&&f(ln,e)&&!f(cn,e))&&(!(t||!f(this,e)||!f(ln,e)||f(this,V)&&this[V][e])||t)},yn=function(n,e){var t=_(n),r=w(e);if(t!==K||!f(ln,r)||f(cn,r)){var a=tn(t,r);return!a||!f(ln,r)||f(t,V)&&t[V][r]||(a.enumerable=!0),a}},xn=function(n){var e=an(_(n)),t=[];return H(e,(function(n){f(ln,n)||f($,n)||sn(t,n)})),t},_n=function(n){var e=n===K,t=an(e?cn:_(n)),r=[];return H(t,(function(n){!f(ln,n)||e&&!f(K,n)||sn(r,ln[n])})),r};(p||(L(Y=(W=function(){if(g(Y,this))throw Z("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?k(arguments[0]):void 0,e=D(n),t=function(n){this===K&&s(t,cn,n),f(this,V)&&f(this[V],e)&&(this[V][e]=!1),hn(this,e,S(1,n))};return u&&fn&&hn(K,e,{configurable:!0,set:t}),vn(e,n)}).prototype,"toString",(function(){return X(this).tag})),L(W,"withoutSetter",(function(n){return vn(D(n),n)})),R.f=bn,A.f=mn,z.f=gn,I.f=yn,E.f=C.f=xn,O.f=_n,N.f=function(n){return vn(J(n),n)},u&&(rn(Y,"description",{configurable:!0,get:function(){return X(this).description}}),c||L(K,"propertyIsEnumerable",bn,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!p,sham:!p},{Symbol:W}),H(T(dn),(function(n){F(n)})),r({target:"Symbol",stat:!0,forced:!p},{for:function(n){var e=k(n);if(f(un,e))return un[e];var t=W(e);return un[e]=t,pn[t]=e,t},keyFor:function(n){if(!b(n))throw Z(n+" is not a symbol");if(f(pn,n))return pn[n]},useSetter:function(){fn=!0},useSimple:function(){fn=!1}}),r({target:"Object",stat:!0,forced:!p,sham:!u},{create:function(n,e){return void 0===e?j(n):gn(j(n),e)},defineProperty:mn,defineProperties:gn,getOwnPropertyDescriptor:yn}),r({target:"Object",stat:!0,forced:!p},{getOwnPropertyNames:xn,getOwnPropertySymbols:_n}),r({target:"Object",stat:!0,forced:d((function(){O.f(1)}))},{getOwnPropertySymbols:function(n){return O.f(x(n))}}),en)&&r({target:"JSON",stat:!0,forced:!p||d((function(){var n=W();return"[null]"!=en([n])||"{}"!=en({a:n})||"{}"!=en(Object(n))}))},{stringify:function(n,e,t){var r=P(arguments),a=e;if((m(e)||void 0!==n)&&!b(n))return h(e)||(e=function(n,e){if(v(a)&&(e=s(a,this,n,e)),!b(e))return e}),r[1]=e,o(en,null,r)}});if(!Y[G]){var wn=Y.valueOf;L(Y,G,(function(n){return s(wn,this)}))}q(W,"Symbol"),$[V]=!0},function(n,e,t){t(2)({target:"Array",stat:!0},{isArray:t(57)})},function(n,e,t){var r=t(22),a=t(107);(n.exports=function(n,e){return a[n]||(a[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){var r=t(1),a=0,i=Math.random(),o=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+o(++a+i,36)}},function(n,e,t){var r=t(0),a=t(8),i=r.document,o=a(i)&&a(i.createElement);n.exports=function(n){return o?i.createElement(n):{}}},function(n,e,t){var r=t(155),a=t(80);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e,t){var r=t(0),a=t(16),i=t(4),o=t(33),s=t(152),l=r.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=a("Symbol");return i(e)&&o(e.prototype,l(n))}},function(n,e,t){var r=t(0).String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(156),a=t(112);n.exports=Object.keys||function(n){return r(n,a)}},function(n,e,t){var r=t(76),a=t(77),i=r("keys");n.exports=function(n){return i[n]||(i[n]=a(n))}},function(n,e,t){var r=t(1),a=t(4),i=t(107),o=r(Function.toString);a(i.inspectSource)||(i.inspectSource=function(n){return o(n)}),n.exports=i.inspectSource},function(n,e,t){var r=t(1),a=t(3),i=t(4),o=t(73),s=t(16),l=t(84),c=function(){},u=[],p=s("Reflect","construct"),d=/^\s*(?:class|function)\b/,f=r(d.exec),h=!d.exec(c),v=function(n){if(!i(n))return!1;try{return p(c,u,n),!0}catch(n){return!1}},m=function(n){if(!i(n))return!1;switch(o(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!f(d,l(n))}catch(n){return!0}};m.sham=!0,n.exports=!p||a((function(){var n;return v(v.call)||!v(Object)||!v((function(){n=!0}))||n}))?m:v},function(n,e,t){var r=t(21),a=t(0);n.exports="process"==r(a.process)},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(6);function r(n,e,t,r,a,i,o){try{var s=n[i](o),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,a)}function a(n){return function(){var e=this,t=arguments;return new Promise((function(a,i){var o=n.apply(e,t);function s(n){r(o,a,i,s,l,"next",n)}function l(n){r(o,a,i,s,l,"throw",n)}s(void 0)}))}}},function(n,e,t){var r=t(3),a=t(5),i=t(49),o=a("species");n.exports=function(n){return i>=51||!r((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){"use strict";var r=t(2),a=t(9),i=t(0),o=t(1),s=t(10),l=t(4),c=t(33),u=t(12),p=t(13).f,d=t(114),f=i.Symbol,h=f&&f.prototype;if(a&&l(f)&&(!("description"in h)||void 0!==f().description)){var v={},m=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:u(arguments[0]),e=c(h,this)?new f(n):void 0===n?f():f(n);return""===n&&(v[e]=!0),e};d(m,f),m.prototype=h,h.constructor=m;var g="Symbol(test)"==String(f("test")),b=o(h.toString),y=o(h.valueOf),x=/^Symbol\((.*)\)[^)]+$/,_=o("".replace),w=o("".slice);p(h,"description",{configurable:!0,get:function(){var n=y(this),e=b(n);if(s(v,n))return"";var t=g?w(e,7,-1):_(e,x,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:m})}},function(n,e,t){"use strict";var r,a,i=t(11),o=t(1),s=t(12),l=t(145),c=t(103),u=t(76),p=t(32),d=t(36).get,f=t(220),h=t(226),v=u("native-string-replace",String.prototype.replace),m=RegExp.prototype.exec,g=m,b=o("".charAt),y=o("".indexOf),x=o("".replace),_=o("".slice),w=(a=/b*/g,i(m,r=/a/,"a"),i(m,a,"a"),0!==r.lastIndex||0!==a.lastIndex),k=c.BROKEN_CARET,S=void 0!==/()??/.exec("")[1];(w||S||k||f||h)&&(g=function(n){var e,t,r,a,o,c,u,f=this,h=d(f),j=s(n),T=h.raw;if(T)return T.lastIndex=f.lastIndex,e=i(g,T,j),f.lastIndex=T.lastIndex,e;var E=h.groups,C=k&&f.sticky,O=i(l,f),I=f.source,A=0,z=j;if(C&&(O=x(O,"y",""),-1===y(O,"g")&&(O+="g"),z=_(j,f.lastIndex),f.lastIndex>0&&(!f.multiline||f.multiline&&"\n"!==b(j,f.lastIndex-1))&&(I="(?: "+I+")",z=" "+z,A++),t=new RegExp("^(?:"+I+")",O)),S&&(t=new RegExp("^"+I+"$(?!\\s)",O)),w&&(r=f.lastIndex),a=i(m,C?t:f,z),C?a?(a.input=_(a.input,A),a[0]=_(a[0],A),a.index=f.lastIndex,f.lastIndex+=a[0].length):f.lastIndex=0:w&&a&&(f.lastIndex=f.global?a.index+a[0].length:r),S&&a&&a.length>1&&i(v,a[0],t,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(a[o]=void 0)})),a&&E)for(a.groups=c=p(null),o=0;o<E.length;o++)c[(u=E[o])[0]]=a[u[1]];return a}),n.exports=g},function(n,e,t){var r=t(275),a=t(276),i=t(277),o=t(278),s=t(279);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(189);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(41)(Object,"create");n.exports=r},function(n,e,t){var r=t(297);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(129);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(51),t(6),t(102),t(182),t(24),t(18),t(72);var r=t(69);function a(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),u=r.speed,p=r.easing;return l.offsetWidth,o((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,a}(n,u,p)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,o=e.querySelector(r.barSelector),l=n?"-100":i(t.status||0),u=document.querySelector(r.parent);return s(o,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&d(a),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var o=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,i=arguments;if(2==i.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,i[1],i[2])}}();function l(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=p(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=p(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n,e,t){"use strict";var r=t(2),a=t(1),i=t(110).indexOf,o=t(45),s=a([].indexOf),l=!!s&&1/s([1],1,-0)<0,c=o("indexOf");r({target:"Array",proto:!0,forced:l||!c},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return l?s(this,n,e)||0:i(this,n,e)}})},function(n,e,t){var r=t(2),a=t(15),i=t(82);r({target:"Object",stat:!0,forced:t(3)((function(){i(1)}))},{keys:function(n){return i(a(n))}})},function(n,e,t){var r=t(3),a=t(4),i=/#|\.prototype\./,o=function(n,e){var t=l[s(n)];return t==u||t!=c&&(a(e)?r(e):!!e)},s=o.normalize=function(n){return String(n).replace(i,".").toLowerCase()},l=o.data={},c=o.NATIVE="N",u=o.POLYFILL="P";n.exports=o},function(n,e,t){var r=t(73),a=t(46),i=t(62),o=t(5)("iterator");n.exports=function(n){if(null!=n)return a(n,o)||a(n,"@@iterator")||i[r(n)]}},function(n,e,t){var r=t(9),a=t(63).EXISTS,i=t(1),o=t(13).f,s=Function.prototype,l=i(s.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=i(c.exec);r&&!a&&o(s,"name",{configurable:!0,get:function(){try{return u(c,l(this))[1]}catch(n){return""}}})},function(n,e,t){var r=t(3),a=t(0).RegExp,i=r((function(){var n=a("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),o=i||r((function(){return!a("a","y").sticky})),s=i||r((function(){var n=a("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:o,UNSUPPORTED_Y:i}},function(n,e,t){"use strict";t(18);var r=t(1),a=t(14),i=t(90),o=t(3),s=t(5),l=t(23),c=s("species"),u=RegExp.prototype;n.exports=function(n,e,t,p){var d=s(n),f=!o((function(){var e={};return e[d]=function(){return 7},7!=""[n](e)})),h=f&&!o((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[c]=function(){return t},t.flags="",t[d]=/./[d]),t.exec=function(){return e=!0,null},t[d](""),!e}));if(!f||!h||t){var v=r(/./[d]),m=e(d,""[n],(function(n,e,t,a,o){var s=r(n),l=e.exec;return l===i||l===u.exec?f&&!o?{done:!0,value:v(e,t,a)}:{done:!0,value:s(t,e,a)}:{done:!1}}));a(String.prototype,n,m[0]),a(u,d,m[1])}p&&l(u[d],"sham",!0)}},function(n,e,t){var r=t(0),a=t(11),i=t(7),o=t(4),s=t(21),l=t(90),c=r.TypeError;n.exports=function(n,e){var t=n.exec;if(o(t)){var r=a(t,n,e);return null!==r&&i(r),r}if("RegExp"===s(n))return a(l,n,e);throw c("RegExp#exec called on incompatible receiver")}},function(n,e,t){"use strict";var r=t(2),a=t(1),i=t(59),o=t(19),s=t(45),l=a([].join),c=i!=Object,u=s("join",",");r({target:"Array",proto:!0,forced:c||!u},{join:function(n){return l(o(this),void 0===n?",":n)}})},function(n,e,t){var r=t(0),a=t(108),i=r["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(0),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(49),a=t(3);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r=t(19),a=t(111),i=t(20),o=function(n){return function(e,t,o){var s,l=r(e),c=i(l),u=a(o,c);if(n&&t!=t){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((n||u in l)&&l[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:o(!0),indexOf:o(!1)}},function(n,e,t){var r=t(52),a=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):i(t,e)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);e.f=i?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(10),a=t(159),i=t(39),o=t(13);n.exports=function(n,e,t){for(var s=a(e),l=o.f,c=i.f,u=0;u<s.length;u++){var p=s[u];r(n,p)||t&&r(t,p)||l(n,p,c(e,p))}}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(0),a=t(10),i=t(4),o=t(15),s=t(83),l=t(161),c=s("IE_PROTO"),u=r.Object,p=u.prototype;n.exports=l?u.getPrototypeOf:function(n){var e=o(n);if(a(e,c))return e[c];var t=e.constructor;return i(t)&&e instanceof t?t.prototype:e instanceof u?p:null}},function(n,e,t){var r={};r[t(5)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(7),a=t(166),i=t(5)("species");n.exports=function(n,e){var t,o=r(n).constructor;return void 0===o||null==(t=r(o)[i])?e:a(t)}},function(n,e,t){var r=t(0),a=t(111),i=t(20),o=t(66),s=r.Array,l=Math.max;n.exports=function(n,e,t){for(var r=i(n),c=a(e,r),u=a(void 0===t?r:t,r),p=s(l(u-c,0)),d=0;c<u;c++,d++)o(p,d,n[c]);return p.length=d,p}},function(n,e,t){t(181)("iterator")},function(n,e,t){"use strict";var r=t(171).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){var r=t(269),a=t(48),i=Object.prototype,o=i.hasOwnProperty,s=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return a(n)&&o.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(41)(t(28),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(289),a=t(296),i=t(298),o=t(299),s=t(300);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(26),a=t(129),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(o.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(58),a=t(48);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(75);t(74),t(89),t(6),t(120),t(24),t(31);var r=t(96);t(40),t(25);function a(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,i=[],o=!0,s=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==t.return||t.return()}finally{if(s)throw a}}return i}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";var r=t(34),a=t(11),i=t(1),o=t(104),s=t(144),l=t(7),c=t(17),u=t(118),p=t(121),d=t(50),f=t(12),h=t(46),v=t(119),m=t(105),g=t(90),b=t(103),y=t(3),x=b.UNSUPPORTED_Y,_=Math.min,w=[].push,k=i(/./.exec),S=i(w),j=i("".slice);o("split",(function(n,e,t){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var i=f(c(this)),o=void 0===t?4294967295:t>>>0;if(0===o)return[];if(void 0===n)return[i];if(!s(n))return a(e,i,n,o);for(var l,u,p,d=[],h=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),m=0,b=new RegExp(n.source,h+"g");(l=a(g,b,i))&&!((u=b.lastIndex)>m&&(S(d,j(i,m,l.index)),l.length>1&&l.index<i.length&&r(w,d,v(l,1)),p=l[0].length,m=u,d.length>=o));)b.lastIndex===l.index&&b.lastIndex++;return m===i.length?!p&&k(b,"")||S(d,""):S(d,j(i,m)),d.length>o?v(d,0,o):d}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:a(e,this,n,t)}:e,[function(e,t){var r=c(this),o=null==e?void 0:h(e,n);return o?a(o,e,r,t):a(i,f(r),e,t)},function(n,r){var a=l(this),o=f(n),s=t(i,a,o,r,i!==e);if(s.done)return s.value;var c=u(a,RegExp),h=a.unicode,v=(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(x?"g":"y"),g=new c(x?"^(?:"+a.source+")":a,v),b=void 0===r?4294967295:r>>>0;if(0===b)return[];if(0===o.length)return null===m(g,o)?[o]:[];for(var y=0,w=0,k=[];w<o.length;){g.lastIndex=x?0:w;var T,E=m(g,x?j(o,w):o);if(null===E||(T=_(d(g.lastIndex+(x?w:0)),o.length))===y)w=p(o,w,h);else{if(S(k,j(o,y,w)),k.length===b)return k;for(var C=1;C<=E.length-1;C++)if(S(k,E[C]),k.length===b)return k;w=y=T}}return S(k,j(o,y)),k}]}),!!y((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),x)},function(n,e,t){"use strict";var r=t(2),a=t(54).some;r({target:"Array",proto:!0,forced:!t(45)("some")},{some:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(11),a=t(104),i=t(7),o=t(50),s=t(12),l=t(17),c=t(46),u=t(121),p=t(105);a("match",(function(n,e,t){return[function(e){var t=l(this),a=null==e?void 0:c(e,n);return a?r(a,e,t):new RegExp(e)[n](s(t))},function(n){var r=i(this),a=s(n),l=t(e,r,a);if(l.done)return l.value;if(!r.global)return p(r,a);var c=r.unicode;r.lastIndex=0;for(var d,f=[],h=0;null!==(d=p(r,a));){var v=s(d[0]);f[h]=v,""===v&&(r.lastIndex=u(a,o(r.lastIndex),c)),h++}return 0===h?null:f}]}))},function(n,e,t){var r=t(5),a=t(32),i=t(13),o=r("unscopables"),s=Array.prototype;null==s[o]&&i.f(s,o,{configurable:!0,value:a(null)}),n.exports=function(n){s[o][n]=!0}},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",o=r.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function l(n,e,t,r){var a=e&&e.prototype instanceof p?e:p,i=Object.create(a.prototype),o=new k(r||[]);return i._invoke=function(n,e,t){var r="suspendedStart";return function(a,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw i;return j()}for(t.method=a,t.arg=i;;){var o=t.delegate;if(o){var s=x(o,t);if(s){if(s===u)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=c(n,e,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}(n,t,o),i}function c(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=l;var u={};function p(){}function d(){}function f(){}var h={};s(h,a,(function(){return this}));var v=Object.getPrototypeOf,m=v&&v(v(S([])));m&&m!==e&&t.call(m,a)&&(h=m);var g=f.prototype=p.prototype=Object.create(h);function b(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function y(n,e){var r;this._invoke=function(a,i){function o(){return new e((function(r,o){!function r(a,i,o,s){var l=c(n[a],n,i);if("throw"!==l.type){var u=l.arg,p=u.value;return p&&"object"==typeof p&&t.call(p,"__await")?e.resolve(p.__await).then((function(n){r("next",n,o,s)}),(function(n){r("throw",n,o,s)})):e.resolve(p).then((function(n){u.value=n,o(u)}),(function(n){return r("throw",n,o,s)}))}s(l.arg)}(a,i,r,o)}))}return r=r?r.then(o,o):o()}}function x(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,x(n,e),"throw"===e.method))return u;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=c(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,u;var a=r.arg;return a?a.done?(e[n.resultName]=a.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,u):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,u)}function _(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function w(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function k(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(_,this),this.reset(!0)}function S(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:j}}function j(){return{value:void 0,done:!0}}return d.prototype=f,s(g,"constructor",f),s(f,"constructor",d),d.displayName=s(f,o,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===d||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,f):(n.__proto__=f,s(n,o,"GeneratorFunction")),n.prototype=Object.create(g),n},n.awrap=function(n){return{__await:n}},b(y.prototype),s(y.prototype,i,(function(){return this})),n.AsyncIterator=y,n.async=function(e,t,r,a,i){void 0===i&&(i=Promise);var o=new y(l(e,t,r,a),i);return n.isGeneratorFunction(t)?o:o.next().then((function(n){return n.done?n.value:o.next()}))},b(g),s(g,o,"Generator"),s(g,a,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=S,k.prototype={constructor:k,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return o.type="throw",o.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],o=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&t.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=n,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(o)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),u},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),w(t),u}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var a=r.arg;w(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:S(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),u}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){var r=t(2),a=t(9),i=t(13).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!a},{defineProperty:i})},function(n,e,t){"use strict";var r=t(1),a=t(63).PROPER,i=t(14),o=t(7),s=t(33),l=t(12),c=t(3),u=t(145),p=RegExp.prototype,d=p.toString,f=r(u),h=c((function(){return"/a/b"!=d.call({source:"a",flags:"b"})})),v=a&&"toString"!=d.name;(h||v)&&i(RegExp.prototype,"toString",(function(){var n=o(this),e=l(n.source),t=n.flags;return"/"+e+"/"+l(void 0===t&&s(p,n)&&!("flags"in p)?f(n):t)}),{unsafe:!0})},function(n,e,t){"use strict";var r=t(19),a=t(135),i=t(62),o=t(36),s=t(13).f,l=t(158),c=t(22),u=t(9),p=o.set,d=o.getterFor("Array Iterator");n.exports=l(Array,"Array",(function(n,e){p(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=d(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values");var f=i.Arguments=i.Array;if(a("keys"),a("values"),a("entries"),!c&&u&&"values"!==f.name)try{s(f,"name",{value:"values"})}catch(n){}},function(n,e,t){var r=t(9),a=t(153),i=t(13),o=t(7),s=t(19),l=t(82);e.f=r&&!a?Object.defineProperties:function(n,e){o(n);for(var t,r=s(e),a=l(e),c=a.length,u=0;c>u;)i.f(n,t=a[u++],r[t]);return n}},function(n,e,t){var r=t(0),a=t(11),i=t(35),o=t(7),s=t(81),l=t(101),c=r.TypeError;n.exports=function(n,e){var t=arguments.length<2?l(n):e;if(i(t))return o(a(t,n));throw c(s(n)+" is not iterable")}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n,e){if(n<e)throw r("Not enough arguments");return n}},function(n,e,t){var r=t(250);n.exports=function(n,e){return new(r(n))(0===e?0:e)}},function(n,e,t){var r=t(8),a=t(21),i=t(5)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[i])?!!e:"RegExp"==a(n))}},function(n,e,t){"use strict";var r=t(7);n.exports=function(){var n=r(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(4),a=t(8),i=t(64);n.exports=function(n,e,t){var o,s;return i&&r(o=e.constructor)&&o!==t&&a(s=o.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,f=function(){return c.Date.now()};function h(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function v(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(h(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=h(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=a.test(n);return s||i.test(n)?o(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,i,o,s,l,c=0,u=!1,m=!1,g=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,i=a;return r=a=void 0,c=e,o=n.apply(i,t)}function y(n){return c=n,s=setTimeout(_,e),u?b(n):o}function x(n){var t=n-l;return void 0===l||t>=e||t<0||m&&n-c>=i}function _(){var n=f();if(x(n))return w(n);s=setTimeout(_,function(n){var t=e-(n-l);return m?d(t,i-(n-c)):t}(n))}function w(n){return s=void 0,g&&r?b(n):(r=a=void 0,o)}function k(){var n=f(),t=x(n);if(r=arguments,a=this,l=n,t){if(void 0===s)return y(l);if(m)return s=setTimeout(_,e),b(l)}return void 0===s&&(s=setTimeout(_,e)),o}return e=v(e)||0,h(t)&&(u=!!t.leading,i=(m="maxWait"in t)?p(v(t.maxWait)||0,e):i,g="trailing"in t?!!t.trailing:g),k.cancel=function(){void 0!==s&&clearTimeout(s),c=0,r=l=a=s=void 0},k.flush=function(){return void 0===s?o:w(f())},k}},function(n,e,t){var r=t(1),a=t(17),i=t(12),o=t(150),s=r("".replace),l="["+o+"]",c=RegExp("^"+l+l+"*"),u=RegExp(l+l+"*$"),p=function(n){return function(e){var t=i(a(e));return 1&n&&(t=s(t,c,"")),2&n&&(t=s(t,u,"")),t}};n.exports={start:p(1),end:p(2),trim:p(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){var r=t(1),a=t(14),i=Date.prototype,o=r(i.toString),s=r(i.getTime);"Invalid Date"!=String(new Date(NaN))&&a(i,"toString",(function(){var n=s(this);return n==n?o(this):"Invalid Date"}))},function(n,e,t){var r=t(109);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(9),a=t(3);n.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(9),a=t(3),i=t(78);n.exports=!r&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(0),a=t(11),i=t(8),o=t(80),s=t(46),l=t(234),c=t(5),u=r.TypeError,p=c("toPrimitive");n.exports=function(n,e){if(!i(n)||o(n))return n;var t,r=s(n,p);if(r){if(void 0===e&&(e="default"),t=a(r,n,e),!i(t)||o(t))return t;throw u("Can't convert object to primitive value")}return void 0===e&&(e="number"),l(n,e)}},function(n,e,t){var r=t(1),a=t(10),i=t(19),o=t(110).indexOf,s=t(61),l=r([].push);n.exports=function(n,e){var t,r=i(n),c=0,u=[];for(t in r)!a(s,t)&&a(r,t)&&l(u,t);for(;e.length>c;)a(r,t=e[c++])&&(~o(u,t)||l(u,t));return u}},function(n,e,t){var r=t(16);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(2),a=t(11),i=t(22),o=t(63),s=t(4),l=t(221),c=t(116),u=t(64),p=t(56),d=t(23),f=t(14),h=t(5),v=t(62),m=t(160),g=o.PROPER,b=o.CONFIGURABLE,y=m.IteratorPrototype,x=m.BUGGY_SAFARI_ITERATORS,_=h("iterator"),w=function(){return this};n.exports=function(n,e,t,o,h,m,k){l(t,e,o);var S,j,T,E=function(n){if(n===h&&z)return z;if(!x&&n in I)return I[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},C=e+" Iterator",O=!1,I=n.prototype,A=I[_]||I["@@iterator"]||h&&I[h],z=!x&&A||E(h),R="Array"==e&&I.entries||A;if(R&&(S=c(R.call(new n)))!==Object.prototype&&S.next&&(i||c(S)===y||(u?u(S,y):s(S[_])||f(S,_,w)),p(S,C,!0,!0),i&&(v[C]=w)),g&&"values"==h&&A&&"values"!==A.name&&(!i&&b?d(I,"name","values"):(O=!0,z=function(){return a(A,this)})),h)if(j={values:E("values"),keys:m?z:E("keys"),entries:E("entries")},k)for(T in j)(x||O||!(T in I))&&f(I,T,j[T]);else r({target:e,proto:!0,forced:x||O},j);return i&&!k||I[_]===z||f(I,_,z,{name:h}),v[e]=z,j}},function(n,e,t){var r=t(16),a=t(1),i=t(55),o=t(115),s=t(7),l=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=o.f;return t?l(e,t(n)):e}},function(n,e,t){"use strict";var r,a,i,o=t(3),s=t(4),l=t(32),c=t(116),u=t(14),p=t(5),d=t(22),f=p("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(a=c(c(i)))!==Object.prototype&&(r=a):h=!0),null==r||o((function(){var n={};return r[f].call(n)!==n}))?r={}:d&&(r=l(r)),s(r[f])||u(r,f,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},function(n,e,t){var r=t(3);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(0);n.exports=r.Promise},function(n,e,t){var r=t(5),a=t(62),i=r("iterator"),o=Array.prototype;n.exports=function(n){return void 0!==n&&(a.Array===n||o[i]===n)}},function(n,e,t){var r=t(11),a=t(7),i=t(46);n.exports=function(n,e,t){var o,s;a(n);try{if(!(o=i(n,"return"))){if("throw"===e)throw t;return t}o=r(o,n)}catch(n){s=!0,o=n}if("throw"===e)throw t;if(s)throw o;return a(o),t}},function(n,e,t){var r=t(5)("iterator"),a=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){a=!0}};o[r]=function(){return this},Array.from(o,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!a)return!1;var t=!1;try{var i={};i[r]=function(){return{next:function(){return{done:t=!0}}}},n(i)}catch(n){}return t}},function(n,e,t){var r=t(0),a=t(85),i=t(81),o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not a constructor")}},function(n,e,t){var r,a,i,o,s=t(0),l=t(34),c=t(53),u=t(4),p=t(10),d=t(3),f=t(157),h=t(65),v=t(78),m=t(142),g=t(168),b=t(86),y=s.setImmediate,x=s.clearImmediate,_=s.process,w=s.Dispatch,k=s.Function,S=s.MessageChannel,j=s.String,T=0,E={};try{r=s.location}catch(n){}var C=function(n){if(p(E,n)){var e=E[n];delete E[n],e()}},O=function(n){return function(){C(n)}},I=function(n){C(n.data)},A=function(n){s.postMessage(j(n),r.protocol+"//"+r.host)};y&&x||(y=function(n){m(arguments.length,1);var e=u(n)?n:k(n),t=h(arguments,1);return E[++T]=function(){l(e,void 0,t)},a(T),T},x=function(n){delete E[n]},b?a=function(n){_.nextTick(O(n))}:w&&w.now?a=function(n){w.now(O(n))}:S&&!g?(o=(i=new S).port2,i.port1.onmessage=I,a=c(o.postMessage,o)):s.addEventListener&&u(s.postMessage)&&!s.importScripts&&r&&"file:"!==r.protocol&&!d(A)?(a=A,s.addEventListener("message",I,!1)):a="onreadystatechange"in v("script")?function(n){f.appendChild(v("script")).onreadystatechange=function(){f.removeChild(this),C(n)}}:function(n){setTimeout(O(n),0)}),n.exports={set:y,clear:x}},function(n,e,t){var r=t(27);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(n,e,t){var r=t(7),a=t(8),i=t(170);n.exports=function(n,e){if(r(n),a(e)&&e.constructor===n)return e;var t=i.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var r=t(35),a=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new a(n)}},function(n,e,t){var r=t(1),a=t(52),i=t(12),o=t(17),s=r("".charAt),l=r("".charCodeAt),c=r("".slice),u=function(n){return function(e,t){var r,u,p=i(o(e)),d=a(t),f=p.length;return d<0||d>=f?n?"":void 0:(r=l(p,d))<55296||r>56319||d+1===f||(u=l(p,d+1))<56320||u>57343?n?s(p,d):r:n?c(p,d,d+2):u-56320+(r-55296<<10)+65536}};n.exports={codeAt:u(!1),charAt:u(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(78)("span").classList,a=r&&r.constructor&&r.constructor.prototype;n.exports=a===Object.prototype?void 0:a},function(n,e,t){var r=t(2),a=t(3),i=t(15),o=t(116),s=t(161);r({target:"Object",stat:!0,forced:a((function(){o(1)})),sham:!s},{getPrototypeOf:function(n){return o(i(n))}})},function(n,e,t){var r=t(0),a=t(144),i=r.TypeError;n.exports=function(n){if(a(n))throw i("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(5)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){"use strict";var r=t(54).forEach,a=t(45)("forEach");n.exports=a?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(3);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(21),a=t(19),i=t(55).f,o=t(119),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==r(n)?function(n){try{return i(n)}catch(n){return o(s)}}(n):i(a(n))}},function(n,e,t){var r=t(5);e.f=r},function(n,e,t){var r=t(258),a=t(10),i=t(180),o=t(13).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});a(e,n)||o(e,n,{value:i.f(n)})}},function(n,e,t){var r=t(2),a=t(259);r({target:"Array",stat:!0,forced:!t(165)((function(n){Array.from(n)}))},{from:a})},function(n,e,t){var r=t(12);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){t(2)({target:"Object",stat:!0,sham:!t(9)},{create:t(32)})},function(n,e,t){var r=t(2),a=t(0),i=t(16),o=t(34),s=t(1),l=t(3),c=a.Array,u=i("JSON","stringify"),p=s(/./.exec),d=s("".charAt),f=s("".charCodeAt),h=s("".replace),v=s(1..toString),m=/[\uD800-\uDFFF]/g,g=/^[\uD800-\uDBFF]$/,b=/^[\uDC00-\uDFFF]$/,y=function(n,e,t){var r=d(t,e-1),a=d(t,e+1);return p(g,n)&&!p(b,a)||p(b,n)&&!p(g,r)?"\\u"+v(f(n,0),16):n},x=l((function(){return'"\\udf06\\ud834"'!==u("\udf06\ud834")||'"\\udead"'!==u("\udead")}));u&&r({target:"JSON",stat:!0,forced:x},{stringify:function(n,e,t){for(var r=0,a=arguments.length,i=c(a);r<a;r++)i[r]=arguments[r];var s=o(u,null,i);return"string"==typeof s?h(s,m,y):s}})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(91),a=t(280),i=t(281),o=t(282),s=t(283),l=t(284);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=a,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(58),a=t(124);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(301),a=t(48);n.exports=function n(e,t,i,o,s){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,i,o,n,s))}},function(n,e,t){var r=t(194),a=t(304),i=t(195);n.exports=function(n,e,t,o,s,l){var c=1&t,u=n.length,p=e.length;if(u!=p&&!(c&&p>u))return!1;var d=l.get(n),f=l.get(e);if(d&&f)return d==e&&f==n;var h=-1,v=!0,m=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++h<u;){var g=n[h],b=e[h];if(o)var y=c?o(b,g,h,e,n,l):o(g,b,h,n,e,l);if(void 0!==y){if(y)continue;v=!1;break}if(m){if(!a(e,(function(n,e){if(!i(m,e)&&(g===n||s(g,n,t,o,l)))return m.push(e)}))){v=!1;break}}else if(g!==b&&!s(g,b,t,o,l)){v=!1;break}}return l.delete(n),l.delete(e),v}},function(n,e,t){var r=t(125),a=t(302),i=t(303);function o(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}o.prototype.add=o.prototype.push=a,o.prototype.has=i,n.exports=o},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(314),a=t(320),i=t(200);n.exports=function(n){return i(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(28),a=t(316),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===i?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||a;n.exports=l}).call(this,t(147)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(317),a=t(318),i=t(319),o=i&&i.isTypedArray,s=o?a(o):r;n.exports=s},function(n,e,t){var r=t(190),a=t(127);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(41)(t(28),"Set");n.exports=r},function(n,e,t){var r=t(124);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(205),a=t(95);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[a(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(26),a=t(128),i=t(331),o=t(334);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:i(o(n))}},function(n,e,t){"use strict";var r=t(0),a=t(1),i=t(35),o=t(8),s=t(10),l=t(65),c=t(60),u=r.Function,p=a([].concat),d=a([].join),f={},h=function(n,e,t){if(!s(f,e)){for(var r=[],a=0;a<e;a++)r[a]="a["+a+"]";f[e]=u("C,a","return new C("+d(r,",")+")")}return f[e](n,t)};n.exports=c?u.bind:function(n){var e=i(this),t=e.prototype,r=l(arguments,1),a=function(){var t=p(r,l(arguments));return this instanceof a?h(e,t.length,t):e.apply(n,t)};return o(t)&&(a.prototype=t),a}},function(n,e,t){"use strict";var r=t(2),a=t(367).start;r({target:"String",proto:!0,forced:t(369)},{padStart:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){},function(n,e,t){},function(n,e,t){t(2)({target:"Object",stat:!0},{setPrototypeOf:t(64)})},function(n,e,t){var r=t(2),a=t(16),i=t(34),o=t(206),s=t(166),l=t(7),c=t(8),u=t(32),p=t(3),d=a("Reflect","construct"),f=Object.prototype,h=[].push,v=p((function(){function n(){}return!(d((function(){}),[],n)instanceof n)})),m=!p((function(){d((function(){}))})),g=v||m;r({target:"Reflect",stat:!0,forced:g,sham:g},{construct:function(n,e){s(n),l(e);var t=arguments.length<3?n:s(arguments[2]);if(m&&!v)return d(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return i(h,r,e),new(i(o,n,r))}var a=t.prototype,p=u(c(a)?a:f),g=i(n,p,e);return c(g)?g:p}})},function(n,e,t){var r=t(2),a=t(0),i=t(56);r({global:!0},{Reflect:{}}),i(a.Reflect,"Reflect",!0)},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(267),a=t(272),i=t(343),o=t(351),s=t(360),l=t(229),c=i((function(n){var e=l(n);return s(e)&&(e=void 0),o(r(n,1,s,!0),a(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var i="",o=0,s=0;for(o=a.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==o&&(i+=t.substring(s,o)),s=o+1,i+=e}return s!==o?i+t.substring(s,o):i}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(370),t(29)),i=Object(a.a)(r,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);t(37),t(6),t(38),t(43),t(30);var r={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},a=(t(371),t(29)),i=Object(a.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,r){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=i.exports},function(n,e,t){"use strict";var r=t(9),a=t(0),i=t(1),o=t(100),s=t(14),l=t(10),c=t(146),u=t(33),p=t(80),d=t(155),f=t(3),h=t(55).f,v=t(39).f,m=t(13).f,g=t(365),b=t(149).trim,y=a.Number,x=y.prototype,_=a.TypeError,w=i("".slice),k=i("".charCodeAt),S=function(n){var e=d(n,"number");return"bigint"==typeof e?e:j(e)},j=function(n){var e,t,r,a,i,o,s,l,c=d(n,"number");if(p(c))throw _("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=b(c),43===(e=k(c,0))||45===e){if(88===(t=k(c,2))||120===t)return NaN}else if(48===e){switch(k(c,1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+c}for(o=(i=w(c,2)).length,s=0;s<o;s++)if((l=k(i,s))<48||l>a)return NaN;return parseInt(i,r)}return+c};if(o("Number",!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var T,E=function(n){var e=arguments.length<1?0:y(S(n)),t=this;return u(x,t)&&f((function(){g(t)}))?c(Object(e),t,E):e},C=r?h(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),O=0;C.length>O;O++)l(y,T=C[O])&&!l(E,T)&&m(E,T,v(y,T));E.prototype=x,x.constructor=E,s(a,"Number",E)}},function(n,e,t){var r=t(3),a=t(0).RegExp;n.exports=r((function(){var n=a(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){"use strict";var r=t(160).IteratorPrototype,a=t(32),i=t(47),o=t(56),s=t(62),l=function(){return this};n.exports=function(n,e,t,c){var u=e+" Iterator";return n.prototype=a(r,{next:i(+!c,t)}),o(n,u,!1,!0),s[u]=l,n}},function(n,e,t){var r=t(14);n.exports=function(n,e,t){for(var a in e)r(n,a,e[a],t);return n}},function(n,e,t){"use strict";var r=t(16),a=t(13),i=t(5),o=t(9),s=i("species");n.exports=function(n){var e=r(n),t=a.f;o&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var r=t(0),a=t(33),i=r.TypeError;n.exports=function(n,e){if(a(e,n))return n;throw i("Incorrect invocation")}},function(n,e,t){var r=t(2),a=t(9),i=t(159),o=t(19),s=t(39),l=t(66);r({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(n){for(var e,t,r=o(n),a=s.f,c=i(r),u={},p=0;c.length>p;)void 0!==(t=a(r,e=c[p++]))&&l(u,e,t);return u}})},function(n,e,t){var r=t(3),a=t(0).RegExp;n.exports=r((function(){var n=a("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){"use strict";var r=t(2),a=t(110).includes,i=t(135);r({target:"Array",proto:!0},{includes:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(n,e,t){"use strict";var r=t(2),a=t(1),i=t(175),o=t(17),s=t(12),l=t(176),c=a("".indexOf);r({target:"String",proto:!0,forced:!l("includes")},{includes:function(n){return!!~c(s(o(this)),s(i(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){"use strict";var r=t(2),a=t(149).trim;r({target:"String",proto:!0,forced:t(363)("trim")},{trim:function(){return a(this)}})},function(n,e,t){var r=t(119),a=Math.floor,i=function(n,e){var t=n.length,l=a(t/2);return t<8?o(n,e):s(n,i(r(n,0,l),e),i(r(n,l),e),e)},o=function(n,e){for(var t,r,a=n.length,i=1;i<a;){for(r=i,t=n[i];r&&e(n[r-1],t)>0;)n[r]=n[--r];r!==i++&&(n[r]=t)}return n},s=function(n,e,t,r){for(var a=e.length,i=t.length,o=0,s=0;o<a||s<i;)n[o+s]=o<a&&s<i?r(e[o],t[s])<=0?e[o++]:t[s++]:o<a?e[o++]:t[s++];return n};n.exports=i},function(n,e,t){var r=t(0),a=t(9),i=t(103).MISSED_STICKY,o=t(21),s=t(13).f,l=t(36).get,c=RegExp.prototype,u=r.TypeError;a&&i&&s(c,"sticky",{configurable:!0,get:function(){if(this!==c){if("RegExp"===o(this))return!!l(this).sticky;throw u("Incompatible receiver, RegExp required")}}})},function(n,e,t){n.exports=t(380)},function(n,e,t){var r=t(0),a=t(11),i=t(4),o=t(8),s=r.TypeError;n.exports=function(n,e){var t,r;if("string"===e&&i(t=n.toString)&&!o(r=a(t,n)))return r;if(i(t=n.valueOf)&&!o(r=a(t,n)))return r;if("string"!==e&&i(t=n.toString)&&!o(r=a(t,n)))return r;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),a=t(4),i=t(84),o=r.WeakMap;n.exports=a(o)&&/native code/.test(i(o))},function(n,e,t){var r=t(0),a=t(4),i=r.String,o=r.TypeError;n.exports=function(n){if("object"==typeof n||a(n))return n;throw o("Can't set "+i(n)+" as a prototype")}},function(n,e,t){"use strict";var r,a,i,o,s=t(2),l=t(22),c=t(0),u=t(16),p=t(11),d=t(162),f=t(14),h=t(222),v=t(64),m=t(56),g=t(223),b=t(35),y=t(4),x=t(8),_=t(224),w=t(84),k=t(238),S=t(165),j=t(118),T=t(167).set,E=t(239),C=t(169),O=t(242),I=t(170),A=t(243),z=t(244),R=t(36),P=t(100),L=t(5),M=t(245),B=t(86),$=t(49),D=L("species"),J="Promise",N=R.getterFor(J),F=R.set,q=R.getterFor(J),U=d&&d.prototype,H=d,V=U,G=c.TypeError,Q=c.document,X=c.process,K=I.f,W=K,Y=!!(Q&&Q.createEvent&&c.dispatchEvent),Z=y(c.PromiseRejectionEvent),nn=!1,en=P(J,(function(){var n=w(H),e=n!==String(H);if(!e&&66===$)return!0;if(l&&!V.finally)return!0;if($>=51&&/native code/.test(n))return!1;var t=new H((function(n){n(1)})),r=function(n){n((function(){}),(function(){}))};return(t.constructor={})[D]=r,!(nn=t.then((function(){}))instanceof r)||!e&&M&&!Z})),tn=en||!S((function(n){H.all(n).catch((function(){}))})),rn=function(n){var e;return!(!x(n)||!y(e=n.then))&&e},an=function(n,e){var t,r,a,i=e.value,o=1==e.state,s=o?n.ok:n.fail,l=n.resolve,c=n.reject,u=n.domain;try{s?(o||(2===e.rejection&&un(e),e.rejection=1),!0===s?t=i:(u&&u.enter(),t=s(i),u&&(u.exit(),a=!0)),t===n.promise?c(G("Promise-chain cycle")):(r=rn(t))?p(r,t,l,c):l(t)):c(i)}catch(n){u&&!a&&u.exit(),c(n)}},on=function(n,e){n.notified||(n.notified=!0,E((function(){for(var t,r=n.reactions;t=r.get();)an(t,n);n.notified=!1,e&&!n.rejection&&ln(n)})))},sn=function(n,e,t){var r,a;Y?((r=Q.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),c.dispatchEvent(r)):r={promise:e,reason:t},!Z&&(a=c["on"+n])?a(r):"unhandledrejection"===n&&O("Unhandled promise rejection",t)},ln=function(n){p(T,c,(function(){var e,t=n.facade,r=n.value;if(cn(n)&&(e=A((function(){B?X.emit("unhandledRejection",r,t):sn("unhandledrejection",t,r)})),n.rejection=B||cn(n)?2:1,e.error))throw e.value}))},cn=function(n){return 1!==n.rejection&&!n.parent},un=function(n){p(T,c,(function(){var e=n.facade;B?X.emit("rejectionHandled",e):sn("rejectionhandled",e,n.value)}))},pn=function(n,e,t){return function(r){n(e,r,t)}},dn=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,on(n,!0))},fn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw G("Promise can't be resolved itself");var r=rn(e);r?E((function(){var t={done:!1};try{p(r,e,pn(fn,t,n),pn(dn,t,n))}catch(e){dn(t,e,n)}})):(n.value=e,n.state=1,on(n,!1))}catch(e){dn({done:!1},e,n)}}};if(en&&(V=(H=function(n){_(this,V),b(n),p(r,this);var e=N(this);try{n(pn(fn,e),pn(dn,e))}catch(n){dn(e,n)}}).prototype,(r=function(n){F(this,{type:J,done:!1,notified:!1,parent:!1,reactions:new z,rejection:!1,state:0,value:void 0})}).prototype=h(V,{then:function(n,e){var t=q(this),r=K(j(this,H));return t.parent=!0,r.ok=!y(n)||n,r.fail=y(e)&&e,r.domain=B?X.domain:void 0,0==t.state?t.reactions.add(r):E((function(){an(r,t)})),r.promise},catch:function(n){return this.then(void 0,n)}}),a=function(){var n=new r,e=N(n);this.promise=n,this.resolve=pn(fn,e),this.reject=pn(dn,e)},I.f=K=function(n){return n===H||n===i?new a(n):W(n)},!l&&y(d)&&U!==Object.prototype)){o=U.then,nn||(f(U,"then",(function(n,e){var t=this;return new H((function(n,e){p(o,t,n,e)})).then(n,e)}),{unsafe:!0}),f(U,"catch",V.catch,{unsafe:!0}));try{delete U.constructor}catch(n){}v&&v(U,V)}s({global:!0,wrap:!0,forced:en},{Promise:H}),m(H,J,!1,!0),g(J),i=u(J),s({target:J,stat:!0,forced:en},{reject:function(n){var e=K(this);return p(e.reject,void 0,n),e.promise}}),s({target:J,stat:!0,forced:l||en},{resolve:function(n){return C(l&&this===i?H:this,n)}}),s({target:J,stat:!0,forced:tn},{all:function(n){var e=this,t=K(e),r=t.resolve,a=t.reject,i=A((function(){var t=b(e.resolve),i=[],o=0,s=1;k(n,(function(n){var l=o++,c=!1;s++,p(t,e,n).then((function(n){c||(c=!0,i[l]=n,--s||r(i))}),a)})),--s||r(i)}));return i.error&&a(i.value),t.promise},race:function(n){var e=this,t=K(e),r=t.reject,a=A((function(){var a=b(e.resolve);k(n,(function(n){p(a,e,n).then(t.resolve,r)}))}));return a.error&&r(a.value),t.promise}})},function(n,e,t){var r=t(0),a=t(53),i=t(11),o=t(7),s=t(81),l=t(163),c=t(20),u=t(33),p=t(141),d=t(101),f=t(164),h=r.TypeError,v=function(n,e){this.stopped=n,this.result=e},m=v.prototype;n.exports=function(n,e,t){var r,g,b,y,x,_,w,k=t&&t.that,S=!(!t||!t.AS_ENTRIES),j=!(!t||!t.IS_ITERATOR),T=!(!t||!t.INTERRUPTED),E=a(e,k),C=function(n){return r&&f(r,"normal",n),new v(!0,n)},O=function(n){return S?(o(n),T?E(n[0],n[1],C):E(n[0],n[1])):T?E(n,C):E(n)};if(j)r=n;else{if(!(g=d(n)))throw h(s(n)+" is not iterable");if(l(g)){for(b=0,y=c(n);y>b;b++)if((x=O(n[b]))&&u(m,x))return x;return new v(!1)}r=p(n,g)}for(_=r.next;!(w=i(_,r)).done;){try{x=O(w.value)}catch(n){f(r,"throw",n)}if("object"==typeof x&&x&&u(m,x))return x}return new v(!1)}},function(n,e,t){var r,a,i,o,s,l,c,u,p=t(0),d=t(53),f=t(39).f,h=t(167).set,v=t(168),m=t(240),g=t(241),b=t(86),y=p.MutationObserver||p.WebKitMutationObserver,x=p.document,_=p.process,w=p.Promise,k=f(p,"queueMicrotask"),S=k&&k.value;S||(r=function(){var n,e;for(b&&(n=_.domain)&&n.exit();a;){e=a.fn,a=a.next;try{e()}catch(n){throw a?o():i=void 0,n}}i=void 0,n&&n.enter()},v||b||g||!y||!x?!m&&w&&w.resolve?((c=w.resolve(void 0)).constructor=w,u=d(c.then,c),o=function(){u(r)}):b?o=function(){_.nextTick(r)}:(h=d(h,p),o=function(){h(r)}):(s=!0,l=x.createTextNode(""),new y(r).observe(l,{characterData:!0}),o=function(){l.data=s=!s})),n.exports=S||function(n){var e={fn:n,next:void 0};i&&(i.next=e),a||(a=e,o()),i=e}},function(n,e,t){var r=t(27),a=t(0);n.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==a.Pebble},function(n,e,t){var r=t(27);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(0);n.exports=function(n,e){var t=r.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window},function(n,e,t){var r=t(2),a=t(247);r({target:"Object",stat:!0,forced:Object.assign!==a},{assign:a})},function(n,e,t){"use strict";var r=t(9),a=t(1),i=t(11),o=t(3),s=t(82),l=t(115),c=t(113),u=t(15),p=t(59),d=Object.assign,f=Object.defineProperty,h=a([].concat);n.exports=!d||o((function(){if(r&&1!==d({b:1},d(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=d({},n)[t]||"abcdefghijklmnopqrst"!=s(d({},e)).join("")}))?function(n,e){for(var t=u(n),a=arguments.length,o=1,d=l.f,f=c.f;a>o;)for(var v,m=p(arguments[o++]),g=d?h(s(m),d(m)):s(m),b=g.length,y=0;b>y;)v=g[y++],r&&!i(f,m,v)||(t[v]=m[v]);return t}:d},function(n,e,t){"use strict";var r=t(2),a=t(22),i=t(162),o=t(3),s=t(16),l=t(4),c=t(118),u=t(169),p=t(14);if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&o((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=c(this,s("Promise")),t=l(n);return this.then(t?function(t){return u(e,n()).then((function(){return t}))}:n,t?function(t){return u(e,n()).then((function(){throw t}))}:n)}}),!a&&l(i)){var d=s("Promise").prototype.finally;i.prototype.finally!==d&&p(i.prototype,"finally",d,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(117),a=t(73);n.exports=r?{}.toString:function(){return"[object "+a(this)+"]"}},function(n,e,t){var r=t(0),a=t(57),i=t(85),o=t(8),s=t(5)("species"),l=r.Array;n.exports=function(n){var e;return a(n)&&(e=n.constructor,(i(e)&&(e===l||a(e.prototype))||o(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?l:e}},function(n,e,t){"use strict";var r=t(2),a=t(252).left,i=t(45),o=t(49),s=t(86);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&o>79&&o<83},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),a=t(35),i=t(15),o=t(59),s=t(20),l=r.TypeError,c=function(n){return function(e,t,r,c){a(t);var u=i(e),p=o(u),d=s(u),f=n?d-1:0,h=n?-1:1;if(r<2)for(;;){if(f in p){c=p[f],f+=h;break}if(f+=h,n?f<0:d<=f)throw l("Reduce of empty array with no initial value")}for(;n?f>=0:d>f;f+=h)f in p&&(c=t(c,p[f],f,u));return c}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){"use strict";var r,a=t(2),i=t(1),o=t(39).f,s=t(50),l=t(12),c=t(175),u=t(17),p=t(176),d=t(22),f=i("".startsWith),h=i("".slice),v=Math.min,m=p("startsWith");a({target:"String",proto:!0,forced:!!(d||m||(r=o(String.prototype,"startsWith"),!r||r.writable))&&!m},{startsWith:function(n){var e=l(u(this));c(n);var t=s(v(arguments.length>1?arguments[1]:void 0,e.length)),r=l(n);return f?f(e,r,t):h(e,t,t+r.length)===r}})},function(n,e,t){var r=t(2),a=t(178),i=t(3),o=t(8),s=t(255).onFreeze,l=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){l(1)})),sham:!a},{freeze:function(n){return l&&o(n)?l(s(n)):n}})},function(n,e,t){var r=t(2),a=t(1),i=t(61),o=t(8),s=t(10),l=t(13).f,c=t(55),u=t(179),p=t(256),d=t(77),f=t(178),h=!1,v=d("meta"),m=0,g=function(n){l(n,v,{value:{objectID:"O"+m++,weakData:{}}})},b=n.exports={enable:function(){b.enable=function(){},h=!0;var n=c.f,e=a([].splice),t={};t[v]=1,n(t).length&&(c.f=function(t){for(var r=n(t),a=0,i=r.length;a<i;a++)if(r[a]===v){e(r,a,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(n,e){if(!o(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,v)){if(!p(n))return"F";if(!e)return"E";g(n)}return n[v].objectID},getWeakData:function(n,e){if(!s(n,v)){if(!p(n))return!0;if(!e)return!1;g(n)}return n[v].weakData},onFreeze:function(n){return f&&h&&p(n)&&!s(n,v)&&g(n),n}};i[v]=!0},function(n,e,t){var r=t(3),a=t(8),i=t(21),o=t(257),s=Object.isExtensible,l=r((function(){s(1)}));n.exports=l||o?function(n){return!!a(n)&&((!o||"ArrayBuffer"!=i(n))&&(!s||s(n)))}:s},function(n,e,t){var r=t(3);n.exports=r((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){var r=t(0);n.exports=r},function(n,e,t){"use strict";var r=t(0),a=t(53),i=t(11),o=t(15),s=t(260),l=t(163),c=t(85),u=t(20),p=t(66),d=t(141),f=t(101),h=r.Array;n.exports=function(n){var e=o(n),t=c(this),r=arguments.length,v=r>1?arguments[1]:void 0,m=void 0!==v;m&&(v=a(v,r>2?arguments[2]:void 0));var g,b,y,x,_,w,k=f(e),S=0;if(!k||this==h&&l(k))for(g=u(e),b=t?new this(g):h(g);g>S;S++)w=m?v(e[S],S):e[S],p(b,S,w);else for(_=(x=d(e,k)).next,b=t?new this:[];!(y=i(_,x)).done;S++)w=m?s(x,v,[y.value,S],!0):y.value,p(b,S,w);return b.length=S,b}},function(n,e,t){var r=t(7),a=t(164);n.exports=function(n,e,t,i){try{return i?e(r(t)[0],t[1]):e(t)}catch(e){a(n,"throw",e)}}},function(n,e,t){"use strict";var r=t(16),a=t(10),i=t(23),o=t(33),s=t(64),l=t(114),c=t(146),u=t(183),p=t(262),d=t(263),f=t(264),h=t(22);n.exports=function(n,e,t,v){var m=v?2:1,g=n.split("."),b=g[g.length-1],y=r.apply(null,g);if(y){var x=y.prototype;if(!h&&a(x,"cause")&&delete x.cause,!t)return y;var _=r("Error"),w=e((function(n,e){var t=u(v?e:n,void 0),r=v?new y(n):new y;return void 0!==t&&i(r,"message",t),f&&i(r,"stack",d(r.stack,2)),this&&o(x,this)&&c(r,this,w),arguments.length>m&&p(r,arguments[m]),r}));if(w.prototype=x,"Error"!==b&&(s?s(w,_):l(w,_,{name:!0})),l(w,y),!h)try{x.name!==b&&i(x,"name",b),x.constructor=w}catch(n){}return w}}},function(n,e,t){var r=t(8),a=t(23);n.exports=function(n,e){r(e)&&"cause"in e&&a(n,"cause",e.cause)}},function(n,e,t){var r=t(1)("".replace),a=String(Error("zxcasd").stack),i=/\n\s*at [^:]*:[^\n]*/,o=i.test(a);n.exports=function(n,e){if(o&&"string"==typeof n)for(;e--;)n=r(n,i,"");return n}},function(n,e,t){var r=t(3),a=t(47);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(9),a=t(3),i=t(7),o=t(32),s=t(183),l=Error.prototype.toString,c=a((function(){if(r){var n=o(Object.defineProperty({},"name",{get:function(){return this===n}}));if("true"!==l.call(n))return!0}return"2: 1"!==l.call({message:1,name:2})||"Error"!==l.call({})}));n.exports=c?function(){var n=i(this),e=s(n.name,"Error"),t=s(n.message);return e?t?e+": "+t:e:t}:l},function(n,e,t){var r=t(1),a=t(15),i=Math.floor,o=r("".charAt),s=r("".replace),l=r("".slice),c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,r,p,d){var f=t+n.length,h=r.length,v=u;return void 0!==p&&(p=a(p),v=c),s(d,v,(function(a,s){var c;switch(o(s,0)){case"$":return"$";case"&":return n;case"`":return l(e,0,t);case"'":return l(e,f);case"<":c=p[l(s,1,-1)];break;default:var u=+s;if(0===u)return a;if(u>h){var d=i(u/10);return 0===d?a:d<=h?void 0===r[d-1]?o(s,1):r[d-1]+o(s,1):a}c=r[u-1]}return void 0===c?"":c}))}},function(n,e,t){var r=t(186),a=t(268);n.exports=function n(e,t,i,o,s){var l=-1,c=e.length;for(i||(i=a),s||(s=[]);++l<c;){var u=e[l];t>0&&i(u)?t>1?n(u,t-1,i,o,s):r(s,u):o||(s[s.length]=u)}return s}},function(n,e,t){var r=t(67),a=t(122),i=t(26),o=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||a(n)||!!(o&&n&&n[o])}},function(n,e,t){var r=t(58),a=t(48);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(67),a=Object.prototype,i=a.hasOwnProperty,o=a.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var a=o.call(n);return r&&(e?n[s]=t:delete n[s]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(273),a=t(329),i=t(130),o=t(26),s=t(340);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?o(n)?a(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(274),a=t(328),i=t(203);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(188),a=t(192);n.exports=function(n,e,t,i){var o=t.length,s=o,l=!i;if(null==n)return!s;for(n=Object(n);o--;){var c=t[o];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++o<s;){var u=(c=t[o])[0],p=n[u],d=c[1];if(l&&c[2]){if(void 0===p&&!(u in n))return!1}else{var f=new r;if(i)var h=i(p,d,u,n,e,f);if(!(void 0===h?a(d,p,3,i,f):h))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(92),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(92);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(92);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(92);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(91);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(91),a=t(123),i=t(125);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var o=t.__data__;if(!a||o.length<199)return o.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(o)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(190),a=t(286),i=t(124),o=t(191),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||a(n))&&(r(n)?d:s).test(o(n))}},function(n,e,t){var r,a=t(287),i=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(28)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(290),a=t(91),i=t(123);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||a),string:new r}}},function(n,e,t){var r=t(291),a=t(292),i=t(293),o=t(294),s=t(295);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(93);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(93),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(93),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(93);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(94);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(94);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(94);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(94);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(188),a=t(193),i=t(305),o=t(308),s=t(324),l=t(26),c=t(197),u=t(199),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,f,h,v){var m=l(n),g=l(e),b=m?"[object Array]":s(n),y=g?"[object Array]":s(e),x=(b="[object Arguments]"==b?p:b)==p,_=(y="[object Arguments]"==y?p:y)==p,w=b==y;if(w&&c(n)){if(!c(e))return!1;m=!0,x=!1}if(w&&!x)return v||(v=new r),m||u(n)?a(n,e,t,f,h,v):i(n,e,b,t,f,h,v);if(!(1&t)){var k=x&&d.call(n,"__wrapped__"),S=_&&d.call(e,"__wrapped__");if(k||S){var j=k?n.value():n,T=S?e.value():e;return v||(v=new r),h(j,T,t,f,v)}}return!!w&&(v||(v=new r),o(n,e,t,f,h,v))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(67),a=t(306),i=t(189),o=t(193),s=t(307),l=t(126),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var f=s;case"[object Set]":var h=1&r;if(f||(f=l),n.size!=e.size&&!h)return!1;var v=d.get(n);if(v)return v==e;r|=2,d.set(n,e);var m=o(f(n),f(e),r,c,p,d);return d.delete(n),m;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(28).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(309),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,o,s){var l=1&t,c=r(n),u=c.length;if(u!=r(e).length&&!l)return!1;for(var p=u;p--;){var d=c[p];if(!(l?d in e:a.call(e,d)))return!1}var f=s.get(n),h=s.get(e);if(f&&h)return f==e&&h==n;var v=!0;s.set(n,e),s.set(e,n);for(var m=l;++p<u;){var g=n[d=c[p]],b=e[d];if(i)var y=l?i(b,g,d,e,n,s):i(g,b,d,n,e,s);if(!(void 0===y?g===b||o(g,b,t,i,s):y)){v=!1;break}m||(m="constructor"==d)}if(v&&!m){var x=n.constructor,_=e.constructor;x==_||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof _&&_ instanceof _||(v=!1)}return s.delete(n),s.delete(e),v}},function(n,e,t){var r=t(310),a=t(311),i=t(196);n.exports=function(n){return r(n,i,a)}},function(n,e,t){var r=t(186),a=t(26);n.exports=function(n,e,t){var i=e(n);return a(n)?i:r(i,t(n))}},function(n,e,t){var r=t(312),a=t(313),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(n){return null==n?[]:(n=Object(n),r(o(n),(function(e){return i.call(n,e)})))}:a;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,i=[];++t<r;){var o=n[t];e(o,t,n)&&(i[a++]=o)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(315),a=t(122),i=t(26),o=t(197),s=t(198),l=t(199),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),u=!t&&a(n),p=!t&&!u&&o(n),d=!t&&!u&&!p&&l(n),f=t||u||p||d,h=f?r(n.length,String):[],v=h.length;for(var m in n)!e&&!c.call(n,m)||f&&("length"==m||p&&("offset"==m||"parent"==m)||d&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||s(m,v))||h.push(m);return h}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(58),a=t(127),i=t(48),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&a(n.length)&&!!o[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(187),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,o=i&&i.exports===a&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||o&&o.binding&&o.binding("util")}catch(n){}}();n.exports=s}).call(this,t(147)(n))},function(n,e,t){var r=t(321),a=t(322),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(323)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(325),a=t(123),i=t(326),o=t(201),s=t(327),l=t(58),c=t(191),u=c(r),p=c(a),d=c(i),f=c(o),h=c(s),v=l;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=v(new a)||i&&"[object Promise]"!=v(i.resolve())||o&&"[object Set]"!=v(new o)||s&&"[object WeakMap]"!=v(new s))&&(v=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case f:return"[object Set]";case h:return"[object WeakMap]"}return e}),n.exports=v},function(n,e,t){var r=t(41)(t(28),"DataView");n.exports=r},function(n,e,t){var r=t(41)(t(28),"Promise");n.exports=r},function(n,e,t){var r=t(41)(t(28),"WeakMap");n.exports=r},function(n,e,t){var r=t(202),a=t(196);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var i=e[t],o=n[i];e[t]=[i,o,r(o)]}return e}},function(n,e,t){var r=t(192),a=t(330),i=t(337),o=t(128),s=t(202),l=t(203),c=t(95);n.exports=function(n,e){return o(n)&&s(e)?l(c(n),e):function(t){var o=a(t,n);return void 0===o&&o===e?i(t,n):r(e,o,3)}}},function(n,e,t){var r=t(204);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(332),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(i,"$1"):t||n)})),e}));n.exports=o},function(n,e,t){var r=t(333);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(125);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],i=t.cache;if(i.has(a))return i.get(a);var o=n.apply(this,r);return t.cache=i.set(a,o)||i,o};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(335);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(67),a=t(336),i=t(26),o=t(129),s=r?r.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return a(e,n)+"";if(o(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(338),a=t(339);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(205),a=t(122),i=t(26),o=t(198),s=t(127),l=t(95);n.exports=function(n,e,t){for(var c=-1,u=(e=r(e,n)).length,p=!1;++c<u;){var d=l(e[c]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++c!=u?p:!!(u=null==n?0:n.length)&&s(u)&&o(d,u)&&(i(n)||a(n))}},function(n,e,t){var r=t(341),a=t(342),i=t(128),o=t(95);n.exports=function(n){return i(n)?r(o(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(204);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(130),a=t(344),i=t(346);n.exports=function(n,e){return i(a(n,e,r),n+"")}},function(n,e,t){var r=t(345),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var i=arguments,o=-1,s=a(i.length-e,0),l=Array(s);++o<s;)l[o]=i[e+o];o=-1;for(var c=Array(e+1);++o<e;)c[o]=i[o];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(347),a=t(350)(r);n.exports=a},function(n,e,t){var r=t(348),a=t(349),i=t(130),o=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=o},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(41),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),i=16-(a-r);if(r=a,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(194),a=t(352),i=t(357),o=t(195),s=t(358),l=t(126);n.exports=function(n,e,t){var c=-1,u=a,p=n.length,d=!0,f=[],h=f;if(t)d=!1,u=i;else if(p>=200){var v=e?null:s(n);if(v)return l(v);d=!1,u=o,h=new r}else h=e?[]:f;n:for(;++c<p;){var m=n[c],g=e?e(m):m;if(m=t||0!==m?m:0,d&&g==g){for(var b=h.length;b--;)if(h[b]===g)continue n;e&&h.push(g),f.push(m)}else u(h,g,t)||(h!==f&&h.push(g),f.push(m))}return f}},function(n,e,t){var r=t(353);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(354),a=t(355),i=t(356);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,i=t+(r?1:-1);r?i--:++i<a;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(201),a=t(359),i=t(126),o=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=o},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(200),a=t(48);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(63).PROPER,a=t(3),i=t(150);n.exports=function(n){return a((function(){return!!i[n]()||"​᠎"!=="​᠎"[n]()||r&&i[n].name!==n}))}},function(n,e,t){var r=t(2),a=t(206);r({target:"Function",proto:!0,forced:Function.bind!==a},{bind:a})},function(n,e,t){var r=t(1);n.exports=r(1..valueOf)},function(n,e){},function(n,e,t){var r=t(1),a=t(50),i=t(12),o=t(368),s=t(17),l=r(o),c=r("".slice),u=Math.ceil,p=function(n){return function(e,t,r){var o,p,d=i(s(e)),f=a(t),h=d.length,v=void 0===r?" ":i(r);return f<=h||""==v?d:((p=l(v,u((o=f-h)/v.length))).length>o&&(p=c(p,0,o)),n?d+p:p+d)}};n.exports={start:p(!1),end:p(!0)}},function(n,e,t){"use strict";var r=t(0),a=t(52),i=t(12),o=t(17),s=r.RangeError;n.exports=function(n){var e=i(o(this)),t="",r=a(n);if(r<0||r==1/0)throw s("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(t+=e);return t}},function(n,e,t){var r=t(27);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},function(n,e,t){"use strict";t(208)},function(n,e,t){"use strict";t(209)},function(n,e,t){"use strict";var r=t(2),a=t(1),i=t(35),o=t(15),s=t(20),l=t(12),c=t(3),u=t(231),p=t(45),d=t(373),f=t(374),h=t(49),v=t(375),m=[],g=a(m.sort),b=a(m.push),y=c((function(){m.sort(void 0)})),x=c((function(){m.sort(null)})),_=p("sort"),w=!c((function(){if(h)return h<70;if(!(d&&d>3)){if(f)return!0;if(v)return v<603;var n,e,t,r,a="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(r=0;r<47;r++)m.push({k:e+r,v:t})}for(m.sort((function(n,e){return e.v-n.v})),r=0;r<m.length;r++)e=m[r].k.charAt(0),a.charAt(a.length-1)!==e&&(a+=e);return"DGBEFHACIJK"!==a}}));r({target:"Array",proto:!0,forced:y||!x||!_||!w},{sort:function(n){void 0!==n&&i(n);var e=o(this);if(w)return void 0===n?g(e):g(e,n);var t,r,a=[],c=s(e);for(r=0;r<c;r++)r in e&&b(a,e[r]);for(u(a,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:l(e)>l(t)?1:-1}}(n)),t=a.length,r=0;r<t;)e[r]=a[r++];for(;r<c;)delete e[r++];return e}})},function(n,e,t){var r=t(27).match(/firefox\/(\d+)/i);n.exports=!!r&&+r[1]},function(n,e,t){var r=t(27);n.exports=/MSIE|Trident/.test(r)},function(n,e,t){var r=t(27).match(/AppleWebKit\/(\d+)\./);n.exports=!!r&&+r[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(213)},function(n,e,t){"use strict";t(214)},function(n,e,t){"use strict";t.r(e);t(139),t(237),t(246),t(248);var r=t(87),a=(t(136),t(51),t(6),t(24),t(31),t(43),t(30),Object.freeze({}));function i(n){return null==n}function o(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return null!==n&&"object"==typeof n}var u=Object.prototype.toString;function p(n){return"[object Object]"===u.call(n)}function d(n){return"[object RegExp]"===u.call(n)}function f(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function h(n){return o(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function v(n){return null==n?"":Array.isArray(n)||p(n)&&n.toString===u?JSON.stringify(n,null,2):String(n)}function m(n){var e=parseFloat(n);return isNaN(e)?n:e}function g(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}g("slot,component",!0);var b=g("key,ref,slot,slot-scope,is");function y(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var x=Object.prototype.hasOwnProperty;function _(n,e){return x.call(n,e)}function w(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var k=/-(\w)/g,S=w((function(n){return n.replace(k,(function(n,e){return e?e.toUpperCase():""}))})),j=w((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),T=/\B([A-Z])/g,E=w((function(n){return n.replace(T,"-$1").toLowerCase()}));var C=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function O(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function I(n,e){for(var t in e)n[t]=e[t];return n}function A(n){for(var e={},t=0;t<n.length;t++)n[t]&&I(e,n[t]);return e}function z(n,e,t){}var R=function(n,e,t){return!1},P=function(n){return n};function L(n,e){if(n===e)return!0;var t=c(n),r=c(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),i=Array.isArray(e);if(a&&i)return n.length===e.length&&n.every((function(n,t){return L(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||i)return!1;var o=Object.keys(n),s=Object.keys(e);return o.length===s.length&&o.every((function(t){return L(n[t],e[t])}))}catch(n){return!1}}function M(n,e){for(var t=0;t<n.length;t++)if(L(n[t],e))return t;return-1}function B(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var $=["component","directive","filter"],D=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],J={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:R,isReservedAttr:R,isUnknownElement:R,getTagNamespace:z,parsePlatformTagName:P,mustUseProp:R,async:!0,_lifecycleHooks:D},N=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function F(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var q=new RegExp("[^"+N.source+".$_\\d]");var U,H="__proto__"in{},V="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Q=G&&WXEnvironment.platform.toLowerCase(),X=V&&window.navigator.userAgent.toLowerCase(),K=X&&/msie|trident/.test(X),W=X&&X.indexOf("msie 9.0")>0,Y=X&&X.indexOf("edge/")>0,Z=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===Q),nn=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(V)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var an=function(){return void 0===U&&(U=!V&&!G&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),U},on=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function sn(n){return"function"==typeof n&&/native code/.test(n.toString())}var ln,cn="undefined"!=typeof Symbol&&sn(Symbol)&&"undefined"!=typeof Reflect&&sn(Reflect.ownKeys);ln="undefined"!=typeof Set&&sn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var un=z,pn=0,dn=function(){this.id=pn++,this.subs=[]};dn.prototype.addSub=function(n){this.subs.push(n)},dn.prototype.removeSub=function(n){y(this.subs,n)},dn.prototype.depend=function(){dn.target&&dn.target.addDep(this)},dn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},dn.target=null;var fn=[];function hn(n){fn.push(n),dn.target=n}function vn(){fn.pop(),dn.target=fn[fn.length-1]}var mn=function(n,e,t,r,a,i,o,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},gn={child:{configurable:!0}};gn.child.get=function(){return this.componentInstance},Object.defineProperties(mn.prototype,gn);var bn=function(n){void 0===n&&(n="");var e=new mn;return e.text=n,e.isComment=!0,e};function yn(n){return new mn(void 0,void 0,void 0,String(n))}function xn(n){var e=new mn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var _n=Array.prototype,wn=Object.create(_n);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=_n[n];F(wn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var a,i=e.apply(this,t),o=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&o.observeArray(a),o.dep.notify(),i}))}));var kn=Object.getOwnPropertyNames(wn),Sn=!0;function jn(n){Sn=n}var Tn=function(n){this.value=n,this.dep=new dn,this.vmCount=0,F(n,"__ob__",this),Array.isArray(n)?(H?function(n,e){n.__proto__=e}(n,wn):function(n,e,t){for(var r=0,a=t.length;r<a;r++){var i=t[r];F(n,i,e[i])}}(n,wn,kn),this.observeArray(n)):this.walk(n)};function En(n,e){var t;if(c(n)&&!(n instanceof mn))return _(n,"__ob__")&&n.__ob__ instanceof Tn?t=n.__ob__:Sn&&!an()&&(Array.isArray(n)||p(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new Tn(n)),e&&t&&t.vmCount++,t}function Cn(n,e,t,r,a){var i=new dn,o=Object.getOwnPropertyDescriptor(n,e);if(!o||!1!==o.configurable){var s=o&&o.get,l=o&&o.set;s&&!l||2!==arguments.length||(t=n[e]);var c=!a&&En(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return dn.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(e)&&An(e))),e},set:function(e){var r=s?s.call(n):t;e===r||e!=e&&r!=r||s&&!l||(l?l.call(n,e):t=e,c=!a&&En(e),i.notify())}})}}function On(n,e,t){if(Array.isArray(n)&&f(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(Cn(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function In(n,e){if(Array.isArray(n)&&f(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||_(n,e)&&(delete n[e],t&&t.dep.notify())}}function An(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&An(e)}Tn.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)Cn(n,e[t])},Tn.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)En(n[e])};var zn=J.optionMergeStrategies;function Rn(n,e){if(!e)return n;for(var t,r,a,i=cn?Reflect.ownKeys(e):Object.keys(e),o=0;o<i.length;o++)"__ob__"!==(t=i[o])&&(r=n[t],a=e[t],_(n,t)?r!==a&&p(r)&&p(a)&&Rn(r,a):On(n,t,a));return n}function Pn(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,a="function"==typeof n?n.call(t,t):n;return r?Rn(r,a):a}:e?n?function(){return Rn("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Ln(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Mn(n,e,t,r){var a=Object.create(n||null);return e?I(a,e):a}zn.data=function(n,e,t){return t?Pn(n,e,t):e&&"function"!=typeof e?n:Pn(n,e)},D.forEach((function(n){zn[n]=Ln})),$.forEach((function(n){zn[n+"s"]=Mn})),zn.watch=function(n,e,t,r){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in I(a,n),e){var o=a[i],s=e[i];o&&!Array.isArray(o)&&(o=[o]),a[i]=o?o.concat(s):Array.isArray(s)?s:[s]}return a},zn.props=zn.methods=zn.inject=zn.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return I(a,n),e&&I(a,e),a},zn.provide=Pn;var Bn=function(n,e){return void 0===e?n:e};function $n(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,i={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(i[S(a)]={type:null});else if(p(t))for(var o in t)a=t[o],i[S(o)]=p(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(p(t))for(var i in t){var o=t[i];r[i]=p(o)?I({from:i},o):{from:o}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=$n(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=$n(n,e.mixins[r],t);var i,o={};for(i in n)s(i);for(i in e)_(n,i)||s(i);function s(r){var a=zn[r]||Bn;o[r]=a(n[r],e[r],t,r)}return o}function Dn(n,e,t,r){if("string"==typeof t){var a=n[e];if(_(a,t))return a[t];var i=S(t);if(_(a,i))return a[i];var o=j(i);return _(a,o)?a[o]:a[t]||a[i]||a[o]}}function Jn(n,e,t,r){var a=e[n],i=!_(t,n),o=t[n],s=Un(Boolean,a.type);if(s>-1)if(i&&!_(a,"default"))o=!1;else if(""===o||o===E(n)){var l=Un(String,a.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=function(n,e,t){if(!_(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Fn(e.type)?r.call(n):r}(r,a,n);var c=Sn;jn(!0),En(o),jn(c)}return o}var Nn=/^\s*function (\w+)/;function Fn(n){var e=n&&n.toString().match(Nn);return e?e[1]:""}function qn(n,e){return Fn(n)===Fn(e)}function Un(n,e){if(!Array.isArray(e))return qn(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(qn(e[t],n))return t;return-1}function Hn(n,e,t){hn();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var i=0;i<a.length;i++)try{if(!1===a[i].call(r,n,e,t))return}catch(n){Gn(n,r,"errorCaptured hook")}}Gn(n,e,t)}finally{vn()}}function Vn(n,e,t,r,a){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&h(i)&&!i._handled&&(i.catch((function(n){return Hn(n,r,a+" (Promise/async)")})),i._handled=!0)}catch(n){Hn(n,r,a)}return i}function Gn(n,e,t){if(J.errorHandler)try{return J.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Qn(e,null,"config.errorHandler")}Qn(n,e,t)}function Qn(n,e,t){if(!V&&!G||"undefined"==typeof console)throw n;console.error(n)}var Xn,Kn=!1,Wn=[],Yn=!1;function Zn(){Yn=!1;var n=Wn.slice(0);Wn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&sn(Promise)){var ne=Promise.resolve();Xn=function(){ne.then(Zn),Z&&setTimeout(z)},Kn=!0}else if(K||"undefined"==typeof MutationObserver||!sn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Xn="undefined"!=typeof setImmediate&&sn(setImmediate)?function(){setImmediate(Zn)}:function(){setTimeout(Zn,0)};else{var ee=1,te=new MutationObserver(Zn),re=document.createTextNode(String(ee));te.observe(re,{characterData:!0}),Xn=function(){ee=(ee+1)%2,re.data=String(ee)},Kn=!0}function ae(n,e){var t;if(Wn.push((function(){if(n)try{n.call(e)}catch(n){Hn(n,e,"nextTick")}else t&&t(e)})),Yn||(Yn=!0,Xn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var ie=new ln;function oe(n){!function n(e,t){var r,a,i=Array.isArray(e);if(!i&&!c(e)||Object.isFrozen(e)||e instanceof mn)return;if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(i)for(r=e.length;r--;)n(e[r],t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,ie),ie.clear()}var se=w((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function le(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Vn(r,null,arguments,e,"v-on handler");for(var a=r.slice(),i=0;i<a.length;i++)Vn(a[i],null,n,e,"v-on handler")}return t.fns=n,t}function ce(n,e,t,r,a,o){var l,c,u,p;for(l in n)c=n[l],u=e[l],p=se(l),i(c)||(i(u)?(i(c.fns)&&(c=n[l]=le(c,o)),s(p.once)&&(c=n[l]=a(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==u&&(u.fns=c,n[l]=u));for(l in e)i(n[l])&&r((p=se(l)).name,e[l],p.capture)}function ue(n,e,t){var r;n instanceof mn&&(n=n.data.hook||(n.data.hook={}));var a=n[e];function l(){t.apply(this,arguments),y(r.fns,l)}i(a)?r=le([l]):o(a.fns)&&s(a.merged)?(r=a).fns.push(l):r=le([a,l]),r.merged=!0,n[e]=r}function pe(n,e,t,r,a){if(o(e)){if(_(e,t))return n[t]=e[t],a||delete e[t],!0;if(_(e,r))return n[t]=e[r],a||delete e[r],!0}return!1}function de(n){return l(n)?[yn(n)]:Array.isArray(n)?function n(e,t){var r,a,c,u,p=[];for(r=0;r<e.length;r++)i(a=e[r])||"boolean"==typeof a||(c=p.length-1,u=p[c],Array.isArray(a)?a.length>0&&(fe((a=n(a,(t||"")+"_"+r))[0])&&fe(u)&&(p[c]=yn(u.text+a[0].text),a.shift()),p.push.apply(p,a)):l(a)?fe(u)?p[c]=yn(u.text+a):""!==a&&p.push(yn(a)):fe(a)&&fe(u)?p[c]=yn(u.text+a.text):(s(e._isVList)&&o(a.tag)&&i(a.key)&&o(t)&&(a.key="__vlist"+t+"_"+r+"__"),p.push(a)));return p}(n):void 0}function fe(n){return o(n)&&o(n.text)&&!1===n.isComment}function he(n,e){if(n){for(var t=Object.create(null),r=cn?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var i=r[a];if("__ob__"!==i){for(var o=n[i].from,s=e;s;){if(s._provided&&_(s._provided,o)){t[i]=s._provided[o];break}s=s.$parent}if(!s)if("default"in n[i]){var l=n[i].default;t[i]="function"==typeof l?l.call(e):l}else 0}}return t}}function ve(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var i=n[r],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==e&&i.fnContext!==e||!o||null==o.slot)(t.default||(t.default=[])).push(i);else{var s=o.slot,l=t[s]||(t[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in t)t[c].every(me)&&delete t[c];return t}function me(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ge(n){return n.isComment&&n.asyncFactory}function be(n,e,t){var r,i=Object.keys(e).length>0,o=n?!!n.$stable:!i,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(o&&t&&t!==a&&s===t.$key&&!i&&!t.$hasNormal)return t;for(var l in r={},n)n[l]&&"$"!==l[0]&&(r[l]=ye(e,l,n[l]))}else r={};for(var c in e)c in r||(r[c]=xe(e,c));return n&&Object.isExtensible(n)&&(n._normalized=r),F(r,"$stable",o),F(r,"$key",s),F(r,"$hasNormal",i),r}function ye(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:de(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!ge(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function xe(n,e){return function(){return n[e]}}function _e(n,e){var t,r,a,i,s;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,a=n.length;r<a;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(c(n))if(cn&&n[Symbol.iterator]){t=[];for(var l=n[Symbol.iterator](),u=l.next();!u.done;)t.push(e(u.value,t.length)),u=l.next()}else for(i=Object.keys(n),t=new Array(i.length),r=0,a=i.length;r<a;r++)s=i[r],t[r]=e(n[s],s,r);return o(t)||(t=[]),t._isVList=!0,t}function we(n,e,t,r){var a,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=I(I({},r),t)),a=i(t)||("function"==typeof e?e():e)):a=this.$slots[n]||("function"==typeof e?e():e);var o=t&&t.slot;return o?this.$createElement("template",{slot:o},a):a}function ke(n){return Dn(this.$options,"filters",n)||P}function Se(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function je(n,e,t,r,a){var i=J.keyCodes[e]||t;return a&&r&&!J.keyCodes[e]?Se(a,r):i?Se(i,n):r?E(r)!==e:void 0===n}function Te(n,e,t,r,a){if(t)if(c(t)){var i;Array.isArray(t)&&(t=A(t));var o=function(o){if("class"===o||"style"===o||b(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||J.mustUseProp(e,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=S(o),c=E(o);l in i||c in i||(i[o]=t[o],a&&((n.on||(n.on={}))["update:"+o]=function(n){t[o]=n}))};for(var s in t)o(s)}else;return n}function Ee(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||Oe(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Ce(n,e,t){return Oe(n,"__once__"+e+(t?"_"+t:""),!0),n}function Oe(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Ie(n[r],e+"_"+r,t);else Ie(n,e,t)}function Ie(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function Ae(n,e){if(e)if(p(e)){var t=n.on=n.on?I({},n.on):{};for(var r in e){var a=t[r],i=e[r];t[r]=a?[].concat(a,i):i}}else;return n}function ze(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];Array.isArray(i)?ze(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function Re(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function Pe(n,e){return"string"==typeof n?e+n:n}function Le(n){n._o=Ce,n._n=m,n._s=v,n._l=_e,n._t=we,n._q=L,n._i=M,n._m=Ee,n._f=ke,n._k=je,n._b=Te,n._v=yn,n._e=bn,n._u=ze,n._g=Ae,n._d=Re,n._p=Pe}function Me(n,e,t,r,i){var o,l=this,c=i.options;_(r,"_uid")?(o=Object.create(r))._original=r:(o=r,r=r._original);var u=s(c._compiled),p=!u;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||a,this.injections=he(c.inject,r),this.slots=function(){return l.$slots||be(n.scopedSlots,l.$slots=ve(t,r)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return be(n.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=be(n.scopedSlots,this.$slots)),c._scopeId?this._c=function(n,e,t,a){var i=qe(o,n,e,t,a,p);return i&&!Array.isArray(i)&&(i.fnScopeId=c._scopeId,i.fnContext=r),i}:this._c=function(n,e,t,r){return qe(o,n,e,t,r,p)}}function Be(n,e,t,r,a){var i=xn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function $e(n,e){for(var t in e)n[S(t)]=e[t]}Le(Me.prototype);var De={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;De.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;o(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ye)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,i){0;var o=r.data.scopedSlots,s=n.$scopedSlots,l=!!(o&&!o.$stable||s!==a&&!s.$stable||o&&n.$scopedSlots.$key!==o.$key||!o&&n.$scopedSlots.$key),c=!!(i||n.$options._renderChildren||l);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=i,n.$attrs=r.data.attrs||a,n.$listeners=t||a,e&&n.$options.props){jn(!1);for(var u=n._props,p=n.$options._propKeys||[],d=0;d<p.length;d++){var f=p[d],h=n.$options.props;u[f]=Jn(f,h,e,n)}jn(!0),n.$options.propsData=e}t=t||a;var v=n.$options._parentListeners;n.$options._parentListeners=t,We(n,t,v),c&&(n.$slots=ve(i,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,tt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,at.push(e)):et(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},Je=Object.keys(De);function Ne(n,e,t,r,l){if(!i(n)){var u=t.$options._base;if(c(n)&&(n=u.extend(n)),"function"==typeof n){var p;if(i(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&o(n.errorComp))return n.errorComp;if(o(n.resolved))return n.resolved;var t=He;t&&o(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(s(n.loading)&&o(n.loadingComp))return n.loadingComp;if(t&&!o(n.owners)){var r=n.owners=[t],a=!0,l=null,u=null;t.$on("hook:destroyed",(function(){return y(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==u&&(clearTimeout(u),u=null))},d=B((function(t){n.resolved=Ve(t,e),a?r.length=0:p(!0)})),f=B((function(e){o(n.errorComp)&&(n.error=!0,p(!0))})),v=n(d,f);return c(v)&&(h(v)?i(n.resolved)&&v.then(d,f):h(v.component)&&(v.component.then(d,f),o(v.error)&&(n.errorComp=Ve(v.error,e)),o(v.loading)&&(n.loadingComp=Ve(v.loading,e),0===v.delay?n.loading=!0:l=setTimeout((function(){l=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,p(!1))}),v.delay||200)),o(v.timeout)&&(u=setTimeout((function(){u=null,i(n.resolved)&&f(null)}),v.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(p=n,u)))return function(n,e,t,r,a){var i=bn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:a},i}(p,e,t,r,l);e=e||{},St(n),o(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),i=a[r],s=e.model.callback;o(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(a[r]=[s].concat(i)):a[r]=s}(n.options,e);var d=function(n,e,t){var r=e.options.props;if(!i(r)){var a={},s=n.attrs,l=n.props;if(o(s)||o(l))for(var c in r){var u=E(c);pe(a,l,c,u,!0)||pe(a,s,c,u,!1)}return a}}(e,n);if(s(n.options.functional))return function(n,e,t,r,i){var s=n.options,l={},c=s.props;if(o(c))for(var u in c)l[u]=Jn(u,c,e||a);else o(t.attrs)&&$e(l,t.attrs),o(t.props)&&$e(l,t.props);var p=new Me(t,l,i,r,n),d=s.render.call(null,p._c,p);if(d instanceof mn)return Be(d,t,p.parent,s,p);if(Array.isArray(d)){for(var f=de(d)||[],h=new Array(f.length),v=0;v<f.length;v++)h[v]=Be(f[v],t,p.parent,s,p);return h}}(n,d,e,t,r);var f=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var v=e.slot;e={},v&&(e.slot=v)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<Je.length;t++){var r=Je[t],a=e[r],i=De[r];a===i||a&&a._merged||(e[r]=a?Fe(i,a):i)}}(e);var m=n.options.name||l;return new mn("vue-component-"+n.cid+(m?"-"+m:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:d,listeners:f,tag:l,children:r},p)}}}function Fe(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function qe(n,e,t,r,a,u){return(Array.isArray(t)||l(t))&&(a=r,r=t,t=void 0),s(u)&&(a=2),function(n,e,t,r,a){if(o(t)&&o(t.__ob__))return bn();o(t)&&o(t.is)&&(e=t.is);if(!e)return bn();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===a?r=de(r):1===a&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var l,u;if("string"==typeof e){var p;u=n.$vnode&&n.$vnode.ns||J.getTagNamespace(e),l=J.isReservedTag(e)?new mn(J.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!o(p=Dn(n.$options,"components",e))?new mn(e,t,r,void 0,void 0,n):Ne(p,t,n,r,e)}else l=Ne(e,t,n,r);return Array.isArray(l)?l:o(l)?(o(u)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(o(e.children))for(var a=0,l=e.children.length;a<l;a++){var c=e.children[a];o(c.tag)&&(i(c.ns)||s(r)&&"svg"!==c.tag)&&n(c,t,r)}}(l,u),o(t)&&function(n){c(n.style)&&oe(n.style);c(n.class)&&oe(n.class)}(t),l):bn()}(n,e,t,r,a)}var Ue,He=null;function Ve(n,e){return(n.__esModule||cn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),c(n)?e.extend(n):n}function Ge(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(o(t)&&(o(t.componentOptions)||ge(t)))return t}}function Qe(n,e){Ue.$on(n,e)}function Xe(n,e){Ue.$off(n,e)}function Ke(n,e){var t=Ue;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function We(n,e,t){Ue=n,ce(e,t||{},Qe,Xe,Ke,n),Ue=void 0}var Ye=null;function Ze(n){var e=Ye;return Ye=n,function(){Ye=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){hn();var t=n.$options[e],r=e+" hook";if(t)for(var a=0,i=t.length;a<i;a++)Vn(t[a],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),vn()}var rt=[],at=[],it={},ot=!1,st=!1,lt=0;var ct=0,ut=Date.now;if(V&&!K){var pt=window.performance;pt&&"function"==typeof pt.now&&ut()>document.createEvent("Event").timeStamp&&(ut=function(){return pt.now()})}function dt(){var n,e;for(ct=ut(),st=!0,rt.sort((function(n,e){return n.id-e.id})),lt=0;lt<rt.length;lt++)(n=rt[lt]).before&&n.before(),e=n.id,it[e]=null,n.run();var t=at.slice(),r=rt.slice();lt=rt.length=at.length=0,it={},ot=st=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&tt(r,"updated")}}(r),on&&J.devtools&&on.emit("flush")}var ft=0,ht=function(n,e,t,r,a){this.vm=n,a&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++ft,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ln,this.newDepIds=new ln,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!q.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=z)),this.value=this.lazy?void 0:this.get()};ht.prototype.get=function(){var n;hn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Hn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&oe(n),vn(),this.cleanupDeps()}return n},ht.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},ht.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},ht.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==it[e]){if(it[e]=!0,st){for(var t=rt.length-1;t>lt&&rt[t].id>n.id;)t--;rt.splice(t+1,0,n)}else rt.push(n);ot||(ot=!0,ae(dt))}}(this)},ht.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||c(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Vn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},ht.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},ht.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},ht.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var vt={enumerable:!0,configurable:!0,get:z,set:z};function mt(n,e,t){vt.get=function(){return this[e][t]},vt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,vt)}function gt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},a=n.$options._propKeys=[];n.$parent&&jn(!1);var i=function(i){a.push(i);var o=Jn(i,e,t,n);Cn(r,i,o),i in n||mt(n,"_props",i)};for(var o in e)i(o);jn(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?z:C(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;p(e=n._data="function"==typeof e?function(n,e){hn();try{return n.call(e,e)}catch(n){return Hn(n,e,"data()"),{}}finally{vn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var i=t[a];0,r&&_(r,i)||(o=void 0,36!==(o=(i+"").charCodeAt(0))&&95!==o&&mt(n,"_data",i))}var o;En(e,!0)}(n):En(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=an();for(var a in e){var i=e[a],o="function"==typeof i?i:i.get;0,r||(t[a]=new ht(n,o||z,z,bt)),a in n||yt(n,a,i)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var a=0;a<r.length;a++)wt(n,t,r[a]);else wt(n,t,r)}}(n,e.watch)}var bt={lazy:!0};function yt(n,e,t){var r=!an();"function"==typeof t?(vt.get=r?xt(e):_t(t),vt.set=z):(vt.get=t.get?r&&!1!==t.cache?xt(e):_t(t.get):z,vt.set=t.set||z),Object.defineProperty(n,e,vt)}function xt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),dn.target&&e.depend(),e.value}}function _t(n){return function(){return n.call(this,this)}}function wt(n,e,t,r){return p(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var kt=0;function St(n){var e=n.options;if(n.super){var t=St(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&I(n.extendOptions,r),(e=n.options=$n(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function jt(n){this._init(n)}function Tt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var i=n.name||t.options.name;var o=function(n){this._init(n)};return(o.prototype=Object.create(t.prototype)).constructor=o,o.cid=e++,o.options=$n(t.options,n),o.super=t,o.options.props&&function(n){var e=n.options.props;for(var t in e)mt(n.prototype,"_props",t)}(o),o.options.computed&&function(n){var e=n.options.computed;for(var t in e)yt(n.prototype,t,e[t])}(o),o.extend=t.extend,o.mixin=t.mixin,o.use=t.use,$.forEach((function(n){o[n]=t[n]})),i&&(o.options.components[i]=o),o.superOptions=t.options,o.extendOptions=n,o.sealedOptions=I({},o.options),a[r]=o,o}}function Et(n){return n&&(n.Ctor.options.name||n.tag)}function Ct(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!d(n)&&n.test(e)}function Ot(n,e){var t=n.cache,r=n.keys,a=n._vnode;for(var i in t){var o=t[i];if(o){var s=o.name;s&&!e(s)&&It(t,i,r,a)}}}function It(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,y(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=kt++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=$n(St(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&We(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=ve(e._renderChildren,r),n.$scopedSlots=a,n._c=function(e,t,r,a){return qe(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return qe(n,e,t,r,a,!0)};var i=t&&t.data;Cn(n,"$attrs",i&&i.attrs||a,null,!0),Cn(n,"$listeners",e._parentListeners||a,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=he(n.$options.inject,n);e&&(jn(!1),Object.keys(e).forEach((function(t){Cn(n,t,e[t])})),jn(!0))}(e),gt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(jt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=On,n.prototype.$delete=In,n.prototype.$watch=function(n,e,t){if(p(e))return wt(this,n,e,t);(t=t||{}).user=!0;var r=new ht(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'+r.expression+'"';hn(),Vn(e,this,[r.value],this,a),vn()}return function(){r.teardown()}}}(jt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var i,o=t._events[n];if(!o)return t;if(!e)return t._events[n]=null,t;for(var s=o.length;s--;)if((i=o[s])===e||i.fn===e){o.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?O(t):t;for(var r=O(arguments,1),a='event handler for "'+n+'"',i=0,o=t.length;i<o;i++)Vn(t[i],e,r,e,a)}return e}}(jt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,i=Ze(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||y(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(jt),function(n){Le(n.prototype),n.prototype.$nextTick=function(n){return ae(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,a=t._parentVnode;a&&(e.$scopedSlots=be(a.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=a;try{He=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Hn(t,e,"render"),n=e._vnode}finally{He=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof mn||(n=bn()),n.parent=a,n}}(jt);var At=[String,RegExp,Array],zt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:At,exclude:At,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,i=t.componentInstance,o=t.componentOptions;n[r]={name:Et(o),tag:a,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&It(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)It(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Ot(n,(function(n){return Ct(e,n)}))})),this.$watch("exclude",(function(e){Ot(n,(function(n){return!Ct(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ge(n),t=e&&e.componentOptions;if(t){var r=Et(t),a=this.include,i=this.exclude;if(a&&(!r||!Ct(a,r))||i&&r&&Ct(i,r))return e;var o=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;o[l]?(e.componentInstance=o[l].componentInstance,y(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return J}};Object.defineProperty(n,"config",e),n.util={warn:un,extend:I,mergeOptions:$n,defineReactive:Cn},n.set=On,n.delete=In,n.nextTick=ae,n.observable=function(n){return En(n),n},n.options=Object.create(null),$.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,I(n.options.components,zt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=O(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=$n(this.options,n),this}}(n),Tt(n),function(n){$.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&p(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(jt),Object.defineProperty(jt.prototype,"$isServer",{get:an}),Object.defineProperty(jt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(jt,"FunctionalRenderContext",{value:Me}),jt.version="2.6.14";var Rt=g("style,class"),Pt=g("input,textarea,option,select,progress"),Lt=g("contenteditable,draggable,spellcheck"),Mt=g("events,caret,typing,plaintext-only"),Bt=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),$t="http://www.w3.org/1999/xlink",Dt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},Jt=function(n){return Dt(n)?n.slice(6,n.length):""},Nt=function(n){return null==n||!1===n};function Ft(n){for(var e=n.data,t=n,r=n;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=qt(r.data,e));for(;o(t=t.parent);)t&&t.data&&(e=qt(e,t.data));return function(n,e){if(o(n)||o(e))return Ut(n,Ht(e));return""}(e.staticClass,e.class)}function qt(n,e){return{staticClass:Ut(n.staticClass,e.staticClass),class:o(n.class)?[n.class,e.class]:e.class}}function Ut(n,e){return n?e?n+" "+e:n:e||""}function Ht(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,a=n.length;r<a;r++)o(e=Ht(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):c(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Vt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Gt=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Qt=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Xt=function(n){return Gt(n)||Qt(n)};var Kt=Object.create(null);var Wt=g("text,number,password,search,email,tel,url");var Yt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Vt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Zt={create:function(n,e){nr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(nr(n,!0),nr(e))},destroy:function(n){nr(n,!0)}};function nr(n,e){var t=n.data.ref;if(o(t)){var r=n.context,a=n.componentInstance||n.elm,i=r.$refs;e?Array.isArray(i[t])?y(i[t],a):i[t]===a&&(i[t]=void 0):n.data.refInFor?Array.isArray(i[t])?i[t].indexOf(a)<0&&i[t].push(a):i[t]=[a]:i[t]=a}}var er=new mn("",{},[]),tr=["create","activate","update","remove","destroy"];function rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&o(n.data)===o(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=o(t=n.data)&&o(t=t.attrs)&&t.type,a=o(t=e.data)&&o(t=t.attrs)&&t.type;return r===a||Wt(r)&&Wt(a)}(n,e)||s(n.isAsyncPlaceholder)&&i(e.asyncFactory.error))}function ar(n,e,t){var r,a,i={};for(r=e;r<=t;++r)o(a=n[r].key)&&(i[a]=r);return i}var ir={create:or,update:or,destroy:function(n){or(n,er)}};function or(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,i=n===er,o=e===er,s=lr(n.data.directives,n.context),l=lr(e.data.directives,e.context),c=[],u=[];for(t in l)r=s[t],a=l[t],r?(a.oldValue=r.value,a.oldArg=r.arg,ur(a,"update",e,n),a.def&&a.def.componentUpdated&&u.push(a)):(ur(a,"bind",e,n),a.def&&a.def.inserted&&c.push(a));if(c.length){var p=function(){for(var t=0;t<c.length;t++)ur(c[t],"inserted",e,n)};i?ue(e,"insert",p):p()}u.length&&ue(e,"postpatch",(function(){for(var t=0;t<u.length;t++)ur(u[t],"componentUpdated",e,n)}));if(!i)for(t in s)l[t]||ur(s[t],"unbind",n,n,o)}(n,e)}var sr=Object.create(null);function lr(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=sr),a[cr(r)]=r,r.def=Dn(e.$options,"directives",r.name);return a}function cr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function ur(n,e,t,r,a){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,a)}catch(r){Hn(r,t.context,"directive "+n.name+" "+e+" hook")}}var pr=[Zt,ir];function dr(n,e){var t=e.componentOptions;if(!(o(t)&&!1===t.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(e.data.attrs))){var r,a,s=e.elm,l=n.data.attrs||{},c=e.data.attrs||{};for(r in o(c.__ob__)&&(c=e.data.attrs=I({},c)),c)a=c[r],l[r]!==a&&fr(s,r,a,e.data.pre);for(r in(K||Y)&&c.value!==l.value&&fr(s,"value",c.value),l)i(c[r])&&(Dt(r)?s.removeAttributeNS($t,Jt(r)):Lt(r)||s.removeAttribute(r))}}function fr(n,e,t,r){r||n.tagName.indexOf("-")>-1?hr(n,e,t):Bt(e)?Nt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Lt(e)?n.setAttribute(e,function(n,e){return Nt(e)||"false"===e?"false":"contenteditable"===n&&Mt(e)?e:"true"}(e,t)):Dt(e)?Nt(t)?n.removeAttributeNS($t,Jt(e)):n.setAttributeNS($t,e,t):hr(n,e,t)}function hr(n,e,t){if(Nt(t))n.removeAttribute(e);else{if(K&&!W&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var vr={create:dr,update:dr};function mr(n,e){var t=e.elm,r=e.data,a=n.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var s=Ft(e),l=t._transitionClasses;o(l)&&(s=Ut(s,Ht(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var gr,br={create:mr,update:mr};function yr(n,e,t){var r=gr;return function a(){var i=e.apply(null,arguments);null!==i&&wr(n,a,t,r)}}var xr=Kn&&!(nn&&Number(nn[1])<=53);function _r(n,e,t,r){if(xr){var a=ct,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}gr.addEventListener(n,e,tn?{capture:t,passive:r}:t)}function wr(n,e,t,r){(r||gr).removeEventListener(n,e._wrapper||e,t)}function kr(n,e){if(!i(n.data.on)||!i(e.data.on)){var t=e.data.on||{},r=n.data.on||{};gr=e.elm,function(n){if(o(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}o(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),ce(t,r,_r,wr,yr,e.context),gr=void 0}}var Sr,jr={create:kr,update:kr};function Tr(n,e){if(!i(n.data.domProps)||!i(e.data.domProps)){var t,r,a=e.elm,s=n.data.domProps||{},l=e.data.domProps||{};for(t in o(l.__ob__)&&(l=e.data.domProps=I({},l)),s)t in l||(a[t]="");for(t in l){if(r=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===s[t])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===t&&"PROGRESS"!==a.tagName){a._value=r;var c=i(r)?"":String(r);Er(a,c)&&(a.value=c)}else if("innerHTML"===t&&Qt(a.tagName)&&i(a.innerHTML)){(Sr=Sr||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var u=Sr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;u.firstChild;)a.appendChild(u.firstChild)}else if(r!==s[t])try{a[t]=r}catch(n){}}}}function Er(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(o(r)){if(r.number)return m(t)!==m(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Cr={create:Tr,update:Tr},Or=w((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Ir(n){var e=Ar(n.style);return n.staticStyle?I(n.staticStyle,e):e}function Ar(n){return Array.isArray(n)?A(n):"string"==typeof n?Or(n):n}var zr,Rr=/^--/,Pr=/\s*!important$/,Lr=function(n,e,t){if(Rr.test(e))n.style.setProperty(e,t);else if(Pr.test(t))n.style.setProperty(E(e),t.replace(Pr,""),"important");else{var r=Br(e);if(Array.isArray(t))for(var a=0,i=t.length;a<i;a++)n.style[r]=t[a];else n.style[r]=t}},Mr=["Webkit","Moz","ms"],Br=w((function(n){if(zr=zr||document.createElement("div").style,"filter"!==(n=S(n))&&n in zr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Mr.length;t++){var r=Mr[t]+e;if(r in zr)return r}}));function $r(n,e){var t=e.data,r=n.data;if(!(i(t.staticStyle)&&i(t.style)&&i(r.staticStyle)&&i(r.style))){var a,s,l=e.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},p=c||u,d=Ar(e.data.style)||{};e.data.normalizedStyle=o(d.__ob__)?I({},d):d;var f=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Ir(a.data))&&I(r,t);(t=Ir(n.data))&&I(r,t);for(var i=n;i=i.parent;)i.data&&(t=Ir(i.data))&&I(r,t);return r}(e,!0);for(s in p)i(f[s])&&Lr(l,s,"");for(s in f)(a=f[s])!==p[s]&&Lr(l,s,null==a?"":a)}}var Dr={create:$r,update:$r},Jr=/\s+/;function Nr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Jr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Fr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Jr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function qr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&I(e,Ur(n.name||"v")),I(e,n),e}return"string"==typeof n?Ur(n):void 0}}var Ur=w((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Hr=V&&!W,Vr="transition",Gr="transitionend",Qr="animation",Xr="animationend";Hr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Vr="WebkitTransition",Gr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Qr="WebkitAnimation",Xr="webkitAnimationEnd"));var Kr=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Wr(n){Kr((function(){Kr(n)}))}function Yr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),Nr(n,e))}function Zr(n,e){n._transitionClasses&&y(n._transitionClasses,e),Fr(n,e)}function na(n,e,t){var r=ta(n,e),a=r.type,i=r.timeout,o=r.propCount;if(!a)return t();var s="transition"===a?Gr:Xr,l=0,c=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++l>=o&&c()};setTimeout((function(){l<o&&c()}),i+1),n.addEventListener(s,u)}var ea=/\b(transform|all)(,|$)/;function ta(n,e){var t,r=window.getComputedStyle(n),a=(r[Vr+"Delay"]||"").split(", "),i=(r[Vr+"Duration"]||"").split(", "),o=ra(a,i),s=(r[Qr+"Delay"]||"").split(", "),l=(r[Qr+"Duration"]||"").split(", "),c=ra(s,l),u=0,p=0;return"transition"===e?o>0&&(t="transition",u=o,p=i.length):"animation"===e?c>0&&(t="animation",u=c,p=l.length):p=(t=(u=Math.max(o,c))>0?o>c?"transition":"animation":null)?"transition"===t?i.length:l.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&ea.test(r[Vr+"Property"])}}function ra(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return aa(e)+aa(n[t])})))}function aa(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function ia(n,e){var t=n.elm;o(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=qr(n.data.transition);if(!i(r)&&!o(t._enterCb)&&1===t.nodeType){for(var a=r.css,s=r.type,l=r.enterClass,u=r.enterToClass,p=r.enterActiveClass,d=r.appearClass,f=r.appearToClass,h=r.appearActiveClass,v=r.beforeEnter,g=r.enter,b=r.afterEnter,y=r.enterCancelled,x=r.beforeAppear,_=r.appear,w=r.afterAppear,k=r.appearCancelled,S=r.duration,j=Ye,T=Ye.$vnode;T&&T.parent;)j=T.context,T=T.parent;var E=!j._isMounted||!n.isRootInsert;if(!E||_||""===_){var C=E&&d?d:l,O=E&&h?h:p,I=E&&f?f:u,A=E&&x||v,z=E&&"function"==typeof _?_:g,R=E&&w||b,P=E&&k||y,L=m(c(S)?S.enter:S);0;var M=!1!==a&&!W,$=la(z),D=t._enterCb=B((function(){M&&(Zr(t,I),Zr(t,O)),D.cancelled?(M&&Zr(t,C),P&&P(t)):R&&R(t),t._enterCb=null}));n.data.show||ue(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),z&&z(t,D)})),A&&A(t),M&&(Yr(t,C),Yr(t,O),Wr((function(){Zr(t,C),D.cancelled||(Yr(t,I),$||(sa(L)?setTimeout(D,L):na(t,s,D)))}))),n.data.show&&(e&&e(),z&&z(t,D)),M||$||D()}}}function oa(n,e){var t=n.elm;o(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=qr(n.data.transition);if(i(r)||1!==t.nodeType)return e();if(!o(t._leaveCb)){var a=r.css,s=r.type,l=r.leaveClass,u=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,f=r.leave,h=r.afterLeave,v=r.leaveCancelled,g=r.delayLeave,b=r.duration,y=!1!==a&&!W,x=la(f),_=m(c(b)?b.leave:b);0;var w=t._leaveCb=B((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(Zr(t,u),Zr(t,p)),w.cancelled?(y&&Zr(t,l),v&&v(t)):(e(),h&&h(t)),t._leaveCb=null}));g?g(k):k()}function k(){w.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(Yr(t,l),Yr(t,p),Wr((function(){Zr(t,l),w.cancelled||(Yr(t,u),x||(sa(_)?setTimeout(w,_):na(t,s,w)))}))),f&&f(t,w),y||x||w())}}function sa(n){return"number"==typeof n&&!isNaN(n)}function la(n){if(i(n))return!1;var e=n.fns;return o(e)?la(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function ca(n,e){!0!==e.data.show&&ia(e)}var ua=function(n){var e,t,r={},a=n.modules,c=n.nodeOps;for(e=0;e<tr.length;++e)for(r[tr[e]]=[],t=0;t<a.length;++t)o(a[t][tr[e]])&&r[tr[e]].push(a[t][tr[e]]);function u(n){var e=c.parentNode(n);o(e)&&c.removeChild(e,n)}function p(n,e,t,a,i,l,u){if(o(n.elm)&&o(l)&&(n=l[u]=xn(n)),n.isRootInsert=!i,!function(n,e,t,a){var i=n.data;if(o(i)){var l=o(n.componentInstance)&&i.keepAlive;if(o(i=i.hook)&&o(i=i.init)&&i(n,!1),o(n.componentInstance))return d(n,e),f(t,n.elm,a),s(l)&&function(n,e,t,a){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](er,s);e.push(s);break}f(t,n.elm,a)}(n,e,t,a),!0}}(n,e,t,a)){var p=n.data,v=n.children,g=n.tag;o(g)?(n.elm=n.ns?c.createElementNS(n.ns,g):c.createElement(g,n),b(n),h(n,v,e),o(p)&&m(n,e),f(t,n.elm,a)):s(n.isComment)?(n.elm=c.createComment(n.text),f(t,n.elm,a)):(n.elm=c.createTextNode(n.text),f(t,n.elm,a))}}function d(n,e){o(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,v(n)?(m(n,e),b(n)):(nr(n),e.push(n))}function f(n,e,t){o(n)&&(o(t)?c.parentNode(t)===n&&c.insertBefore(n,e,t):c.appendChild(n,e))}function h(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)p(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&c.appendChild(n.elm,c.createTextNode(String(n.text)))}function v(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return o(n.tag)}function m(n,t){for(var a=0;a<r.create.length;++a)r.create[a](er,n);o(e=n.data.hook)&&(o(e.create)&&e.create(er,n),o(e.insert)&&t.push(n))}function b(n){var e;if(o(e=n.fnScopeId))c.setStyleScope(n.elm,e);else for(var t=n;t;)o(e=t.context)&&o(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e),t=t.parent;o(e=Ye)&&e!==n.context&&e!==n.fnContext&&o(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e)}function y(n,e,t,r,a,i){for(;r<=a;++r)p(t[r],i,n,e,!1,t,r)}function x(n){var e,t,a=n.data;if(o(a))for(o(e=a.hook)&&o(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(o(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function _(n,e,t){for(;e<=t;++e){var r=n[e];o(r)&&(o(r.tag)?(w(r),x(r)):u(r.elm))}}function w(n,e){if(o(e)||o(n.data)){var t,a=r.remove.length+1;for(o(e)?e.listeners+=a:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,a),o(t=n.componentInstance)&&o(t=t._vnode)&&o(t.data)&&w(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);o(t=n.data.hook)&&o(t=t.remove)?t(n,e):e()}else u(n.elm)}function k(n,e,t,r){for(var a=t;a<r;a++){var i=e[a];if(o(i)&&rr(n,i))return a}}function S(n,e,t,a,l,u){if(n!==e){o(e.elm)&&o(a)&&(e=a[l]=xn(e));var d=e.elm=n.elm;if(s(n.isAsyncPlaceholder))o(e.asyncFactory.resolved)?E(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var f,h=e.data;o(h)&&o(f=h.hook)&&o(f=f.prepatch)&&f(n,e);var m=n.children,g=e.children;if(o(h)&&v(e)){for(f=0;f<r.update.length;++f)r.update[f](n,e);o(f=h.hook)&&o(f=f.update)&&f(n,e)}i(e.text)?o(m)&&o(g)?m!==g&&function(n,e,t,r,a){var s,l,u,d=0,f=0,h=e.length-1,v=e[0],m=e[h],g=t.length-1,b=t[0],x=t[g],w=!a;for(0;d<=h&&f<=g;)i(v)?v=e[++d]:i(m)?m=e[--h]:rr(v,b)?(S(v,b,r,t,f),v=e[++d],b=t[++f]):rr(m,x)?(S(m,x,r,t,g),m=e[--h],x=t[--g]):rr(v,x)?(S(v,x,r,t,g),w&&c.insertBefore(n,v.elm,c.nextSibling(m.elm)),v=e[++d],x=t[--g]):rr(m,b)?(S(m,b,r,t,f),w&&c.insertBefore(n,m.elm,v.elm),m=e[--h],b=t[++f]):(i(s)&&(s=ar(e,d,h)),i(l=o(b.key)?s[b.key]:k(b,e,d,h))?p(b,r,n,v.elm,!1,t,f):rr(u=e[l],b)?(S(u,b,r,t,f),e[l]=void 0,w&&c.insertBefore(n,u.elm,v.elm)):p(b,r,n,v.elm,!1,t,f),b=t[++f]);d>h?y(n,i(t[g+1])?null:t[g+1].elm,t,f,g,r):f>g&&_(e,d,h)}(d,m,g,t,u):o(g)?(o(n.text)&&c.setTextContent(d,""),y(d,null,g,0,g.length-1,t)):o(m)?_(m,0,m.length-1):o(n.text)&&c.setTextContent(d,""):n.text!==e.text&&c.setTextContent(d,e.text),o(h)&&o(f=h.hook)&&o(f=f.postpatch)&&f(n,e)}}}function j(n,e,t){if(s(t)&&o(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=g("attrs,class,staticClass,staticStyle,key");function E(n,e,t,r){var a,i=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,s(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(l)&&(o(a=l.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return d(e,t),!0;if(o(i)){if(o(c))if(n.hasChildNodes())if(o(a=l)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,f=0;f<c.length;f++){if(!p||!E(p,c[f],t,r)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else h(e,c,t);if(o(l)){var v=!1;for(var g in l)if(!T(g)){v=!0,m(e,t);break}!v&&l.class&&oe(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,a){if(!i(e)){var l,u=!1,d=[];if(i(n))u=!0,p(e,d);else{var f=o(n.nodeType);if(!f&&rr(n,e))S(n,e,d,null,null,a);else{if(f){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&E(n,e,d))return j(e,d,!0),n;l=n,n=new mn(c.tagName(l).toLowerCase(),{},[],void 0,l)}var h=n.elm,m=c.parentNode(h);if(p(e,d,h._leaveCb?null:m,c.nextSibling(h)),o(e.parent))for(var g=e.parent,b=v(e);g;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](g);if(g.elm=e.elm,b){for(var w=0;w<r.create.length;++w)r.create[w](er,g);var k=g.data.hook.insert;if(k.merged)for(var T=1;T<k.fns.length;T++)k.fns[T]()}else nr(g);g=g.parent}o(m)?_([n],0,0):o(n.tag)&&x(n)}}return j(e,d,u),e.elm}o(n)&&x(n)}}({nodeOps:Yt,modules:[vr,br,jr,Cr,Dr,V?{create:ca,activate:ca,remove:function(n,e){!0!==n.data.show?oa(n,e):e()}}:{}].concat(pr)});W&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&ba(n,"input")}));var pa={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?ue(t,"postpatch",(function(){pa.componentUpdated(n,e,t)})):da(n,e,t.context),n._vOptions=[].map.call(n.options,va)):("textarea"===t.tag||Wt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",ma),n.addEventListener("compositionend",ga),n.addEventListener("change",ga),W&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){da(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,va);if(a.some((function(n,e){return!L(n,r[e])})))(n.multiple?e.value.some((function(n){return ha(n,a)})):e.value!==e.oldValue&&ha(e.value,a))&&ba(n,"change")}}};function da(n,e,t){fa(n,e,t),(K||Y)&&setTimeout((function(){fa(n,e,t)}),0)}function fa(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var i,o,s=0,l=n.options.length;s<l;s++)if(o=n.options[s],a)i=M(r,va(o))>-1,o.selected!==i&&(o.selected=i);else if(L(va(o),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));a||(n.selectedIndex=-1)}}function ha(n,e){return e.every((function(e){return!L(e,n)}))}function va(n){return"_value"in n?n._value:n.value}function ma(n){n.target.composing=!0}function ga(n){n.target.composing&&(n.target.composing=!1,ba(n.target,"input"))}function ba(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function ya(n){return!n.componentInstance||n.data&&n.data.transition?n:ya(n.componentInstance._vnode)}var xa={model:pa,show:{bind:function(n,e,t){var r=e.value,a=(t=ya(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,ia(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=ya(t)).data&&t.data.transition?(t.data.show=!0,r?ia(t,(function(){n.style.display=n.__vOriginalDisplay})):oa(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},_a={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function wa(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?wa(Ge(e.children)):n}function ka(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var i in a)e[S(i)]=a[i];return e}function Sa(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var ja=function(n){return n.tag||ge(n)},Ta=function(n){return"show"===n.name},Ea={name:"transition",props:_a,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(ja)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var i=wa(a);if(!i)return a;if(this._leaving)return Sa(n,a);var o="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?o+"comment":o+i.tag:l(i.key)?0===String(i.key).indexOf(o)?i.key:o+i.key:i.key;var s=(i.data||(i.data={})).transition=ka(this),c=this._vnode,u=wa(c);if(i.data.directives&&i.data.directives.some(Ta)&&(i.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,u)&&!ge(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=I({},s);if("out-in"===r)return this._leaving=!0,ue(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Sa(n,a);if("in-out"===r){if(ge(i))return c;var d,f=function(){d()};ue(s,"afterEnter",f),ue(s,"enterCancelled",f),ue(p,"delayLeave",(function(n){d=n}))}}return a}}},Ca=I({tag:String,moveClass:String},_a);function Oa(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ia(n){n.data.newPos=n.elm.getBoundingClientRect()}function Aa(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+a+"px)",i.transitionDuration="0s"}}delete Ca.mode;var za={Transition:Ea,TransitionGroup:{props:Ca,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],i=this.children=[],o=ka(this),s=0;s<a.length;s++){var l=a[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))i.push(l),t[l.key]=l,(l.data||(l.data={})).transition=o;else;}if(r){for(var c=[],u=[],p=0;p<r.length;p++){var d=r[p];d.data.transition=o,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?c.push(d):u.push(d)}this.kept=n(e,null,c),this.removed=u}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Oa),n.forEach(Ia),n.forEach(Aa),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Yr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Gr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Gr,n),t._moveCb=null,Zr(t,e))})}})))},methods:{hasMove:function(n,e){if(!Hr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Fr(t,n)})),Nr(t,e),t.style.display="none",this.$el.appendChild(t);var r=ta(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};jt.config.mustUseProp=function(n,e,t){return"value"===t&&Pt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},jt.config.isReservedTag=Xt,jt.config.isReservedAttr=Rt,jt.config.getTagNamespace=function(n){return Qt(n)?"svg":"math"===n?"math":void 0},jt.config.isUnknownElement=function(n){if(!V)return!0;if(Xt(n))return!1;if(n=n.toLowerCase(),null!=Kt[n])return Kt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Kt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Kt[n]=/HTMLUnknownElement/.test(e.toString())},I(jt.options.directives,xa),I(jt.options.components,za),jt.prototype.__patch__=V?ua:z,jt.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=bn),tt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new ht(n,r,z,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&V?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},V&&setTimeout((function(){J.devtools&&on&&on.emit("init",jt)}),0);var Ra=jt;
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */function Pa(n,e){for(var t in e)n[t]=e[t];return n}var La=/[!'()*]/g,Ma=function(n){return"%"+n.charCodeAt(0).toString(16)},Ba=/%2C/g,$a=function(n){return encodeURIComponent(n).replace(La,Ma).replace(Ba,",")};function Da(n){try{return decodeURIComponent(n)}catch(n){0}return n}var Ja=function(n){return null==n||"object"==typeof n?n:String(n)};function Na(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=Da(t.shift()),a=t.length>0?Da(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function Fa(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return $a(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push($a(e)):r.push($a(e)+"="+$a(n)))})),r.join("&")}return $a(e)+"="+$a(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var qa=/\/?$/;function Ua(n,e,t,r){var a=r&&r.options.stringifyQuery,i=e.query||{};try{i=Ha(i)}catch(n){}var o={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:Qa(e,a),matched:n?Ga(n):[]};return t&&(o.redirectedFrom=Qa(t,a)),Object.freeze(o)}function Ha(n){if(Array.isArray(n))return n.map(Ha);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=Ha(n[t]);return e}return n}var Va=Ua(null,{path:"/"});function Ga(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Qa(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||Fa)(r)+a}function Xa(n,e,t){return e===Va?n===e:!!e&&(n.path&&e.path?n.path.replace(qa,"")===e.path.replace(qa,"")&&(t||n.hash===e.hash&&Ka(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Ka(n.query,e.query)&&Ka(n.params,e.params))))}function Ka(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var i=n[t];if(r[a]!==t)return!1;var o=e[t];return null==i||null==o?i===o:"object"==typeof i&&"object"==typeof o?Ka(i,o):String(i)===String(o)}))}function Wa(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],i=t.enteredCbs[r];if(a&&i){delete t.enteredCbs[r];for(var o=0;o<i.length;o++)a._isBeingDestroyed||i[o](a)}}}}var Ya={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,i=e.data;i.routerView=!0;for(var o=a.$createElement,s=t.name,l=a.$route,c=a._routerViewCache||(a._routerViewCache={}),u=0,p=!1;a&&a._routerRoot!==a;){var d=a.$vnode?a.$vnode.data:{};d.routerView&&u++,d.keepAlive&&a._directInactive&&a._inactive&&(p=!0),a=a.$parent}if(i.routerViewDepth=u,p){var f=c[s],h=f&&f.component;return h?(f.configProps&&Za(h,i,f.route,f.configProps),o(h,i,r)):o()}var v=l.matched[u],m=v&&v.components[s];if(!v||!m)return c[s]=null,o();c[s]={component:m},i.registerRouteInstance=function(n,e){var t=v.instances[s];(e&&t!==n||!e&&t===n)&&(v.instances[s]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){v.instances[s]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==v.instances[s]&&(v.instances[s]=n.componentInstance),Wa(l)};var g=v.props&&v.props[s];return g&&(Pa(c[s],{route:l,configProps:g}),Za(m,i,l,g)),o(m,i,r)}};function Za(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=Pa({},a);var i=e.attrs=e.attrs||{};for(var o in a)n.props&&o in n.props||(i[o]=a[o],delete a[o])}}function ni(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function ei(n){return n.replace(/\/+/g,"/")}var ti=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},ri=gi,ai=ci,ii=function(n,e){return pi(ci(n,e),e)},oi=pi,si=mi,li=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ci(n,e){for(var t,r=[],a=0,i=0,o="",s=e&&e.delimiter||"/";null!=(t=li.exec(n));){var l=t[0],c=t[1],u=t.index;if(o+=n.slice(i,u),i=u+l.length,c)o+=c[1];else{var p=n[i],d=t[2],f=t[3],h=t[4],v=t[5],m=t[6],g=t[7];o&&(r.push(o),o="");var b=null!=d&&null!=p&&p!==d,y="+"===m||"*"===m,x="?"===m||"*"===m,_=t[2]||s,w=h||v;r.push({name:f||a++,prefix:d||"",delimiter:_,optional:x,repeat:y,partial:b,asterisk:!!g,pattern:w?fi(w):g?".*":"[^"+di(_)+"]+?"})}}return i<n.length&&(o+=n.substr(i)),o&&r.push(o),r}function ui(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function pi(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",vi(e)));return function(e,r){for(var a="",i=e||{},o=(r||{}).pretty?ui:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,u=i[l.name];if(null==u){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(ti(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(c=o(u[p]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):o(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function di(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function fi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function hi(n,e){return n.keys=e,n}function vi(n){return n&&n.sensitive?"":"i"}function mi(n,e,t){ti(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,i="",o=0;o<n.length;o++){var s=n[o];if("string"==typeof s)i+=di(s);else{var l=di(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),i+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=di(t.delimiter||"/"),p=i.slice(-u.length)===u;return r||(i=(p?i.slice(0,-u.length):i)+"(?:"+u+"(?=$))?"),i+=a?"$":r&&p?"":"(?="+u+"|$)",hi(new RegExp("^"+i,vi(t)),e)}function gi(n,e,t){return ti(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return hi(n,e)}(n,e):ti(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push(gi(n[a],e,t).source);return hi(new RegExp("(?:"+r.join("|")+")",vi(t)),e)}(n,e,t):function(n,e,t){return mi(ci(n,t),e,t)}(n,e,t)}ri.parse=ai,ri.compile=ii,ri.tokensToFunction=oi,ri.tokensToRegExp=si;var bi=Object.create(null);function yi(n,e,t){e=e||{};try{var r=bi[n]||(bi[n]=ri.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function xi(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var i=(a=Pa({},n)).params;return i&&"object"==typeof i&&(a.params=Pa({},i)),a}if(!a.path&&a.params&&e){(a=Pa({},a))._normalized=!0;var o=Pa(Pa({},e.params),a.params);if(e.name)a.name=e.name,a.params=o;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;a.path=yi(s,o,e.path)}else 0;return a}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),c=e&&e.path||"/",u=l.path?ni(l.path,c,t||a.append):c,p=function(n,e,t){void 0===e&&(e={});var r,a=t||Na;try{r=a(n||"")}catch(n){r={}}for(var i in e){var o=e[i];r[i]=Array.isArray(o)?o.map(Ja):Ja(o)}return r}(l.query,a.query,r&&r.options.parseQuery),d=a.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var _i,wi=function(){},ki={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),i=a.location,o=a.route,s=a.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,d=null==u?"router-link-exact-active":u,f=null==this.activeClass?p:this.activeClass,h=null==this.exactActiveClass?d:this.exactActiveClass,v=o.redirectedFrom?Ua(null,xi(o.redirectedFrom),null,t):o;l[h]=Xa(r,v,this.exactPath),l[f]=this.exact||this.exactPath?l[h]:function(n,e){return 0===n.path.replace(qa,"/").indexOf(e.path.replace(qa,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,v);var m=l[h]?this.ariaCurrentValue:null,g=function(n){Si(n)&&(e.replace?t.replace(i,wi):t.push(i,wi))},b={click:Si};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=g})):b[this.event]=g;var y={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:o,navigate:g,isActive:l[f],isExactActive:l[h]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":m};else{var _=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(_){_.isStatic=!1;var w=_.data=Pa({},_.data);for(var k in w.on=w.on||{},w.on){var S=w.on[k];k in b&&(w.on[k]=Array.isArray(S)?S:[S])}for(var j in b)j in w.on?w.on[j].push(b[j]):w.on[j]=g;var T=_.data.attrs=Pa({},_.data.attrs);T.href=s,T["aria-current"]=m}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Si(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var ji="undefined"!=typeof window;function Ti(n,e,t,r,a){var i=e||[],o=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,i,o){var s=a.path,l=a.name;0;var c=a.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ei(e.path+"/"+n)}(s,i,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var p={path:u,regex:Ei(u,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:o,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var i=o?ei(o+"/"+a.path):void 0;n(e,t,r,a,p,i)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==a.alias)for(var d=Array.isArray(a.alias)?a.alias:[a.alias],f=0;f<d.length;++f){0;var h={path:d[f],children:a.children};n(e,t,r,h,i,p.path||"/")}l&&(r[l]||(r[l]=p))}(i,o,s,n,a)}));for(var l=0,c=i.length;l<c;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),c--,l--);return{pathList:i,pathMap:o,nameMap:s}}function Ei(n,e){return ri(n,[],e)}function Ci(n,e){var t=Ti(n),r=t.pathList,a=t.pathMap,i=t.nameMap;function o(n,t,o){var s=xi(n,t,!1,e),c=s.name;if(c){var u=i[c];if(!u)return l(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=yi(u.path,s.params),l(u,s,o)}if(s.path){s.params={};for(var f=0;f<r.length;f++){var h=r[f],v=a[h];if(Oi(v.regex,s.path,s.params))return l(v,s,o)}}return l(null,s)}function s(n,t){var r=n.redirect,a="function"==typeof r?r(Ua(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return l(null,t);var s=a,c=s.name,u=s.path,p=t.query,d=t.hash,f=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,f=s.hasOwnProperty("params")?s.params:f,c){i[c];return o({_normalized:!0,name:c,query:p,hash:d,params:f},void 0,t)}if(u){var h=function(n,e){return ni(n,e.parent?e.parent.path:"/",!0)}(u,n);return o({_normalized:!0,path:yi(h,f),query:p,hash:d},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=o({_normalized:!0,path:yi(t,e.params)});if(r){var a=r.matched,i=a[a.length-1];return e.params=r.params,l(i,e)}return l(null,e)}(0,t,n.matchAs):Ua(n,t,r,e)}return{match:o,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;Ti([e||n],r,a,i,t),t&&t.alias.length&&Ti(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,i,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Ti(n,r,a,i)}}}function Oi(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,i=r.length;a<i;++a){var o=n.keys[a-1];o&&(t[o.name||"pathMatch"]="string"==typeof r[a]?Da(r[a]):r[a])}return!0}var Ii=ji&&window.performance&&window.performance.now?window.performance:Date;function Ai(){return Ii.now().toFixed(3)}var zi=Ai();function Ri(){return zi}function Pi(n){return zi=n}var Li=Object.create(null);function Mi(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=Pa({},window.history.state);return t.key=Ri(),window.history.replaceState(t,"",e),window.addEventListener("popstate",Di),function(){window.removeEventListener("popstate",Di)}}function Bi(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var i=function(){var n=Ri();if(n)return Li[n]}(),o=a.call(n,e,t,r?i:null);o&&("function"==typeof o.then?o.then((function(n){Ui(n,i)})).catch((function(n){0})):Ui(o,i))}))}}function $i(){var n=Ri();n&&(Li[n]={x:window.pageXOffset,y:window.pageYOffset})}function Di(n){$i(),n.state&&n.state.key&&Pi(n.state.key)}function Ji(n){return Fi(n.x)||Fi(n.y)}function Ni(n){return{x:Fi(n.x)?n.x:window.pageXOffset,y:Fi(n.y)?n.y:window.pageYOffset}}function Fi(n){return"number"==typeof n}var qi=/^#\d/;function Ui(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=qi.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,i={x:Fi((t=i).x)?t.x:0,y:Fi(t.y)?t.y:0})}else Ji(n)&&(e=Ni(n))}else r&&Ji(n)&&(e=Ni(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Hi,Vi=ji&&((-1===(Hi=window.navigator.userAgent).indexOf("Android 2.")&&-1===Hi.indexOf("Android 4.0")||-1===Hi.indexOf("Mobile Safari")||-1!==Hi.indexOf("Chrome")||-1!==Hi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Gi(n,e){$i();var t=window.history;try{if(e){var r=Pa({},t.state);r.key=Ri(),t.replaceState(r,"",n)}else t.pushState({key:Pi(Ai())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Qi(n){Gi(n,!0)}function Xi(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}var Ki={redirected:2,aborted:4,cancelled:8,duplicated:16};function Wi(n,e){return Zi(n,e,Ki.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return no.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Yi(n,e){return Zi(n,e,Ki.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function Zi(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var no=["params","query","hash"];function eo(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function to(n,e){return eo(n)&&n._isRouter&&(null==e||n.type===e)}function ro(n){return function(e,t,r){var a=!1,i=0,o=null;ao(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){a=!0,i++;var l,c=so((function(e){var a;((a=e).__esModule||oo&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:_i.extend(e),t.components[s]=e,--i<=0&&r()})),u=so((function(n){var e="Failed to resolve async component "+s+": "+n;o||(o=eo(n)?n:new Error(e),r(o))}));try{l=n(c,u)}catch(n){u(n)}if(l)if("function"==typeof l.then)l.then(c,u);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,u)}}})),a||r()}}function ao(n,e){return io(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function io(n){return Array.prototype.concat.apply([],n)}var oo="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function so(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var lo=function(n,e){this.router=n,this.base=function(n){if(!n)if(ji){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Va,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function co(n,e,t,r){var a=ao(n,(function(n,r,a,i){var o=function(n,e){"function"!=typeof n&&(n=_i.extend(n));return n.options[e]}(n,e);if(o)return Array.isArray(o)?o.map((function(n){return t(n,r,a,i)})):t(o,r,a,i)}));return io(r?a.reverse():a)}function uo(n,e){if(e)return function(){return n.apply(e,arguments)}}lo.prototype.listen=function(n){this.cb=n},lo.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},lo.prototype.onError=function(n){this.errorCbs.push(n)},lo.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,i)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(to(n,Ki.redirected)&&i===Va||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},lo.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var i,o,s=function(n){!to(n)&&eo(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=a.matched.length-1;if(Xa(n,a)&&l===c&&n.matched[l]===a.matched[c])return this.ensureURL(),n.hash&&Bi(this.router,a,n,!1),s(((o=Zi(i=a,n,Ki.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",o));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,f=u.activated,h=[].concat(function(n){return co(n,"beforeRouteLeave",uo,!0)}(d),this.router.beforeHooks,function(n){return co(n,"beforeRouteUpdate",uo)}(p),f.map((function(n){return n.beforeEnter})),ro(f)),v=function(e,t){if(r.pending!==n)return s(Yi(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return Zi(n,e,Ki.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):eo(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(Wi(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Xi(h,v,(function(){Xi(function(n){return co(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,i){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(f).concat(r.router.resolveHooks),v,(function(){if(r.pending!==n)return s(Yi(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Wa(n)}))}))}))},lo.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},lo.prototype.setupListeners=function(){},lo.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Va,this.pending=null};var po=function(n){function e(e,t){n.call(this,e,t),this._startLocation=fo(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Vi&&t;r&&this.listeners.push(Mi());var a=function(){var t=n.current,a=fo(n.base);n.current===Va&&a===n._startLocation||n.transitionTo(a,(function(n){r&&Bi(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Gi(ei(r.base+n.fullPath)),Bi(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Qi(ei(r.base+n.fullPath)),Bi(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(fo(this.base)!==this.current.fullPath){var e=ei(this.base+this.current.fullPath);n?Gi(e):Qi(e)}},e.prototype.getCurrentLocation=function(){return fo(this.base)},e}(lo);function fo(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ei(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var ho=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=fo(n);if(!/^\/#/.test(e))return window.location.replace(ei(n+"/#"+e)),!0}(this.base)||vo()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Vi&&e;t&&this.listeners.push(Mi());var r=function(){var e=n.current;vo()&&n.transitionTo(mo(),(function(r){t&&Bi(n.router,r,e,!0),Vi||yo(r.fullPath)}))},a=Vi?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){bo(n.fullPath),Bi(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){yo(n.fullPath),Bi(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;mo()!==e&&(n?bo(e):yo(e))},e.prototype.getCurrentLocation=function(){return mo()},e}(lo);function vo(){var n=mo();return"/"===n.charAt(0)||(yo("/"+n),!1)}function mo(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function go(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function bo(n){Vi?Gi(go(n)):window.location.hash=n}function yo(n){Vi?Qi(go(n)):window.location.replace(go(n))}var xo=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){to(n,Ki.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(lo),_o=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ci(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Vi&&!1!==n.fallback,this.fallback&&(e="hash"),ji||(e="abstract"),this.mode=e,e){case"history":this.history=new po(this,n.base);break;case"hash":this.history=new ho(this,n.base,this.fallback);break;case"abstract":this.history=new xo(this,n.base);break;default:0}},wo={currentRoute:{configurable:!0}};function ko(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}_o.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},wo.currentRoute.get=function(){return this.history&&this.history.current},_o.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof po||t instanceof ho){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;Vi&&a&&"fullPath"in n&&Bi(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},_o.prototype.beforeEach=function(n){return ko(this.beforeHooks,n)},_o.prototype.beforeResolve=function(n){return ko(this.resolveHooks,n)},_o.prototype.afterEach=function(n){return ko(this.afterHooks,n)},_o.prototype.onReady=function(n,e){this.history.onReady(n,e)},_o.prototype.onError=function(n){this.history.onError(n)},_o.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},_o.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},_o.prototype.go=function(n){this.history.go(n)},_o.prototype.back=function(){this.go(-1)},_o.prototype.forward=function(){this.go(1)},_o.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},_o.prototype.resolve=function(n,e,t){var r=xi(n,e=e||this.history.current,t,this),a=this.match(r,e),i=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ei(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:a}},_o.prototype.getRoutes=function(){return this.matcher.getRoutes()},_o.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Va&&this.history.transitionTo(this.history.getCurrentLocation())},_o.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Va&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(_o.prototype,wo),_o.install=function n(e){if(!n.installed||_i!==e){n.installed=!0,_i=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",Ya),e.component("RouterLink",ki);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},_o.version="3.5.3",_o.isNavigationFailure=to,_o.NavigationFailureType=Ki,_o.START_LOCATION=Va,ji&&window.Vue&&window.Vue.use(_o);var So=_o;t(225),t(174),t(251),t(99),t(253),t(37),t(38),t(254);function jo(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}t(74),t(89),t(120);function To(n){return(To="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var Eo=t(68),Co=(t(184),t(18),t(44),t(227),t(228),t(40),t(25),{NotFound:function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,474))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,473))}}),Oo={"v-beef57a6":function(){return t.e(6).then(t.bind(null,475))},"v-aa01d20a":function(){return t.e(7).then(t.bind(null,476))},"v-404c9778":function(){return t.e(8).then(t.bind(null,477))},"v-3fccfa19":function(){return t.e(9).then(t.bind(null,478))},"v-33a08dcd":function(){return t.e(10).then(t.bind(null,479))},"v-f84a6a2e":function(){return t.e(11).then(t.bind(null,480))},"v-c2ffda6e":function(){return t.e(12).then(t.bind(null,481))},"v-2b9d952b":function(){return t.e(13).then(t.bind(null,482))},"v-b721a6a6":function(){return t.e(14).then(t.bind(null,483))},"v-065d30b4":function(){return t.e(15).then(t.bind(null,484))},"v-669128ba":function(){return t.e(16).then(t.bind(null,485))},"v-02cf1748":function(){return t.e(17).then(t.bind(null,486))},"v-19e87a0e":function(){return Promise.all([t.e(0),t.e(5)]).then(t.bind(null,487))},"v-332e2ff5":function(){return t.e(18).then(t.bind(null,488))}};function Io(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var Ao=/-(\w)/g,zo=Io((function(n){return n.replace(Ao,(function(n,e){return e?e.toUpperCase():""}))})),Ro=/\B([A-Z])/g,Po=Io((function(n){return n.replace(Ro,"-$1").toLowerCase()})),Lo=Io((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function Mo(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Lo(zo(e))):n(Lo(e))||n(Po(e))}var Bo=Object.assign({},Co,Oo),$o=function(n){return Bo[n]},Do=function(n){return Oo[n]},Jo=function(n){return Co[n]},No=function(n){return Ra.component(n)};function Fo(n){return Mo(Do,n)}function qo(n){return Mo(Jo,n)}function Uo(n){return Mo($o,n)}function Ho(n){return Mo(No,n)}function Vo(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Ho(e)||!Uo(e)){n.next=5;break}return n.next=3,Uo(e)();case 3:t=n.sent,Ra.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Go(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var Qo=t(131),Xo=(t(185),t(106),t(70),t(215)),Ko=t.n(Xo),Wo=t(216),Yo=t.n(Wo),Zo={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Qo.a)(n,1)[0]})).map((function(n){var e=Object(Qo.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(Yo()(n[t]),'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=es(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(Eo.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=ts(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Ko()([{name:"description",content:this.$description}],n,this.siteMeta,rs)},updateCanonicalLink:function(){ns(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",es(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){ts(null,this.currentMetaTags),ns()}};function ns(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function es(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function ts(n,e){if(e&&Object(Eo.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function rs(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(133);var as=t(148),is={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(as)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+r,o=0;o<t.length;o++){var s=t[o],l=t[o+1],c=0===o&&0===r||r>=s.parentElement.offsetTop+10&&(!l||r<l.parentElement.offsetTop-10),u=decodeURIComponent(this.$route.hash);if(c&&u!==decodeURIComponent(s.hash)){var p=s;if(i===a)for(var d=o+1;d<t.length;d++)if(u===decodeURIComponent(t[d].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(p.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},os=(t(102),t(97)),ss=t.n(os),ls={mounted:function(){var n=this;ss.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||Ra.component(n.name)||ss.a.start(),t()})),this.$router.afterEach((function(){ss.a.done(),n.isSidebarOpen=!1}))}};t(72),t(71),t(75),t(361);function cs(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(137);function us(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function ps(n,e,t){return e&&us(n.prototype,e),t&&us(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(362);var ds=function(){function n(){cs(this,n);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return ps(n,[{key:"show",value:function(n){var e=this,t=n.text,r=void 0===t?"":t,a=n.duration,i=void 0===a?3e3:a,o=document.createElement("div");o.className="message move-in",o.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(r,"</div>\n    "),this.containerEl.appendChild(o),i>0&&setTimeout((function(){e.close(o)}),i)}},{key:"close",value:function(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",(function(){n.remove()}))}}]),n}(),fs={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var n=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(e){document.querySelectorAll(e).forEach(n.generateCopyButton)}))}),1e3)},generateCopyButton:function(n){var e=this;if(!n.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",(function(){e.copyToClipboard(n.innerText)})),n.appendChild(t),n.classList.add("codecopy-enabled")}},copyToClipboard:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),(new ds).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};t(230),t(98),t(132),t(134),t(364);!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&r.firstChild?r.insertBefore(a,r.firstChild):r.appendChild(a),a.styleSheet?a.styleSheet.cssText=n:a.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var hs={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},vs={},ms=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},gs=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:hs[n]},bs=function n(e,t,r){var a=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))a[n]=t[n];else{var e=n.replace("data","");a.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,i=e.children;a.appendChild(n(t,r,i))})),a},ys=function(n,e,t){var r,a=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==a.length||t?a:a[0]},xs=function(n,e){var t,r,a=n.match(/<style>([\s\S]+)<\/style>/),i=n.match(/<template>([\s\S]+)<\/template>/),o=n.match(/<script>([\s\S]+)<\/script>/),s={css:a&&a[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=ms(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),a=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,i=[eval][0](a);return i.template=e,i}(s.js,s.html);var l=gs("vue");return s.jsLib.unshift(l),s},_s=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<html>([\s\S]+)<\/html>/),i=n.match(/<script>([\s\S]+)<\/script>/),o={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return o.htmlTpl=o.html,o.jsTpl=o.js,o.script=(t=o.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),o},ws=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function ks(){var n=ys(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=ys(n,"vuepress-plugin-demo-block__code"),t=ys(n,"vuepress-plugin-demo-block__display"),r=ys(n,"vuepress-plugin-demo-block__footer"),a=ys(t,"vuepress-plugin-demo-block__app"),i=decodeURIComponent(n.dataset.code),o=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);o=o?JSON.parse(o):{};var l=e.querySelector("div").clientHeight,c="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),a=new Function("return ".concat(r))(),i={js:a,css:a.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:ws(n),htmlTpl:ms("")},o=gs("react"),s=gs("reactDOM");return i.jsLib.unshift(o,s),i}(i,o):"vanilla"===s?_s(i,o):xs(i,o),u=bs("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(u),u.addEventListener("click",Ss.bind(null,u,l,e,r)),gs("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=a.concat(i).concat(gs("cssLib")).concat(gs("jsLib")).join(",");return bs("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:o}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),gs("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=JSON.stringify({css:e,html:t,js:r,js_external:a.concat(gs("jsLib")).join(";"),css_external:i.concat(gs("cssLib")).join(";"),layout:gs("codepenLayout"),js_pre_processor:gs("codepenJsProcessor"),editors:gs("codepenEditors")});return bs("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:o}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==o.horizontal?o.horizontal:gs("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var p=e.firstChild.cloneNode(!0);p.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(p)}if(c.css&&function(n){if(!vs[n]){var e=bs("style",{innerHTML:n});document.body.appendChild(e),vs[n]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),a);else if("vue"===s){var d=(new(Vue.extend(c.script))).$mount();a.appendChild(d.$el)}else"vanilla"===s&&(a.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){ks()}),300)}function Ss(n,e,t,r){var a="1"!==n.dataset.isExpand;t.style.height=a?"".concat(e,"px"):0,a?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=a?"1":"0"}var js={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},ks()},updated:function(){ks()}},Ts=(t(219),"auto"),Es="zoom-in",Cs="zoom-out",Os="grab",Is="move";function As(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function zs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Rs(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ps(n,e,t){!function(n){var e=Ls,t=Ms;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var i in e)t&&(a[i]=r[i]||""),r[i]=e[i];return a}var Ls="transition",Ms="transform",Bs="transform",$s="transitionend";var Ds=function(){},Js={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Ds,onClose:Ds,onGrab:Ds,onMove:Ds,onRelease:Ds,onBeforeOpen:Ds,onBeforeClose:Ds,onBeforeGrab:Ds,onBeforeRelease:Ds,onImageLoading:Ds,onImageLoaded:Ds},Ns={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),qs(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(a)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Fs(n)&&!qs(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Fs(n)&&!qs(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Fs(n){return 0===n.button}function qs(n){return n.metaKey||n.ctrlKey}var Us={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ps(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),As(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ps(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Hs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Vs=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Gs=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Qs={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Rs(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Os:Cs,transition:Bs+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ps(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ps(this.el,{transform:"none"})},grab:function(n,e,t){var r=Xs(),a=r.x-n,i=r.y-e;Ps(this.el,{cursor:Is,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=Xs(),a=r.x-n,i=r.y-e;Ps(this.el,{transition:Bs,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ps(this.el,this.styleClose)},restoreOpenStyle:function(){Ps(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Xs(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,i=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":Hs(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var o=this.rect.width/2,s=this.rect.height/2,l=Xs(),c={x:l.x-o,y:l.y-s},u=c.x/o,p=c.y/s,d=i+Math.min(u,p);if(a&&"string"==typeof a){var f=t||this.el.naturalWidth,h=e||this.el.naturalHeight,v=parseFloat(a)*f/(100*this.rect.width),m=parseFloat(a)*h/(100*this.rect.height);if(d>v||d>m)return{x:v,y:m}}return{x:d,y:d}}};function Xs(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Ks(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){As(n,r,e[r],t)}))}var Ws=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Qs),this.overlay=Object.create(Us),this.handler=Object.create(Ns),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Gs({},Js,e),this.overlay.init(this),this.handler.init(this)}return Vs(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Es,As(n,"click",this.handler.click),this.options.preloadImage&&zs(Rs(n)));return this}},{key:"config",value:function(n){return n?(Gs(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),zs(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),As(document,"scroll",this.handler.scroll),As(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&As(window,"resize",this.handler.resizeWindow);var i=function n(){As(r,$s,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Ks(document,e.handler,!0),t(r)};return As(r,$s,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ts,this.overlay.fadeOut(),this.target.zoomOut(),As(document,"scroll",this.handler.scroll,!1),As(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&As(window,"resize",this.handler.resizeWindow,!1);var r=function r(){As(t,$s,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Ks(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return As(t,$s,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var i=function n(){As(a,$s,n,!1),r(a)};return As(a,$s,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Is,this.target.move(n,e,t);var a=this.target.el,i=function n(){As(a,$s,n,!1),r(a)};return As(a,$s,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ts,this.target.restoreOpenStyle();var r=function r(){As(t,$s,r,!1),n.lock=!1,n.released=!0,e(t)};return As(t,$s,r),this}}}]),n}(),Ys=".theme-vdoing-content img:not(.no-zoom)",Zs=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),nl=Number("500"),el=function(){function n(){cs(this,n),this.instance=new Ws(Zs)}return ps(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ys;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ys,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:nl;setTimeout((function(){return n.update(e)}),t)}}]),n}(),tl=[Zo,is,ls,fs,js,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new el,this.$vuepress.zooming.updateDelay()}}],rl={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Go("layout",n),Ra.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},al=t(29),il=Object(al.a)(rl,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(Eo.a)(t));break;default:throw new Error("Unknown option name.")}}(il,"mixins",tl);var ol=[{name:"v-beef57a6",path:"/pages/52d5c3/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-beef57a6").then(t)}},{path:"/pages/52d5c3/index.html",redirect:"/pages/52d5c3/"},{path:"/01.基础/01.基础知识/01.基础.html",redirect:"/pages/52d5c3/"},{name:"v-aa01d20a",path:"/pages/649cb6/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-aa01d20a").then(t)}},{path:"/pages/649cb6/index.html",redirect:"/pages/649cb6/"},{path:"/01.基础/01.基础知识/04.JVM.html",redirect:"/pages/649cb6/"},{name:"v-404c9778",path:"/pages/a99400/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-404c9778").then(t)}},{path:"/pages/a99400/index.html",redirect:"/pages/a99400/"},{path:"/01.基础/03.数据库/01.MySQL.html",redirect:"/pages/a99400/"},{name:"v-3fccfa19",path:"/pages/5aa973/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-3fccfa19").then(t)}},{path:"/pages/5aa973/index.html",redirect:"/pages/5aa973/"},{path:"/02.框架/01.Spring/01.基础/01.Spring.html",redirect:"/pages/5aa973/"},{name:"v-33a08dcd",path:"/pages/ce6c78/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-33a08dcd").then(t)}},{path:"/pages/ce6c78/index.html",redirect:"/pages/ce6c78/"},{path:"/02.框架/01.Spring/10.安全框架/01.JWT.html",redirect:"/pages/ce6c78/"},{name:"v-f84a6a2e",path:"/pages/9a6634/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-f84a6a2e").then(t)}},{path:"/pages/9a6634/index.html",redirect:"/pages/9a6634/"},{path:"/02.框架/03.SpringBoot/03.非关系型数据库/01.Redis.html",redirect:"/pages/9a6634/"},{name:"v-c2ffda6e",path:"/pages/0a0365/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-c2ffda6e").then(t)}},{path:"/pages/0a0365/index.html",redirect:"/pages/0a0365/"},{path:"/02.框架/03.SpringBoot/03.非关系型数据库/02.Elasticsearch.html",redirect:"/pages/0a0365/"},{name:"v-2b9d952b",path:"/pages/c267a5/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-2b9d952b").then(t)}},{path:"/pages/c267a5/index.html",redirect:"/pages/c267a5/"},{path:"/02.框架/03.SpringBoot/04.MQ/01.RabbitMQ.html",redirect:"/pages/c267a5/"},{name:"v-b721a6a6",path:"/pages/db78e2/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-b721a6a6").then(t)}},{path:"/pages/db78e2/index.html",redirect:"/pages/db78e2/"},{path:"/03.工具/01.资源.html",redirect:"/pages/db78e2/"},{name:"v-065d30b4",path:"/pages/5d571c/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-065d30b4").then(t)}},{path:"/pages/5d571c/index.html",redirect:"/pages/5d571c/"},{path:"/04.项目/01.案例.html",redirect:"/pages/5d571c/"},{name:"v-669128ba",path:"/pages/9cc27d/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-669128ba").then(t)}},{path:"/pages/9cc27d/index.html",redirect:"/pages/9cc27d/"},{path:"/05.云/01.问答.html",redirect:"/pages/9cc27d/"},{name:"v-02cf1748",path:"/pages/1b12ed/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-02cf1748").then(t)}},{path:"/pages/1b12ed/index.html",redirect:"/pages/1b12ed/"},{path:"/06.书籍/01.支持.html",redirect:"/pages/1b12ed/"},{name:"v-19e87a0e",path:"/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-19e87a0e").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-332e2ff5",path:"/blog/",component:il,beforeEnter:function(n,e,t){Vo("Layout","v-332e2ff5").then(t)}},{path:"/blog/index.html",redirect:"/blog/"},{path:"/@pages/archivesPage.html",redirect:"/blog/"},{path:"*",component:il}],sl={title:"Plum Blossom",description:"知识管理",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"基础面试题",frontmatter:{title:"基础面试题",date:"2020-05-11T13:59:38.000Z",permalink:"/pages/52d5c3",article:!1},regularPath:"/01.%E5%9F%BA%E7%A1%80/01.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01.%E5%9F%BA%E7%A1%80.html",relativePath:"01.基础/01.基础知识/01.基础.md",key:"v-beef57a6",path:"/pages/52d5c3/",headers:[{level:3,title:"Java 语言的特点（如果你简历上有提到 C++ 可能还会问你 Java 和 C++ 的区别）。【⭐⭐】",slug:"java-语言的特点-如果你简历上有提到-c-可能还会问你-java-和-c-的区别-。【⭐⭐】",normalizedTitle:"java 语言的特点（如果你简历上有提到 c++ 可能还会问你 java 和 c++ 的区别）。【⭐⭐】",charIndex:7},{level:3,title:"比较 JVM 和 JDK 以及 JRE 。【⭐⭐⭐】非常非常基础的一个问题！学了 Java 之后还不知这个问题如何回答的小伙伴自觉去面壁吧！",slug:"比较-jvm-和-jdk-以及-jre-。【⭐⭐⭐】非常非常基础的一个问题-学了-java-之后还不知这个问题如何回答的小伙伴自觉去面壁吧",normalizedTitle:"比较 jvm 和 jdk 以及 jre 。【⭐⭐⭐】非常非常基础的一个问题！学了 java 之后还不知这个问题如何回答的小伙伴自觉去面壁吧！",charIndex:319},{level:3,title:"为什么说 Java 语言“解释与编译并存”。【⭐⭐】",slug:"为什么说-java-语言-解释与编译并存-。【⭐⭐】",normalizedTitle:"为什么说 java 语言“解释与编译并存”。【⭐⭐】",charIndex:734},{level:3,title:"Java 基本类型有哪几种，各占多少位？【⭐⭐】",slug:"java-基本类型有哪几种-各占多少位-【⭐⭐】",normalizedTitle:"java 基本类型有哪几种，各占多少位？【⭐⭐】",charIndex:1160},{level:3,title:"Java 泛型，类型擦除。【⭐⭐⭐】",slug:"java-泛型-类型擦除。【⭐⭐⭐】",normalizedTitle:"java 泛型，类型擦除。【⭐⭐⭐】",charIndex:1683},{level:3,title:"== 和 equals() 的区别。【⭐⭐⭐】：这个问题在 2018 年之前几乎是面试必问的问题，但是现在大厂以及比较少问了，现在小厂中厂问的多。",slug:"和-equals-的区别。【⭐⭐⭐】-这个问题在-2018-年之前几乎是面试必问的问题-但是现在大厂以及比较少问了-现在小厂中厂问的多。",normalizedTitle:"== 和 equals() 的区别。【⭐⭐⭐】：这个问题在 2018 年之前几乎是面试必问的问题，但是现在大厂以及比较少问了，现在小厂中厂问的多。",charIndex:2714},{level:3,title:"**hashCode()",slug:"hashcode",normalizedTitle:"**hashcode()",charIndex:3324},{level:3,title:"重载和重写的区别。 【⭐⭐⭐⭐】",slug:"重载和重写的区别。-【⭐⭐⭐⭐】",normalizedTitle:"重载和重写的区别。 【⭐⭐⭐⭐】",charIndex:4418},{level:3,title:"深拷贝和浅拷贝。【⭐】",slug:"深拷贝和浅拷贝-https-developer-aliyun-com-article-617684-text-关于java的深拷贝和浅拷贝-简单来说就是创建一个和已知对象一模一样的对象。-可能日常编码过程中用的不多-但是这是一个面试经常会问的问题-而且了解深拷贝和浅拷贝的原理-对于java中的所谓值传递或者引用传递将会有更深的理解。-1、创建对象的5种方式-。【⭐】",normalizedTitle:"深拷贝和浅拷贝。【⭐】",charIndex:null},{level:3,title:"面向对象和面向过程的区别。【⭐⭐⭐】",slug:"面向对象和面向过程的区别。【⭐⭐⭐】",normalizedTitle:"面向对象和面向过程的区别。【⭐⭐⭐】",charIndex:5534},{level:3,title:"成员变量与局部变量的区别。【⭐⭐⭐】",slug:"成员变量与局部变量的区别。【⭐⭐⭐】",normalizedTitle:"成员变量与局部变量的区别。【⭐⭐⭐】",charIndex:5718},{level:3,title:"面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】",slug:"面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】",normalizedTitle:"面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】",charIndex:6189},{level:3,title:"`String`、`StringBuffer` 和 `StringBuilder` 的区别。 【⭐⭐⭐⭐】",slug:"string、stringbuffer-和-stringbuilder-的区别。-【⭐⭐⭐⭐】",normalizedTitle:"<code>string</code>、<code>stringbuffer</code> 和 <code>stringbuilder</code> 的区别。 【⭐⭐⭐⭐】",charIndex:null},{level:3,title:"字符串常量池的作用了解吗？",slug:"字符串常量池的作用了解吗",normalizedTitle:"字符串常量池的作用了解吗？",charIndex:8197},{level:3,title:"Java 异常。【⭐⭐⭐】：不会问的特别细。经常的问法是异常可以分为哪几种，然后你答了可检查异常和不可检查异常以后，会让你举例可检查异常有哪些，不可检查有哪些。然后，异常的代码要会写，有一场字节的面试，直接让我写一个把异常捕获了然后抛出去的代码。",slug:"java-异常。【⭐⭐⭐】-不会问的特别细。经常的问法是异常可以分为哪几种-然后你答了可检查异常和不可检查异常以后-会让你举例可检查异常有哪些-不可检查有哪些。然后-异常的代码要会写-有一场字节的面试-直接让我写一个把异常捕获了然后抛出去的代码。",normalizedTitle:"java 异常。【⭐⭐⭐】：不会问的特别细。经常的问法是异常可以分为哪几种，然后你答了可检查异常和不可检查异常以后，会让你举例可检查异常有哪些，不可检查有哪些。然后，异常的代码要会写，有一场字节的面试，直接让我写一个把异常捕获了然后抛出去的代码。",charIndex:8301},{level:4,title:"Throwable 类常用方法有哪些？",slug:"throwable-类常用方法有哪些",normalizedTitle:"throwable 类常用方法有哪些？",charIndex:9692},{level:4,title:"try-catch-finally 如何使用？",slug:"try-catch-finally-如何使用",normalizedTitle:"try-catch-finally 如何使用？",charIndex:9996},{level:4,title:"finally 中的代码一定会执行吗？",slug:"finally-中的代码一定会执行吗",normalizedTitle:"finally 中的代码一定会执行吗？",charIndex:10454},{level:3,title:"序列化和反序列化【⭐⭐】",slug:"序列化和反序列化【⭐⭐】",normalizedTitle:"序列化和反序列化【⭐⭐】",charIndex:10670},{level:4,title:"Java 序列化中如果有些字段不想进行序列化，怎么办？",slug:"java-序列化中如果有些字段不想进行序列化-怎么办",normalizedTitle:"java 序列化中如果有些字段不想进行序列化，怎么办？",charIndex:10999},{level:3,title:"反射【⭐⭐】面试官可能会问你什么是反射，它的优缺点是什么，有哪些应用场景。",slug:"反射【⭐⭐】面试官可能会问你什么是反射-它的优缺点是什么-有哪些应用场景。",normalizedTitle:"反射【⭐⭐】面试官可能会问你什么是反射，它的优缺点是什么，有哪些应用场景。",charIndex:11383},{level:3,title:"List、Set、 Map 的区别。【⭐⭐】",slug:"list、set、-map-的区别。【⭐⭐】",normalizedTitle:"list、set、 map 的区别。【⭐⭐】",charIndex:11656},{level:3,title:"`ArrayList` 和 `LinkedList` 的区别。【⭐⭐⭐⭐】：答清楚每个分别采用什么数据结构，对比相应的优点和缺点。",slug:"arraylist-和-linkedlist-的区别。【⭐⭐⭐⭐】-答清楚每个分别采用什么数据结构-对比相应的优点和缺点。",normalizedTitle:"<code>arraylist</code> 和 <code>linkedlist</code> 的区别。【⭐⭐⭐⭐】：答清楚每个分别采用什么数据结构，对比相应的优点和缺点。",charIndex:null},{level:3,title:"比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同。【⭐⭐⭐】",slug:"比较-hashset、linkedhashset-和-treeset-三者的异同。【⭐⭐⭐】",normalizedTitle:"比较 hashset、linkedhashset 和 treeset 三者的异同。【⭐⭐⭐】",charIndex:12288},{level:4,title:"TreeSet",slug:"treeset",normalizedTitle:"treeset",charIndex:11806},{level:3,title:"HashMap 多线程操作导致死循环问题。【⭐⭐⭐】jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。",slug:"hashmap-多线程操作导致死循环问题。【⭐⭐⭐】jdk-1-8-后解决了这个问题-但是还是不建议在多线程下使用-hashmap-因为多线程下使用-hashmap-还是会存在其他问题比如数据丢失。并发环境下推荐使用-concurrenthashmap-。",normalizedTitle:"hashmap 多线程操作导致死循环问题。【⭐⭐⭐】jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 hashmap,因为多线程下使用 hashmap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 concurrenthashmap 。",charIndex:12593},{level:3,title:"HashMap 的长度为什么是 2 的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。",slug:"hashmap-的长度为什么是-2-的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。",normalizedTitle:"hashmap 的长度为什么是 2 的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。",charIndex:12731},{level:3,title:"`HashMap`、`HashTable`、以及 `ConcurrentHashMap` 的区别。【⭐⭐⭐⭐⭐】",slug:"hashmap、hashtable、以及-concurrenthashmap-的区别。【⭐⭐⭐⭐⭐】",normalizedTitle:"<code>hashmap</code>、<code>hashtable</code>、以及 <code>concurrenthashmap</code> 的区别。【⭐⭐⭐⭐⭐】",charIndex:null},{level:3,title:"Queue 与 Deque 的区别",slug:"queue-与-deque-的区别",normalizedTitle:"queue 与 deque 的区别",charIndex:14403}],headersStr:"Java 语言的特点（如果你简历上有提到 C++ 可能还会问你 Java 和 C++ 的区别）。【⭐⭐】 比较 JVM 和 JDK 以及 JRE 。【⭐⭐⭐】非常非常基础的一个问题！学了 Java 之后还不知这个问题如何回答的小伙伴自觉去面壁吧！ 为什么说 Java 语言“解释与编译并存”。【⭐⭐】 Java 基本类型有哪几种，各占多少位？【⭐⭐】 Java 泛型，类型擦除。【⭐⭐⭐】 == 和 equals() 的区别。【⭐⭐⭐】：这个问题在 2018 年之前几乎是面试必问的问题，但是现在大厂以及比较少问了，现在小厂中厂问的多。 **hashCode() 重载和重写的区别。 【⭐⭐⭐⭐】 深拷贝和浅拷贝。【⭐】 面向对象和面向过程的区别。【⭐⭐⭐】 成员变量与局部变量的区别。【⭐⭐⭐】 面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】 `String`、`StringBuffer` 和 `StringBuilder` 的区别。 【⭐⭐⭐⭐】 字符串常量池的作用了解吗？ Java 异常。【⭐⭐⭐】：不会问的特别细。经常的问法是异常可以分为哪几种，然后你答了可检查异常和不可检查异常以后，会让你举例可检查异常有哪些，不可检查有哪些。然后，异常的代码要会写，有一场字节的面试，直接让我写一个把异常捕获了然后抛出去的代码。 Throwable 类常用方法有哪些？ try-catch-finally 如何使用？ finally 中的代码一定会执行吗？ 序列化和反序列化【⭐⭐】 Java 序列化中如果有些字段不想进行序列化，怎么办？ 反射【⭐⭐】面试官可能会问你什么是反射，它的优缺点是什么，有哪些应用场景。 List、Set、 Map 的区别。【⭐⭐】 `ArrayList` 和 `LinkedList` 的区别。【⭐⭐⭐⭐】：答清楚每个分别采用什么数据结构，对比相应的优点和缺点。 比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同。【⭐⭐⭐】 TreeSet HashMap 多线程操作导致死循环问题。【⭐⭐⭐】jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。 HashMap 的长度为什么是 2 的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。 `HashMap`、`HashTable`、以及 `ConcurrentHashMap` 的区别。【⭐⭐⭐⭐⭐】 Queue 与 Deque 的区别",content:" 1.  # Java 语言的特点（如果你简历上有提到 C++ 可能还会问你 Java 和 C++ 的区别）。【⭐⭐】\n     \n     * 面向对象（封装，继承，多态）；\n     * 平台无关性（ Java 虚拟机实现平台无关性）；\n     * 支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；\n     * 可靠性；\n     * 安全性；\n     * 支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；\n     * 编译与解释并存；\n\n\n 2.  # 比较 JVM 和 JDK 以及 JRE 。【⭐⭐⭐】非常非常基础的一个问题！学了 Java 之后还不知这个问题如何回答的小伙伴自觉去面壁吧！\n     \n     * JVM：是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。\n     * JDK：它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。\n     * JRE：Java的运行时环境，它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。\n\n\n 3.  # 为什么说 Java 语言“解释与编译并存”。【⭐⭐】\n     \n     我们可以将高级编程语言按照程序的执行方式分为两种：\n     \n     * 编译型 ：编译型语言 会通过编译器将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。\n     * 解释型 ：解释型语言会通过解释器一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。\n     \n     这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。\n\n\n 4.  # Java 基本类型有哪几种，各占多少位？【⭐⭐】\n     \n     | 基本数据类型 | 占用字节 | 默认值 | 范围 | 包装类 | | -------------------- | -------- | ------- | --------------- | --------- | | byte(字节型) | 1 | 0 | -2^7 ~ 2^7-1 | Byte | | short(短整型) | 2 | 0 | -2^15 ~ 2^15-1 | Short | | int(整型) | 4 | 0 | -2^31 ~ 2^31-1 | Integer | | long(长整型) | 8 | 0L | -2^63 ~ 2^63-1 | Long | | float(浮点型) | 4 | 0.0f | | Float | | double(双精度浮点型) | 8 | 0.0d | | Double | | char(字符类型) | 2 | 'u0000' | \\u0000 ~ \\uffff | Character | | boolean(布尔类型) | 1 | false | true/false | |\n\n\n 5.  # Java 泛型，类型擦除。【⭐⭐⭐】\n     \n     泛型：泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。\n     \n     Java 的泛型是伪泛型，这是因为 Java 在运行期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。\n     \n     泛型的优点：\n     \n     * 编译时的强类型检查\n       \n       泛型要求在声明时指定实际数据类型，Java 编译器在编译时会对泛型代码做强类型检查，并在代码违反类型安全时发出告警。早发现，早治理，把隐患扼杀于摇篮，在编译时发现并修复错误所付出的代价远比在运行时小。\n     \n     * 避免了类型转换\n     \n     * 泛型编程可以实现通用算法\n     \n     类型擦除：Java 语言引入泛型是为了在编译时提供更严格的类型检查，并支持泛型编程。不同于 C++ 的模板机制，Java 泛型是使用类型擦除来实现的，使用泛型时，任何具体的类型信息都被擦除了。\n     \n     那么，类型擦除做了什么呢？它做了以下工作：\n     \n     * 把泛型中的所有类型参数替换为 Object，如果指定类型边界，则使用类型边界来替换。因此，生成的字节码仅包含普通的类，接口和方法。\n     * 擦除出现的类型声明，即去掉 <> 的内容。比如 T get() 方法声明就变成了 Object get() ；List<String> 就变成了 List。如有必要，插入类型转换以保持类型安全。\n     * 生成桥接方法以保留扩展泛型类型中的多态性。类型擦除确保不为参数化类型创建新类；因此，泛型不会产生运行时开销\n     \n     类型通配符：\n     \n     * extend 上界通配符：将未知类型限制为该类型的特定类型或其子类。\n     * super 下界通配符：将未知类型限制为该类型的特定类型或超类类型。\n     \n     常用的通配符为： T，E，K，V，？\n     \n     * ？ 表示不确定的 Java 类型\n     * T (type) 表示具体的一个 Java 类型\n     * K V (key value) 分别代表 Java 键值中的 Key Value\n     * E (element) 代表 Element\n\n\n 6.  # == 和 equals() 的区别。【⭐⭐⭐】：这个问题在 2018 年之前几乎是面试必问的问题，但是现在大厂以及比较少问了，现在小厂中厂问的多。\n     \n     == 对于基本类型和引用类型的作用效果是不同的：\n     \n     * 对于基本数据类型来说，== 比较的是值。\n     * 对于引用数据类型来说，== 比较的是对象的内存地址。\n     \n     > 因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。\n     \n     equals() 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。equals()方法存在于Object类中，而Object类是所有类的直接或间接父类，因此所有的类都有equals()方法。\n     \n     equals() 方法存在两种使用情况：\n     \n     * 类没有重写 equals()方法 ：通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 Object类equals()方法。\n     * 类重写了 equals()方法 ：一般我们都重写 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。\n\n\n 7.  # **hashCode()\n     \n     和 equals()** 【⭐⭐⭐⭐】：这个问题经常问，面试官经常问为什么重写 equals() 时要重写 hashCode() 方法？另外，这个问题经常结合着 HashSet 问。\n     \n     hashCode() 的作用是获取哈希码（int 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。\n     \n     hashCode()定义在 JDK 的 Object 类中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。另外需要注意的是： Object 的 hashCode() 方法是本地方法，也就是用 C 语言或 C++ 实现的，该方法通常用来将对象的内存地址转换为整数之后返回。\n     \n     其实， hashCode() 和 equals()都是用于比较两个对象是否相等。\n     \n     那为什么 JDK 还要同时提供这两个方法呢？\n     \n     这是因为在一些容器（比如 HashMap、HashSet）中，有了 hashCode() 之后，判断元素是否在对应容器中的效率会更高（参考添加元素进HastSet的过程）！\n     \n     我们在前面也提到了添加元素进HastSet的过程，如果 HashSet 在对比的时候，同样的 hashCode 有多个对象，它会继续使用 equals() 来判断是否真的相同。也就是说 hashCode 帮助我们大大缩小了查找成本。\n     \n     那为什么不只提供 hashCode() 方法呢？\n     \n     这是因为两个对象的hashCode 值相等并不代表两个对象就相等。\n     \n     那为什么两个对象有相同的 hashCode 值，它们也不一定是相等的？\n     \n     因为 hashCode() 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓哈希碰撞也就是指的是不同的对象得到相同的 hashCode )。\n     \n     总结下来就是 ：\n     \n     * 如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。\n     * 如果两个对象的hashCode 值相等并且equals()方法也返回 true，我们才认为这两个对象相等。\n     * 如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。\n\n\n 8.  # 重载和重写的区别。 【⭐⭐⭐⭐】\n     \n     重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理\n     \n     重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法\n     \n     重载：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\n     \n     重写：重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\n     \n     | 区别点 | 重载方法 | 重写方法 | | ---------- | -------- | ------------------------------------------------------------ | | 发生范围 | 同一个类 | 子类 | | 参数列表 | 必须修改 | 一定不能修改 | | 返回类型 | 可修改 | 子类方法返回值类型应比父类方法返回值类型更小或相等 | | 异常 | 可修改 | 子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等； | | 访问修饰符 | 可修改 | 一定不能做更严格的限制（可以降低限制） | | 发生阶段 | 编译期 | 运行期 |\n     \n     ⭐️ 关于 重写的返回值类型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。\n\n\n 9.  # [深拷贝和浅拷贝](https://developer.aliyun.com/article/617684#:~:text=关于Java的深拷贝和浅拷贝，简单来说就是创建一个和已知对象一模一样的对象。,可能日常编码过程中用的不多，但是这是一个面试经常会问的问题，而且了解深拷贝和浅拷贝的原理，对于Java中的所谓值传递或者引用传递将会有更深的理解。 1、创建对象的5种方式)。【⭐】\n     \n     浅拷贝：创建一个新对象，然后将当前对象的非静态字段复制到该新对象，如果字段是值类型的，那么对该字段执行复制；如果该字段是引用类型的话，则复制引用但不复制引用的对象。因此，原始对象及其副本引用同一个对象。\n     \n     深拷贝：创建一个新对象，然后将当前对象的非静态字段复制到该新对象，无论该字段是值类型的还是引用类型，都复制独立的一份。当你修改其中一个对象的任何内容时，都不会影响另一个对象的内容。\n\n\n 10. # 面向对象和面向过程的区别。【⭐⭐⭐】\n     \n     两者的主要区别在于解决问题的方式不同：\n     \n     * 面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。\n     * 面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。\n     \n     另外，面向对象开发的程序一般更易维护、易复用、易扩展。\n\n\n 11. # 成员变量与局部变量的区别。【⭐⭐⭐】\n     \n     * 语法形式 ：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\n     * 存储方式 ：从变量在内存中的存储方式来看,如果成员变量是使用 static 修饰的，那么这个成员变量是属于类的，如果没有使用 static 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。\n     * 生存时间 ：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。\n     * 默认值 ：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。\n\n\n 12. # 面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】\n     \n     * 封装：封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。\n     \n     * 继承\n       \n       继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。\n       \n       通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。\n       \n       关于继承如下 3 点请记住：\n       \n       1. 子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。\n       2. 子类可以拥有自己属性和方法，即子类可以对父类进行扩展。\n       3. 子类可以用自己的方式实现父类的方法。（以后介绍）。\n     \n     * 多态\n       \n       多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。\n       \n       多态的特点:\n       \n       * 对象类型和引用类型之间具有继承（类）/实现（接口）的关系；\n       * 引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；\n       * 多态不能调用“只在子类存在但在父类不存在”的方法；\n       * 如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。\n\n\n 13. # String、StringBuffer 和 StringBuilder 的区别。 【⭐⭐⭐⭐】\n     \n     可变性\n     \n     在 Java 9 之后，String 、StringBuilder 与 StringBuffer 的实现改用 byte 数组存储字符串。之前用字符数组来存储字符串\n     \n     String 真正不可变有下面几点原因：\n     \n     1. 保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。\n     2. String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。\n     \n     StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串，不过没有使用 final 和 private 关键字修饰，最关键的是这个 AbstractStringBuilder 类还提供了很多修改字符串的方法比如 append 方法。\n     \n     线程安全性\n     \n     String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。\n     \n     性能\n     \n     每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。\n     \n     对于三者使用的总结：\n     \n     1. 操作少量的数据: 适用 String\n     2. 单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder\n     3. 多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer\n     \n     对象引用和“+”的字符串拼接方式，实际上是通过 StringBuilder 调用 append() 方法实现的，拼接完成之后调用 toString() 得到一个 String 对象 。\n\n\n 14. # 字符串常量池的作用了解吗？\n     \n     字符串常量池 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。\n\n\n 15. # Java 异常。【⭐⭐⭐】：不会问的特别细。经常的问法是异常可以分为哪几种，然后你答了可检查异常和不可检查异常以后，会让你举例可检查异常有哪些，不可检查有哪些。然后，异常的代码要会写，有一场字节的面试，直接让我写一个把异常捕获了然后抛出去的代码。\n     \n     在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类:\n     \n     * Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\n     * Error ：Error 属于程序无法处理的错误 ，我们没办法通过 catch 来进行捕获 。例如Java 虚拟机运行错误（Virtual MachineError ）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\n     \n     Checked Exception 即受检查异常，Java 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 。\n     \n     除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、ClassNotFoundException 、SQLException ...。\n     \n     Unchecked Exception 即 不受检查异常 ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。\n     \n     RuntimeException 及其子类都统称为非受检查异常，例如：NullPointerException、NumberFormatException （字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。\n     \n     常见的运行时异常。 运行时异常的概念: 继承自RuntimeException的异常或者其子类， 编译阶段是不会出错的，它是在运行时阶段可能出现的错误， 运行时异常编译阶段可以处理也可以不处理,代码编译都能通过！！\n     \n     1.数组索引越界异常: ArrayIndexOutOfBoundsException。 2.空指针异常 : NullPointerException。 直接输出没有问题。但是调用空指针的变量的功能就会报错！！ 3.类型转换异常：ClassCastException。 4.迭代器遍历没有此元素异常：NoSuchElementException。 5.数学操作异常：ArithmeticException。 6.数字转换异常： NumberFormatException。\n     \n     # Throwable 类常用方法有哪些？\n     \n     * String getMessage(): 返回异常发生时的简要描述\n     * String toString(): 返回异常发生时的详细信息\n     * String getLocalizedMessage(): 返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage()返回的结果相同\n     * void printStackTrace(): 在控制台上打印 Throwable 对象封装的异常信息\n     \n     # try-catch-finally 如何使用？\n     \n     * try块： 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。\n     * catch块： 用于处理 try 捕获到的异常。\n     * finally 块： 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。\n     \n     ** 注意：不要在 finally 语句块中使用 return!** 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。\n     \n     # finally 中的代码一定会执行吗？\n     \n     不一定的！在某些情况下，finally 中的代码不会被执行。\n     \n     就比如说 finally 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。\n     \n     另外，在以下 2 种特殊情况下，finally 块的代码也不会被执行：\n     \n     1. 程序所在的线程死亡。\n     2. 关闭 CPU。\n\n\n 16. # 序列化和反序列化【⭐⭐】\n     \n     如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。\n     \n     简单来说：\n     \n     * 序列化： 将数据结构或对象转换成二进制字节流的过程\n     * 反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程\n     \n     对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。\n     \n     # Java 序列化中如果有些字段不想进行序列化，怎么办？\n     \n     对于不想进行序列化的变量，使用 transient 关键字修饰。\n     \n     transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。\n     \n     关于 transient 还有几点注意：\n     \n     * transient 只能修饰变量，不能修饰类和方法。\n     * transient 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 int 类型，那么反序列后结果就是 0。\n     * static 变量因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化。\n\n\n 17. # 反射【⭐⭐】面试官可能会问你什么是反射，它的优缺点是什么，有哪些应用场景。\n     \n     通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\n     \n     反射机制优缺点\n     \n     * 优点 ： 可以让咱们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利\n     * 缺点 ：让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。\n\n\n 18. # List、Set、 Map 的区别。【⭐⭐】\n     \n     Set系列集合：添加的元素是无序，不重复，无索引的。\n     \n     * HashSet:添加的元素是无序，不重复，无索引的。\n       * LinkedHashSet:添加的元素是有序，不重复，无索引的。\n     * TreeSet:不重复，无索引，按照大小默认升序排序!!\n     \n     List系列集合：添加的元素是有序，可重复，有索引。\n     \n     * ArrayList：添加的元素是有序，可重复，有索引。\n     * LinkedList：添加的元素是有序，可重复，有索引。\n     \n     Map集合的特点： 1.Map集合的特点都是由键决定的。 2.Map集合的键是无序,不重复的，无索引的。 Map集合后面重复的键对应的元素会覆盖前面的整个元素！ 3.Map集合的值无要求。 4.Map集合的键值对都可以为null。\n\n\n 19. # ArrayList 和 LinkedList 的区别。【⭐⭐⭐⭐】：答清楚每个分别采用什么数据结构，对比相应的优点和缺点。\n     \n     ArrayList:：底层基于数组存储数据的，查询快，增删慢！！\n     \n     LinkedList：底层是基于双链表的，增删比较快，查询慢！！ LinkedList是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的\n\n\n 20. # 比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同。【⭐⭐⭐】\n     \n     如果希望元素可以重复，又有索引，查询要快用ArrayList集合。（用的最多） 如果希望元素可以重复，又有索引，增删要快要用LinkedList集合。（适合查询元素比较少的情况，经常要首尾操作元素的情况） 如果希望增删改查都很快，但是元素不重复以及无序无索引，那么用HashSet集合。 如果希望增删改查都很快且有序，但是元素不重复以及无索引，那么用LinkedHashSet集合。\n     \n     # TreeSet\n     \n     底层基于TreeMap实现\n\n\n 21. # HashMap 多线程操作导致死循环问题。【⭐⭐⭐】jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。\n\n\n 22. # HashMap 的长度为什么是 2 的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。\n\n\n 23. # HashMap、HashTable、以及 ConcurrentHashMap 的区别。【⭐⭐⭐⭐⭐】\n     \n     1. 线程是否安全： HashMap 是非线程安全的，Hashtable 是线程安全的,因为 Hashtable 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；\n     2. 效率： 因为线程安全的问题，HashMap 要比 Hashtable 效率高一点。另外，Hashtable 基本被淘汰，不要在代码中使用它；\n     3. 对 Null key 和 Null value 的支持： HashMap 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 NullPointerException。\n     4. 初始容量大小和每次扩充容量大小的不同 ： ① 创建时如果不指定容量初始值，Hashtable 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。HashMap 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为 2 的幂次方大小（HashMap 中的tableSizeFor()方法保证，下面给出了源代码）。也就是说 HashMap 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。\n     5. 底层数据结构： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。\n     \n     ConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的方式上不同。\n     \n     * 底层数据结构： JDK1.7 的 ConcurrentHashMap 底层采用 分段的数组+链表 实现，JDK1.8 采用的数据结构跟 HashMap1.8 的结构一样，数组+链表/红黑二叉树。Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 数组+链表 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；\n     * 实现线程安全的方式（重要）： ① 在 JDK1.7 的时候，ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment) ，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。 到了 JDK1.8 的时候已经摒弃了 Segment 的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6 以后 对 synchronized 锁做了很多优化） 整个看起来就像是优化过且线程安全的 HashMap，虽然在 JDK1.8 中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；② Hashtable(同一把锁) : 使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。\n\n\n 24. # Queue 与 Deque 的区别\n     \n     Queue 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 先进先出（FIFO） 规则。\n     \n     Queue 扩展了 Collection 的接口，根据 因为容量问题而导致操作失败后处理方式的不同 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。\n     \n     | Queue 接口 | 抛出异常 | 返回特殊值 | | ------------ | --------- | ---------- | | 插入队尾 | add(E e) | offer(E e) | | 删除队首 | remove() | poll() | | 查询队首元素 | element() | peek() |\n     \n     Deque实现了Queue接口是双端队列，在队列的两端均可以插入或删除元素。\n     \n     Deque 扩展了 Queue 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：\n     \n     | Deque 接口 | 抛出异常 | 返回特殊值 | | ------------ | ------------- | --------------- | | 插入队首 | addFirst(E e) | offerFirst(E e) | | 插入队尾 | addLast(E e) | offerLast(E e) | | 删除队首 | removeFirst() | pollFirst() | | 删除队尾 | removeLast() | pollLast() | | 查询队首元素 | getFirst() | peekFirst() | | 查询队尾元素 | getLast() | peekLast() |\n     \n     事实上，Deque 还提供有 push() 和 pop() 等其他方法，可用于模拟栈。",normalizedContent:" 1.  # java 语言的特点（如果你简历上有提到 c++ 可能还会问你 java 和 c++ 的区别）。【⭐⭐】\n     \n     * 面向对象（封装，继承，多态）；\n     * 平台无关性（ java 虚拟机实现平台无关性）；\n     * 支持多线程（ c++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 java 语言却提供了多线程支持）；\n     * 可靠性；\n     * 安全性；\n     * 支持网络编程并且很方便（ java 语言诞生本身就是为简化网络编程设计的，因此 java 语言不仅支持网络编程而且很方便）；\n     * 编译与解释并存；\n\n\n 2.  # 比较 jvm 和 jdk 以及 jre 。【⭐⭐⭐】非常非常基础的一个问题！学了 java 之后还不知这个问题如何回答的小伙伴自觉去面壁吧！\n     \n     * jvm：是运行 java 字节码的虚拟机。jvm 有针对不同系统的特定实现（windows，linux，macos），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 jvm 实现是 java 语言“一次编译，随处可以运行”的关键所在。\n     * jdk：它是功能齐全的 java sdk。它拥有 jre 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。\n     * jre：java的运行时环境，它是运行已编译 java 程序所需的所有内容的集合，包括 java 虚拟机（jvm），java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。\n\n\n 3.  # 为什么说 java 语言“解释与编译并存”。【⭐⭐】\n     \n     我们可以将高级编程语言按照程序的执行方式分为两种：\n     \n     * 编译型 ：编译型语言 会通过编译器将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 c、c++、go、rust 等等。\n     * 解释型 ：解释型语言会通过解释器一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 python、javascript、php 等等。\n     \n     这是因为 java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 java 程序要经过先编译，后解释两个步骤，由 java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 java 解释器来解释执行。\n\n\n 4.  # java 基本类型有哪几种，各占多少位？【⭐⭐】\n     \n     | 基本数据类型 | 占用字节 | 默认值 | 范围 | 包装类 | | -------------------- | -------- | ------- | --------------- | --------- | | byte(字节型) | 1 | 0 | -2^7 ~ 2^7-1 | byte | | short(短整型) | 2 | 0 | -2^15 ~ 2^15-1 | short | | int(整型) | 4 | 0 | -2^31 ~ 2^31-1 | integer | | long(长整型) | 8 | 0l | -2^63 ~ 2^63-1 | long | | float(浮点型) | 4 | 0.0f | | float | | double(双精度浮点型) | 8 | 0.0d | | double | | char(字符类型) | 2 | 'u0000' | \\u0000 ~ \\uffff | character | | boolean(布尔类型) | 1 | false | true/false | |\n\n\n 5.  # java 泛型，类型擦除。【⭐⭐⭐】\n     \n     泛型：泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。\n     \n     java 的泛型是伪泛型，这是因为 java 在运行期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。\n     \n     泛型的优点：\n     \n     * 编译时的强类型检查\n       \n       泛型要求在声明时指定实际数据类型，java 编译器在编译时会对泛型代码做强类型检查，并在代码违反类型安全时发出告警。早发现，早治理，把隐患扼杀于摇篮，在编译时发现并修复错误所付出的代价远比在运行时小。\n     \n     * 避免了类型转换\n     \n     * 泛型编程可以实现通用算法\n     \n     类型擦除：java 语言引入泛型是为了在编译时提供更严格的类型检查，并支持泛型编程。不同于 c++ 的模板机制，java 泛型是使用类型擦除来实现的，使用泛型时，任何具体的类型信息都被擦除了。\n     \n     那么，类型擦除做了什么呢？它做了以下工作：\n     \n     * 把泛型中的所有类型参数替换为 object，如果指定类型边界，则使用类型边界来替换。因此，生成的字节码仅包含普通的类，接口和方法。\n     * 擦除出现的类型声明，即去掉 <> 的内容。比如 t get() 方法声明就变成了 object get() ；list<string> 就变成了 list。如有必要，插入类型转换以保持类型安全。\n     * 生成桥接方法以保留扩展泛型类型中的多态性。类型擦除确保不为参数化类型创建新类；因此，泛型不会产生运行时开销\n     \n     类型通配符：\n     \n     * extend 上界通配符：将未知类型限制为该类型的特定类型或其子类。\n     * super 下界通配符：将未知类型限制为该类型的特定类型或超类类型。\n     \n     常用的通配符为： t，e，k，v，？\n     \n     * ？ 表示不确定的 java 类型\n     * t (type) 表示具体的一个 java 类型\n     * k v (key value) 分别代表 java 键值中的 key value\n     * e (element) 代表 element\n\n\n 6.  # == 和 equals() 的区别。【⭐⭐⭐】：这个问题在 2018 年之前几乎是面试必问的问题，但是现在大厂以及比较少问了，现在小厂中厂问的多。\n     \n     == 对于基本类型和引用类型的作用效果是不同的：\n     \n     * 对于基本数据类型来说，== 比较的是值。\n     * 对于引用数据类型来说，== 比较的是对象的内存地址。\n     \n     > 因为 java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。\n     \n     equals() 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。equals()方法存在于object类中，而object类是所有类的直接或间接父类，因此所有的类都有equals()方法。\n     \n     equals() 方法存在两种使用情况：\n     \n     * 类没有重写 equals()方法 ：通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 object类equals()方法。\n     * 类重写了 equals()方法 ：一般我们都重写 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。\n\n\n 7.  # **hashcode()\n     \n     和 equals()** 【⭐⭐⭐⭐】：这个问题经常问，面试官经常问为什么重写 equals() 时要重写 hashcode() 方法？另外，这个问题经常结合着 hashset 问。\n     \n     hashcode() 的作用是获取哈希码（int 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。\n     \n     hashcode()定义在 jdk 的 object 类中，这就意味着 java 中的任何类都包含有 hashcode() 函数。另外需要注意的是： object 的 hashcode() 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的内存地址转换为整数之后返回。\n     \n     其实， hashcode() 和 equals()都是用于比较两个对象是否相等。\n     \n     那为什么 jdk 还要同时提供这两个方法呢？\n     \n     这是因为在一些容器（比如 hashmap、hashset）中，有了 hashcode() 之后，判断元素是否在对应容器中的效率会更高（参考添加元素进hastset的过程）！\n     \n     我们在前面也提到了添加元素进hastset的过程，如果 hashset 在对比的时候，同样的 hashcode 有多个对象，它会继续使用 equals() 来判断是否真的相同。也就是说 hashcode 帮助我们大大缩小了查找成本。\n     \n     那为什么不只提供 hashcode() 方法呢？\n     \n     这是因为两个对象的hashcode 值相等并不代表两个对象就相等。\n     \n     那为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？\n     \n     因为 hashcode() 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓哈希碰撞也就是指的是不同的对象得到相同的 hashcode )。\n     \n     总结下来就是 ：\n     \n     * 如果两个对象的hashcode 值相等，那这两个对象不一定相等（哈希碰撞）。\n     * 如果两个对象的hashcode 值相等并且equals()方法也返回 true，我们才认为这两个对象相等。\n     * 如果两个对象的hashcode 值不相等，我们就可以直接认为这两个对象不相等。\n\n\n 8.  # 重载和重写的区别。 【⭐⭐⭐⭐】\n     \n     重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理\n     \n     重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法\n     \n     重载：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\n     \n     重写：重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\n     \n     | 区别点 | 重载方法 | 重写方法 | | ---------- | -------- | ------------------------------------------------------------ | | 发生范围 | 同一个类 | 子类 | | 参数列表 | 必须修改 | 一定不能修改 | | 返回类型 | 可修改 | 子类方法返回值类型应比父类方法返回值类型更小或相等 | | 异常 | 可修改 | 子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等； | | 访问修饰符 | 可修改 | 一定不能做更严格的限制（可以降低限制） | | 发生阶段 | 编译期 | 运行期 |\n     \n     ⭐️ 关于 重写的返回值类型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。\n\n\n 9.  # [深拷贝和浅拷贝](https://developer.aliyun.com/article/617684#:~:text=关于java的深拷贝和浅拷贝，简单来说就是创建一个和已知对象一模一样的对象。,可能日常编码过程中用的不多，但是这是一个面试经常会问的问题，而且了解深拷贝和浅拷贝的原理，对于java中的所谓值传递或者引用传递将会有更深的理解。 1、创建对象的5种方式)。【⭐】\n     \n     浅拷贝：创建一个新对象，然后将当前对象的非静态字段复制到该新对象，如果字段是值类型的，那么对该字段执行复制；如果该字段是引用类型的话，则复制引用但不复制引用的对象。因此，原始对象及其副本引用同一个对象。\n     \n     深拷贝：创建一个新对象，然后将当前对象的非静态字段复制到该新对象，无论该字段是值类型的还是引用类型，都复制独立的一份。当你修改其中一个对象的任何内容时，都不会影响另一个对象的内容。\n\n\n 10. # 面向对象和面向过程的区别。【⭐⭐⭐】\n     \n     两者的主要区别在于解决问题的方式不同：\n     \n     * 面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。\n     * 面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。\n     \n     另外，面向对象开发的程序一般更易维护、易复用、易扩展。\n\n\n 11. # 成员变量与局部变量的区别。【⭐⭐⭐】\n     \n     * 语法形式 ：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\n     * 存储方式 ：从变量在内存中的存储方式来看,如果成员变量是使用 static 修饰的，那么这个成员变量是属于类的，如果没有使用 static 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。\n     * 生存时间 ：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。\n     * 默认值 ：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。\n\n\n 12. # 面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】\n     \n     * 封装：封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。\n     \n     * 继承\n       \n       继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。\n       \n       通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。\n       \n       关于继承如下 3 点请记住：\n       \n       1. 子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。\n       2. 子类可以拥有自己属性和方法，即子类可以对父类进行扩展。\n       3. 子类可以用自己的方式实现父类的方法。（以后介绍）。\n     \n     * 多态\n       \n       多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。\n       \n       多态的特点:\n       \n       * 对象类型和引用类型之间具有继承（类）/实现（接口）的关系；\n       * 引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；\n       * 多态不能调用“只在子类存在但在父类不存在”的方法；\n       * 如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。\n\n\n 13. # string、stringbuffer 和 stringbuilder 的区别。 【⭐⭐⭐⭐】\n     \n     可变性\n     \n     在 java 9 之后，string 、stringbuilder 与 stringbuffer 的实现改用 byte 数组存储字符串。之前用字符数组来存储字符串\n     \n     string 真正不可变有下面几点原因：\n     \n     1. 保存字符串的数组被 final 修饰且为私有的，并且string 类没有提供/暴露修改这个字符串的方法。\n     2. string 类被 final 修饰导致其不能被继承，进而避免了子类破坏 string 不可变。\n     \n     stringbuilder 与 stringbuffer 都继承自 abstractstringbuilder 类，在 abstractstringbuilder 中也是使用字符数组保存字符串，不过没有使用 final 和 private 关键字修饰，最关键的是这个 abstractstringbuilder 类还提供了很多修改字符串的方法比如 append 方法。\n     \n     线程安全性\n     \n     string 中的对象是不可变的，也就可以理解为常量，线程安全。abstractstringbuilder 是 stringbuilder 与 stringbuffer 的公共父类，定义了一些字符串的基本操作，如 expandcapacity、append、insert、indexof 等公共方法。stringbuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。stringbuilder 并没有对方法进行加同步锁，所以是非线程安全的。\n     \n     性能\n     \n     每次对 string 类型进行改变的时候，都会生成一个新的 string 对象，然后将指针指向新的 string 对象。stringbuffer 每次都会对 stringbuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 stringbuilder 相比使用 stringbuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。\n     \n     对于三者使用的总结：\n     \n     1. 操作少量的数据: 适用 string\n     2. 单线程操作字符串缓冲区下操作大量数据: 适用 stringbuilder\n     3. 多线程操作字符串缓冲区下操作大量数据: 适用 stringbuffer\n     \n     对象引用和“+”的字符串拼接方式，实际上是通过 stringbuilder 调用 append() 方法实现的，拼接完成之后调用 tostring() 得到一个 string 对象 。\n\n\n 14. # 字符串常量池的作用了解吗？\n     \n     字符串常量池 是 jvm 为了提升性能和减少内存消耗针对字符串（string 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。\n\n\n 15. # java 异常。【⭐⭐⭐】：不会问的特别细。经常的问法是异常可以分为哪几种，然后你答了可检查异常和不可检查异常以后，会让你举例可检查异常有哪些，不可检查有哪些。然后，异常的代码要会写，有一场字节的面试，直接让我写一个把异常捕获了然后抛出去的代码。\n     \n     在 java 中，所有的异常都有一个共同的祖先 java.lang 包中的 throwable 类。throwable 类有两个重要的子类:\n     \n     * exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。exception 又可以分为 checked exception (受检查异常，必须处理) 和 unchecked exception (不受检查异常，可以不处理)。\n     * error ：error 属于程序无法处理的错误 ，我们没办法通过 catch 来进行捕获 。例如java 虚拟机运行错误（virtual machineerror ）、虚拟机内存不够错误(outofmemoryerror)、类定义错误（noclassdeffounderror）等 。这些异常发生时，java 虚拟机（jvm）一般会选择线程终止。\n     \n     checked exception 即受检查异常，java 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 。\n     \n     除了runtimeexception及其子类以外，其他的exception类及其子类都属于受检查异常 。常见的受检查异常有： io 相关的异常、classnotfoundexception 、sqlexception ...。\n     \n     unchecked exception 即 不受检查异常 ，java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。\n     \n     runtimeexception 及其子类都统称为非受检查异常，例如：nullpointerexception、numberformatexception （字符串转换为数字）、arrayindexoutofboundsexception（数组越界）、classcastexception（类型转换错误）、arithmeticexception（算术错误）等。\n     \n     常见的运行时异常。 运行时异常的概念: 继承自runtimeexception的异常或者其子类， 编译阶段是不会出错的，它是在运行时阶段可能出现的错误， 运行时异常编译阶段可以处理也可以不处理,代码编译都能通过！！\n     \n     1.数组索引越界异常: arrayindexoutofboundsexception。 2.空指针异常 : nullpointerexception。 直接输出没有问题。但是调用空指针的变量的功能就会报错！！ 3.类型转换异常：classcastexception。 4.迭代器遍历没有此元素异常：nosuchelementexception。 5.数学操作异常：arithmeticexception。 6.数字转换异常： numberformatexception。\n     \n     # throwable 类常用方法有哪些？\n     \n     * string getmessage(): 返回异常发生时的简要描述\n     * string tostring(): 返回异常发生时的详细信息\n     * string getlocalizedmessage(): 返回异常对象的本地化信息。使用 throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getmessage()返回的结果相同\n     * void printstacktrace(): 在控制台上打印 throwable 对象封装的异常信息\n     \n     # try-catch-finally 如何使用？\n     \n     * try块： 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。\n     * catch块： 用于处理 try 捕获到的异常。\n     * finally 块： 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。\n     \n     ** 注意：不要在 finally 语句块中使用 return!** 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。\n     \n     # finally 中的代码一定会执行吗？\n     \n     不一定的！在某些情况下，finally 中的代码不会被执行。\n     \n     就比如说 finally 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。\n     \n     另外，在以下 2 种特殊情况下，finally 块的代码也不会被执行：\n     \n     1. 程序所在的线程死亡。\n     2. 关闭 cpu。\n\n\n 16. # 序列化和反序列化【⭐⭐】\n     \n     如果我们需要持久化 java 对象比如将 java 对象保存在文件中，或者在网络传输 java 对象，这些场景都需要用到序列化。\n     \n     简单来说：\n     \n     * 序列化： 将数据结构或对象转换成二进制字节流的过程\n     * 反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程\n     \n     对于 java 这种面向对象编程语言来说，我们序列化的都是对象（object）也就是实例化后的类(class)，但是在 c++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。\n     \n     # java 序列化中如果有些字段不想进行序列化，怎么办？\n     \n     对于不想进行序列化的变量，使用 transient 关键字修饰。\n     \n     transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。\n     \n     关于 transient 还有几点注意：\n     \n     * transient 只能修饰变量，不能修饰类和方法。\n     * transient 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 int 类型，那么反序列后结果就是 0。\n     * static 变量因为不属于任何对象(object)，所以无论有没有 transient 关键字修饰，均不会被序列化。\n\n\n 17. # 反射【⭐⭐】面试官可能会问你什么是反射，它的优缺点是什么，有哪些应用场景。\n     \n     通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\n     \n     反射机制优缺点\n     \n     * 优点 ： 可以让咱们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利\n     * 缺点 ：让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。\n\n\n 18. # list、set、 map 的区别。【⭐⭐】\n     \n     set系列集合：添加的元素是无序，不重复，无索引的。\n     \n     * hashset:添加的元素是无序，不重复，无索引的。\n       * linkedhashset:添加的元素是有序，不重复，无索引的。\n     * treeset:不重复，无索引，按照大小默认升序排序!!\n     \n     list系列集合：添加的元素是有序，可重复，有索引。\n     \n     * arraylist：添加的元素是有序，可重复，有索引。\n     * linkedlist：添加的元素是有序，可重复，有索引。\n     \n     map集合的特点： 1.map集合的特点都是由键决定的。 2.map集合的键是无序,不重复的，无索引的。 map集合后面重复的键对应的元素会覆盖前面的整个元素！ 3.map集合的值无要求。 4.map集合的键值对都可以为null。\n\n\n 19. # arraylist 和 linkedlist 的区别。【⭐⭐⭐⭐】：答清楚每个分别采用什么数据结构，对比相应的优点和缺点。\n     \n     arraylist:：底层基于数组存储数据的，查询快，增删慢！！\n     \n     linkedlist：底层是基于双链表的，增删比较快，查询慢！！ linkedlist是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的\n\n\n 20. # 比较 hashset、linkedhashset 和 treeset 三者的异同。【⭐⭐⭐】\n     \n     如果希望元素可以重复，又有索引，查询要快用arraylist集合。（用的最多） 如果希望元素可以重复，又有索引，增删要快要用linkedlist集合。（适合查询元素比较少的情况，经常要首尾操作元素的情况） 如果希望增删改查都很快，但是元素不重复以及无序无索引，那么用hashset集合。 如果希望增删改查都很快且有序，但是元素不重复以及无索引，那么用linkedhashset集合。\n     \n     # treeset\n     \n     底层基于treemap实现\n\n\n 21. # hashmap 多线程操作导致死循环问题。【⭐⭐⭐】jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 hashmap,因为多线程下使用 hashmap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 concurrenthashmap 。\n\n\n 22. # hashmap 的长度为什么是 2 的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。\n\n\n 23. # hashmap、hashtable、以及 concurrenthashmap 的区别。【⭐⭐⭐⭐⭐】\n     \n     1. 线程是否安全： hashmap 是非线程安全的，hashtable 是线程安全的,因为 hashtable 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话就使用 concurrenthashmap 吧！）；\n     2. 效率： 因为线程安全的问题，hashmap 要比 hashtable 效率高一点。另外，hashtable 基本被淘汰，不要在代码中使用它；\n     3. 对 null key 和 null value 的支持： hashmap 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；hashtable 不允许有 null 键和 null 值，否则会抛出 nullpointerexception。\n     4. 初始容量大小和每次扩充容量大小的不同 ： ① 创建时如果不指定容量初始值，hashtable 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。hashmap 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 hashtable 会直接使用你给定的大小，而 hashmap 会将其扩充为 2 的幂次方大小（hashmap 中的tablesizefor()方法保证，下面给出了源代码）。也就是说 hashmap 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。\n     5. 底层数据结构： jdk1.8 以后的 hashmap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。hashtable 没有这样的机制。\n     \n     concurrenthashmap 和 hashtable 的区别主要体现在实现线程安全的方式上不同。\n     \n     * 底层数据结构： jdk1.7 的 concurrenthashmap 底层采用 分段的数组+链表 实现，jdk1.8 采用的数据结构跟 hashmap1.8 的结构一样，数组+链表/红黑二叉树。hashtable 和 jdk1.8 之前的 hashmap 的底层数据结构类似都是采用 数组+链表 的形式，数组是 hashmap 的主体，链表则是主要为了解决哈希冲突而存在的；\n     * 实现线程安全的方式（重要）： ① 在 jdk1.7 的时候，concurrenthashmap（分段锁） 对整个桶数组进行了分割分段(segment) ，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。 到了 jdk1.8 的时候已经摒弃了 segment 的概念，而是直接用 node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 cas 来操作。（jdk1.6 以后 对 synchronized 锁做了很多优化） 整个看起来就像是优化过且线程安全的 hashmap，虽然在 jdk1.8 中还能看到 segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；② hashtable(同一把锁) : 使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。\n\n\n 24. # queue 与 deque 的区别\n     \n     queue 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 先进先出（fifo） 规则。\n     \n     queue 扩展了 collection 的接口，根据 因为容量问题而导致操作失败后处理方式的不同 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。\n     \n     | queue 接口 | 抛出异常 | 返回特殊值 | | ------------ | --------- | ---------- | | 插入队尾 | add(e e) | offer(e e) | | 删除队首 | remove() | poll() | | 查询队首元素 | element() | peek() |\n     \n     deque实现了queue接口是双端队列，在队列的两端均可以插入或删除元素。\n     \n     deque 扩展了 queue 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：\n     \n     | deque 接口 | 抛出异常 | 返回特殊值 | | ------------ | ------------- | --------------- | | 插入队首 | addfirst(e e) | offerfirst(e e) | | 插入队尾 | addlast(e e) | offerlast(e e) | | 删除队首 | removefirst() | pollfirst() | | 删除队尾 | removelast() | polllast() | | 查询队首元素 | getfirst() | peekfirst() | | 查询队尾元素 | getlast() | peeklast() |\n     \n     事实上，deque 还提供有 push() 和 pop() 等其他方法，可用于模拟栈。",charsets:{cjk:!0},lastUpdated:"2022/04/07, 20:28:38",lastUpdatedTimestamp:1649334518e3},{title:"JVM",frontmatter:{title:"JVM",date:"2022-04-10T11:41:43.000Z",permalink:"/pages/649cb6/"},regularPath:"/01.%E5%9F%BA%E7%A1%80/01.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/04.JVM.html",relativePath:"01.基础/01.基础知识/04.JVM.md",key:"v-aa01d20a",path:"/pages/649cb6/",headers:[{level:2,title:"1 JVM内存结构",slug:"_1-jvm内存结构",normalizedTitle:"1 jvm内存结构",charIndex:2},{level:3,title:"1.1 运行时数据区",slug:"_1-1-运行时数据区",normalizedTitle:"1.1 运行时数据区",charIndex:425},{level:4,title:"线程共享",slug:"线程共享",normalizedTitle:"线程共享",charIndex:555},{level:4,title:"线程隔离（线程私有）",slug:"线程隔离-线程私有",normalizedTitle:"线程隔离（线程私有）",charIndex:2651},{level:3,title:"1.2 HotSpot虚拟机对象探秘",slug:"_1-2-hotspot虚拟机对象探秘",normalizedTitle:"1.2 hotspot虚拟机对象探秘",charIndex:4633},{level:4,title:"对象的创建",slug:"对象的创建",normalizedTitle:"对象的创建",charIndex:4655},{level:5,title:"Step1:类加载检查",slug:"step1-类加载检查",normalizedTitle:"step1:类加载检查",charIndex:4666},{level:5,title:"Step2:分配内存",slug:"step2-分配内存",normalizedTitle:"step2:分配内存",charIndex:4782},{level:5,title:"Step3:初始化零值",slug:"step3-初始化零值",normalizedTitle:"step3:初始化零值",charIndex:5438},{level:5,title:"Step4:设置对象头",slug:"step4-设置对象头",normalizedTitle:"step4:设置对象头",charIndex:5553},{level:5,title:"Step5:执行 init 方法",slug:"step5-执行-init-方法",normalizedTitle:"step5:执行 init 方法",charIndex:5700},{level:4,title:"对象的内存布局",slug:"对象的内存布局",normalizedTitle:"对象的内存布局",charIndex:5897},{level:5,title:"Header",slug:"header",normalizedTitle:"header",charIndex:5949},{level:5,title:"实例数据部分",slug:"实例数据部分",normalizedTitle:"实例数据部分",charIndex:6395},{level:5,title:"对齐填充",slug:"对齐填充",normalizedTitle:"对齐填充",charIndex:5983},{level:4,title:"对象的访问定位",slug:"对象的访问定位",normalizedTitle:"对象的访问定位",charIndex:6779},{level:5,title:"句柄访问",slug:"句柄访问",normalizedTitle:"句柄访问",charIndex:6951},{level:5,title:"直接指针访问",slug:"直接指针访问",normalizedTitle:"直接指针访问",charIndex:7050},{level:2,title:"2 JVM垃圾回收",slug:"_2-jvm垃圾回收",normalizedTitle:"2 jvm垃圾回收",charIndex:7304},{level:3,title:"2.1 垃圾回收机制",slug:"_2-1-垃圾回收机制",normalizedTitle:"2.1 垃圾回收机制",charIndex:7348},{level:3,title:"2.2 对象是否死亡的判断",slug:"_2-2-对象是否死亡的判断",normalizedTitle:"2.2 对象是否死亡的判断",charIndex:7924},{level:4,title:"引用计数器",slug:"引用计数器",normalizedTitle:"引用计数器",charIndex:7998},{level:4,title:"可达性分析",slug:"可达性分析",normalizedTitle:"可达性分析",charIndex:8149},{level:3,title:"2.3 引用",slug:"_2-3-引用",normalizedTitle:"2.3 引用",charIndex:8703},{level:3,title:"2.4 垃圾收集算法",slug:"_2-4-垃圾收集算法",normalizedTitle:"2.4 垃圾收集算法",charIndex:9822},{level:4,title:"标记-清除算法",slug:"标记-清除算法",normalizedTitle:"标记-清除算法",charIndex:9836},{level:4,title:"标记-复制算法",slug:"标记-复制算法",normalizedTitle:"标记-复制算法",charIndex:9989},{level:4,title:"标记-整理算法",slug:"标记-整理算法",normalizedTitle:"标记-整理算法",charIndex:10121},{level:4,title:"分代收集算法",slug:"分代收集算法",normalizedTitle:"分代收集算法",charIndex:2067},{level:3,title:"2.5 垃圾收集器",slug:"_2-5-垃圾收集器",normalizedTitle:"2.5 垃圾收集器",charIndex:10469},{level:4,title:"Serial 收集器",slug:"serial-收集器",normalizedTitle:"serial 收集器",charIndex:10616},{level:4,title:"ParNew 收集器",slug:"parnew-收集器",normalizedTitle:"parnew 收集器",charIndex:10816},{level:4,title:"Parallel Scavenge 收集器",slug:"parallel-scavenge-收集器",normalizedTitle:"parallel scavenge 收集器",charIndex:11001},{level:4,title:"CMS 收集器",slug:"cms-收集器",normalizedTitle:"cms 收集器",charIndex:10965},{level:4,title:"G1 收集器",slug:"g1-收集器",normalizedTitle:"g1 收集器",charIndex:11916},{level:4,title:"ZGC 收集器",slug:"zgc-收集器",normalizedTitle:"zgc 收集器",charIndex:12654},{level:2,title:"3 类加载的过程",slug:"_3-类加载的过程",normalizedTitle:"3 类加载的过程",charIndex:12759},{level:3,title:"3.1 加载",slug:"_3-1-加载",normalizedTitle:"3.1 加载",charIndex:12860},{level:3,title:"3.2 连接",slug:"_3-2-连接",normalizedTitle:"3.2 连接",charIndex:13098},{level:4,title:"验证",slug:"验证",normalizedTitle:"验证",charIndex:12807},{level:4,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:9567},{level:4,title:"解析",slug:"解析",normalizedTitle:"解析",charIndex:4750},{level:3,title:"3.3 初始化",slug:"_3-3-初始化",normalizedTitle:"3.3 初始化",charIndex:14403},{level:3,title:"3.4 结束生命周期",slug:"_3-4-结束生命周期",normalizedTitle:"3.4 结束生命周期",charIndex:14629},{level:2,title:"4 类加载器",slug:"_4-类加载器",normalizedTitle:"4 类加载器",charIndex:14758},{level:3,title:"4.1 启动类/引导类：Bootstrap ClassLoader",slug:"_4-1-启动类-引导类-bootstrap-classloader",normalizedTitle:"4.1 启动类/引导类：bootstrap classloader",charIndex:15167},{level:3,title:"4.2 扩展类加载器：Extension ClassLoader",slug:"_4-2-扩展类加载器-extension-classloader",normalizedTitle:"4.2 扩展类加载器：extension classloader",charIndex:15472},{level:3,title:"4.3 应用程序类加载器：Application Classloader",slug:"_4-3-应用程序类加载器-application-classloader",normalizedTitle:"4.3 应用程序类加载器：application classloader",charIndex:15714},{level:3,title:"4.4 自定义加载器",slug:"_4-4-自定义加载器",normalizedTitle:"4.4 自定义加载器",charIndex:15994},{level:2,title:"5 加载机制",slug:"_5-加载机制",normalizedTitle:"5 加载机制",charIndex:16128},{level:3,title:"5.1 双亲委派模型",slug:"_5-1-双亲委派模型",normalizedTitle:"5.1 双亲委派模型",charIndex:16231},{level:3,title:"5.2 反向委派机制",slug:"_5-2-反向委派机制",normalizedTitle:"5.2 反向委派机制",charIndex:16800},{level:2,title:"6 JVM参数",slug:"_6-jvm参数",normalizedTitle:"6 jvm参数",charIndex:17370},{level:3,title:"6.1 堆内存相关",slug:"_6-1-堆内存相关",normalizedTitle:"6.1 堆内存相关",charIndex:17382},{level:4,title:"显式指定堆内存–Xms和-Xmx",slug:"显式指定堆内存-xms和-xmx",normalizedTitle:"显式指定堆内存–xms和-xmx",charIndex:17492},{level:4,title:"显式新生代内存(Young Generation)",slug:"显式新生代内存-young-generation",normalizedTitle:"显式新生代内存(young generation)",charIndex:17803},{level:4,title:"显式指定永久代/元空间的大小",slug:"显式指定永久代-元空间的大小",normalizedTitle:"显式指定永久代/元空间的大小",charIndex:18604},{level:3,title:"6.2 垃圾收集相关",slug:"_6-2-垃圾收集相关",normalizedTitle:"6.2 垃圾收集相关",charIndex:19135},{level:4,title:"垃圾回收器",slug:"垃圾回收器",normalizedTitle:"垃圾回收器",charIndex:8794},{level:4,title:"GC记录",slug:"gc记录",normalizedTitle:"gc记录",charIndex:19306},{level:2,title:"7 面试问题",slug:"_7-面试问题",normalizedTitle:"7 面试问题",charIndex:19541}],headersStr:"1 JVM内存结构 1.1 运行时数据区 线程共享 线程隔离（线程私有） 1.2 HotSpot虚拟机对象探秘 对象的创建 Step1:类加载检查 Step2:分配内存 Step3:初始化零值 Step4:设置对象头 Step5:执行 init 方法 对象的内存布局 Header 实例数据部分 对齐填充 对象的访问定位 句柄访问 直接指针访问 2 JVM垃圾回收 2.1 垃圾回收机制 2.2 对象是否死亡的判断 引用计数器 可达性分析 2.3 引用 2.4 垃圾收集算法 标记-清除算法 标记-复制算法 标记-整理算法 分代收集算法 2.5 垃圾收集器 Serial 收集器 ParNew 收集器 Parallel Scavenge 收集器 CMS 收集器 G1 收集器 ZGC 收集器 3 类加载的过程 3.1 加载 3.2 连接 验证 准备 解析 3.3 初始化 3.4 结束生命周期 4 类加载器 4.1 启动类/引导类：Bootstrap ClassLoader 4.2 扩展类加载器：Extension ClassLoader 4.3 应用程序类加载器：Application Classloader 4.4 自定义加载器 5 加载机制 5.1 双亲委派模型 5.2 反向委派机制 6 JVM参数 6.1 堆内存相关 显式指定堆内存–Xms和-Xmx 显式新生代内存(Young Generation) 显式指定永久代/元空间的大小 6.2 垃圾收集相关 垃圾回收器 GC记录 7 面试问题",content:'# 1 JVM内存结构\n\n对于从事C、C++程序开发的开发人员来说，在内存管理领域，他们既是拥有最高权力的“皇帝”，又是从事最基础工作的劳动人民——既拥有每一个对象的“所有权”，又担负着每一个对象生命从开始到终结的维护责任。 对于Java程序员来说，在虚拟机自动内存管理机制的帮助下，不再需要为每一个new操作去写配对的delete/free代码，不容易出现内存泄漏和内存溢出问题，看起来由虚拟机管理内存一切都很美好。不过，也正是因为Java程序员把控制内存的权力交给了Java虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那排查错误、修正问题将会成为一项异常艰难的工作。\n\n\n\nJVM包含两个子系统和两个组件，子系统为 Calss Loader(类装载)和Execution engine(执行引擎)，组件为Runtime data area（运行时数据区）和 Native Interface(本地接口)。\n\n\n# 1.1 运行时数据区\n\nJava虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。 这些区域有各自的用途， 以及创建和销毁的时间， 有的区域随着虚拟机进程的启动而一直存在， 有些区域则是依赖用户线程的启动和结束而建立和销毁。\n\n# 线程共享\n\n * 方法区\n   \n   方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，**它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。**虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。\n   \n   对于习惯在HotSpot虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为==“永久代”==（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已。\n   \n   Java虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了==。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，==一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。\n   \n   根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。\n   \n   方法区有时被称为持久代（PermGen）。\n   \n   > 方法区 -> 存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据\n\n * 运行时常量池\n   \n   ==运行时常量池是方法区的一部分==。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）\n   \n   既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。\n   \n   >  1. JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代\n\n>  2. JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。\n>  3. JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)\n\n * 堆\n   \n   对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\n   \n   Java 世界中“几乎”所有的对象都在堆中分配，但是，随着 JIT 编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。从 JDK 1.7 开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。\n   \n   Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。\n   \n   在 JDK 7 版本及 JDK 7 版本之前，堆内存被通常分为下面三部分：\n   \n   1. 新生代内存(Young Generation)\n   2. 老生代(Old Generation)\n   3. 永久代(Permanent Generation)\n   \n   下图所示的 Eden 区、两个 Survivor 区 S0 和 S1 都属于新生代，中间一层属于老年代，最下面一层属于永久代。\n   \n   \n   \n   JDK 8 版本之后 PermGen 已被 Metaspace(元空间) 取代，元空间使用的是直接内存\n   \n   根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。\n   \n   如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。\n   \n   > 堆(GC堆) -> 存放对象实例 -> 垃圾搜集器管理的区域\n\n# 线程隔离（线程私有）\n\n * 程序计数器\n   \n   程序计数器（Program Counter Register）是一块较小的内存空间，==它的作用可以看做是当前线程所执行的字节码的行号指示器==。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n   \n   由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，==每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。==\n   \n   如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。\n   \n   此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。\n   \n   > 程序计数器 -> ==当前线程所执行的字节码的行号指示器==-> 作用：\n   > \n   >  1. 字节码解释器通过改变程序计数器来依次读取指令，从而==实现代码的流程控制==，如：顺序执行、选择、循环、异常处理。\n   >  2. 在多线程的情况下，程序计数器用于==记录当前线程执行的位置==，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。\n\n * 虚拟机栈\n   \n   **与程序计数器一样，Java 虚拟机栈也是线程私有的，它的生命周期和线程相同，==描述的是 Java 方法执行的内存模型==，每次方法调用的数据都是通过栈传递的。**每个方法被执行的时候， Java虚拟机都 会同步创建一个栈帧（Stack Frame） 用于存储局部变量表、 操作数栈、 动态连接、 方法出口等信 息。 每一个方法被调用直至执行完毕的过程， 就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n   \n   Java 内存可以粗糙的区分为堆内存（Heap）和栈内存 (Stack)，其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。 （实际上，Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）\n   \n   局部变量表主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。\n   \n   Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。\n   \n   * StackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。\n   * OutOfMemoryError： Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。\n   \n   > 虚拟机栈 -> ==由一个个栈帧组成== -> 作用：==描述Java方法执行的内存模型==\n   > \n   >  * 每个方法被执行的时候， Java虚拟机都会同步创建一个栈帧（Stack Frame） 用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息。 每一个方法被调用直至执行完毕的过程， 就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n * 本地方法栈\n   \n   和虚拟机栈所发挥的作用非常相似，区别是： 虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。\n   \n   本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。\n   \n   方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种错误。\n\n\n# 1.2 HotSpot虚拟机对象探秘\n\n# 对象的创建\n\n\n\n# Step1:类加载检查\n\n虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。\n\n# Step2:分配内存\n\n在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。分配方式有 “指针碰撞” 和 “空闲列表” 两种，选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。\n\n\n\n内存分配的两种方式：（补充内容，需要掌握）\n\n选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是"标记-清除"，还是"标记-整理"（也称作"标记-压缩"），值得注意的是，复制算法内存也是规整的\n\n内存分配并发问题（补充内容，需要掌握）\n\n在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：\n\n * CAS+失败重试： CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。\n * TLAB： 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配\n\n# Step3:初始化零值\n\n内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。\n\n# Step4:设置对象头\n\n初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。\n\n# Step5:执行 init 方法\n\n在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<init> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <init> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。\n\n> ==对象的创建 -> 五个步骤==\n\n# 对象的内存布局\n\n在HotSpot虚拟机里， 对象在堆内存中的存储布局可以划分为三个部分**： 对象头（Header） 、 实例** 数据（Instance Data） 和对齐填充（Padding） 。\n\n# Header\n\n包括两类信息：\n\n * ==用于存储对象自身的运行时数据==， 如哈希码（HashCode） 、 GC分代年龄、 锁状态标志、 线程持有的锁、 偏向线程ID、 偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针） 中分别为32个比特和64个比特， 官方称它为“Mark Word”。 对象需要存储的运行时数据很多， 其实已经超出了32、 64位Bitmap结构所能记录的最大限度， 但对象头里的信息是与对象自身定义的数据无关的额外存储成本， 考虑到虚拟机的空间效率， Mark Word被设计成一个有着动态定义的数据结构， 以便在极小的空间内存储尽量多的数据， 根据对象的状态复用自己的存储空间。\n * 对象头的另外一部分是==类型指针==， ==即对象指向它的类型元数据的指针==， Java虚拟机通过这个指针 来确定该对象是哪个类的实例。\n\n# 实例数据部分\n\n实例数据部分是==对象真正存储的有效信息==， 即我们在程序代码里面所==定义的各种类型的字段内容==， 无论是从父类继承下来的， 还是在子类中定义的字段都必须记录起来。 这部分的存储顺序会受到虚拟机分配策略参数（-XX： FieldsAllocationStyle参数） 和字段在Java源码中定义顺序的影响。\n\n# 对齐填充\n\n这并不是必然存在的， 也没有特别的含义， 它仅仅起着占位符的作用。 由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍， 换句话说就是任何对象的大小都必须是8字节的整数倍。 对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此， 如果对象实例数据部分没有对齐的话， 就需要通过对齐填充来补全。\n\n> ==对象的内存布局 -> 划分为三个部分 -> 每个部分对应的作用==\n\n# 对象的访问定位\n\nJava程序会通过栈上的reference数据来操作堆上的具体对象。 由于reference类型在《Java虚拟机规范》 里面只规定了它是一个指向对象的引用， 并没有定义这个引用应该通过什么方式去定位、 访问到堆中对象的具体位置，所以 对象访问方式也是由虚拟机实现而定的， 主流的访问方式主要有使用句柄和直接指针两种：\n\n# 句柄访问\n\n如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；\n\n\n\n# 直接指针访问\n\n使用直接指针来访问最大的好处就是速度更快， 它节省了一次指针定位的时间开销， 由于对象访 问在Java中非常频繁， 因此这类开销积少成多也是一项极为可观的执行成本，\n\n\n\n> ==对象的访问 -> 两种方式==\n> \n> 这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。\n\n\n# 2 JVM垃圾回收\n\nJava堆是垃圾收集器管理的主要区域，堆的基本结构：\n\n\n\n\n# 2.1 垃圾回收机制\n\n目前主流的垃圾收集器都会采用分代回收算法，因此需要将堆内存分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。\n\n大多数情况下，对象在新生代中 eden 区分配。当 eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC.\n\n大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。大对象直接进入老年代，为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。\n\n既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。\n\n如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄设为 1.对象在 Survivor 中每熬过一次 MinorGC,年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold 来设置。\n\n> 对象优先在eden区分配 -> eden区没有空间，进行MinorGC -> 大对象直接进入老年代\n\n\n# 2.2 对象是否死亡的判断\n\n堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对象）。\n\n# 引用计数器\n\n给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。\n\n这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。\n\n# 可达性分析\n\n这个算法的基本思想就是通过一系列的称为 “GC Roots” 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。\n\n哪些对象可以作为 GC Roots 呢？\n\n * 虚拟机栈(栈帧中的本地变量表)中引用的对象\n * 本地方法栈(Native 方法)中引用的对象\n * 方法区中类静态属性引用的对象\n * 方法区中常量引用的对象\n * 所有被同步锁持有的对象\n\n对象可以被回收，就代表一定会被回收吗？\n\n即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。\n\n被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。\n\n> 对象是否死亡的判断方法 -> 引用计数器、==可达性分析==\n\n\n# 2.3 引用\n\n1．强引用（StrongReference）\n\n以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，垃圾回收器绝不会回收它。当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。\n\n2．软引用（SoftReference）\n\n如果一个对象只具有软引用，那就类似于可有可无的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。\n\n软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA 虚拟机就会把这个软引用加入到与之关联的引用队列中。\n\n3．弱引用（WeakReference）\n\n如果一个对象只具有弱引用，那就类似于可有可无的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。\n\n弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n\n4．虚引用（PhantomReference）\n\n"虚引用"顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。\n\n虚引用主要用来跟踪对象被垃圾回收的活动。\n\n虚引用与软引用和弱引用的一个区别在于： 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。\n\n特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生。\n\n\n# 2.4 垃圾收集算法\n\n# 标记-清除算法\n\n该算法分为“标记”和“清除”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：\n\n 1. 效率问题\n 2. 空间问题（标记清除后会产生大量不连续的碎片）\n\n# 标记-复制算法\n\n为了解决效率问题，“标记-复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。\n\n# 标记-整理算法\n\n根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。\n\n# 分代收集算法\n\n当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。\n\n比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。\n\n\n# 2.5 垃圾收集器\n\n如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。\n\n虽然我们对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为直到现在为止还没有最好的垃圾收集器出现，更加没有万能的垃圾收集器，我们能做的就是根据具体应用场景选择适合自己的垃圾收集器。\n\n# Serial 收集器\n\nSerial（串行）收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ "Stop The World" ），直到它收集结束。\n\n新生代采用标记-复制算法，老年代采用标记-整理算法。\n\n# ParNew 收集器\n\nParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。\n\n它是许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。\n\n# Parallel Scavenge 收集器\n\nParallel Scavenge 收集器也是使用标记-复制算法的多线程收集器，它看上去几乎和 ParNew 都一样。 那么它有什么特别之处呢？\n\nParallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。\n\n# CMS 收集器\n\nCMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。\n\nCMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。\n\n从名字中的Mark Sweep这两个词可以看出，CMS 收集器是一种 “标记-清除”算法实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：\n\n * 初始标记： 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；\n * 并发标记： 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。\n * 重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短\n * 并发清除： 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。\n\n从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：并发收集、低停顿。但是它有下面三个明显的缺点：\n\n * 对 CPU 资源敏感；\n * 无法处理浮动垃圾；\n * 它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。\n\n# G1 收集器\n\nG1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.\n\n被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备以下特点：\n\n * 并行与并发：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。\n * 分代收集：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。\n * 空间整合：与 CMS 的“标记-清理”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。\n * 可预测的停顿：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。\n\nG1 收集器的运作大致分为以下几个步骤：\n\n * 初始标记\n * 并发标记\n * 最终标记\n * 筛选回收\n\nG1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来) 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。\n\n# ZGC 收集器\n\n与 CMS 中的 ParNew 和 G1 类似，ZGC 也采用标记-复制算法，不过 ZGC 对该算法做了重大改进。\n\n在 ZGC 中出现 Stop The World 的情况会更少！\n\n\n# 3 类加载的过程\n\n类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载，验证，准备，解析，初始化,使用,卸载这7个阶段.其中其中验证、准备、解析3个部分统称为连接.\n\n\n\n\n# 3.1 加载\n\n * 通过一个类的全限定名来获取其定义的二进制字节流。\n * 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n * 在Java堆中生成一个代表这个类的 java.lang.Class对象，作为对方法区中这些数据的访问入口。\n\n> 相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为==开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载==。\n\n\n# 3.2 连接\n\n# 验证\n\n==确保被加载类的正确性==\n\n验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：\n\n * 文件格式验证：验证字节流是否符合Class文件格式的规范；例如：是否以 0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。\n * 元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了 java.lang.Object之外。\n * 字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。\n * 符号引用验证：确保解析动作能正确执行。\n\n> 验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用 -Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。\n\n# 准备\n\n为类的 静态变量分配内存，并将其初始化为默认值\n\n需要注意的几点：\n\n * 1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。\n * 2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。\n\n> 这里还需要注意如下几点：\n> \n> 1、对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。\n> \n> 2、对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。\n> \n> 3、对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。\n> \n> 4、如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。\n\n * 3、如果类字段的字段属性表中存在 ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。\n\n# 解析\n\n把类中的符号引用转换为直接引用\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。\n\n直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\n\n\n# 3.3 初始化\n\n==为类的静态变量赋予正确的初始值==，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：\n\n * 声明类变量是指定初始值\n * 使用静态代码块为类变量指定初始值\n\nJVM 初始化步骤\n\n * 1、假如这个类还没有被加载和连接，则程序先加载并连接该类\n * 2、假如该类的直接父类还没有被初始化，则先初始化其直接父类\n * 3、假如类中有初始化语句，则系统依次执行这些初始化语句\n\n\n# 3.4 结束生命周期\n\n在如下几种情况下，Java虚拟机将结束生命周期\n\n * 执行了 System.exit()方法\n * 程序正常执行结束\n * 程序在执行过程中遇到了异常或错误而异常终止\n * 由于操作系统出现错误而导致Java虚拟机进程终止\n\n\n# 4 类加载器\n\nJVM 中内置了三个重要的 ClassLoader，除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承自java.lang.ClassLoader：\n\n 1. BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，负责加载 %JAVA_HOME%/lib目录下的 jar 包和类或者被 -Xbootclasspath参数指定的路径中的所有类。\n 2. ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类，或被 java.ext.dirs 系统变量所指定的路径下的 jar 包。\n 3. AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\n\n\n\n\n# 4.1 启动类/引导类：Bootstrap ClassLoader\n\n> 这个类加载器使用C/C++语言实现的，嵌套在JVM内部，java程序无法直接操作这个类。\n> \n> 它用来加载Java核心类库，如：JAVA_HOME/jre/lib/rt.jar、resources.jar、sun.boot.class.path路径下的包，用于提供jvm运行所需的包。\n> \n> 并不是继承自java.lang.ClassLoader，它没有父类加载器\n> \n> 它加载扩展类加载器和应用程序类加载器，并成为他们的父类加载器\n> \n> 出于安全考虑，启动类只加载包名为：java、javax、sun开头的类\n\n\n# 4.2 扩展类加载器：Extension ClassLoader\n\n> Java语言编写，由sun.misc.Launcher$ExtClassLoader实现，我们可以用Java程序操作这个加载器\n> \n> 派生继承自java.lang.ClassLoader，父类加载器为启动类加载器\n> \n> 从系统属性：java.ext.dirs目录中加载类库，或者从JDK安装目录：jre/lib/ext目录下加载类库。我们就可以将我们自己的包放在以上目录下，就会自动加载进来了。\n\n\n# 4.3 应用程序类加载器：Application Classloader\n\n> Java语言编写，由sun.misc.Launcher$AppClassLoader实现。\n> \n> 派生继承自java.lang.ClassLoader，父类加载器为启动类加载器\n> \n> 它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库，它是程序中默认的类加载器，我们Java程序中的类，都是由它加载完成的。\n> \n> 我们可以通过ClassLoader#getSystemClassLoader()获取并操作这个加载器\n\n\n# 4.4 自定义加载器\n\n> 一般情况下，以上3种加载器能满足我们日常的开发工作，不满足时，我们还可以==自定义加载器==\n> \n> 比如用网络加载Java类，为了保证传输中的安全性，采用了加密操作，那么以上3种加载器就无法加载这个类，这时候就需要自定义加载器\n\n\n# 5 加载机制\n\nJava 虚拟机把描述类的数据从 Class 文件加载到内存中，并对数据进行校验、转化解析和初始化，最终形成可以被虚拟机直接使用的 Java类型，这个过程被称作虚拟机的类加载机制。\n\n\n# 5.1 双亲委派模型\n\njvm对class文件采用的是按需加载的方式，当需要使用该类时，jvm才会将它的class文件加载到内存中产生class对象。\n\n在加载类的时候，是采用的双亲委派机制，即把请求交给父类处理的一种任务委派模式。\n\n\n\n * 工作原理\n   \n   1. 如果一个类加载器接收到了类加载的请求，它自己不会先去加载，会把这个请求委托给父类加载器去执行。\n   2. 如果父类还存在父类加载器，则继续向上委托，一直委托到启动类加载器：Bootstrap ClassLoader\n   3. 如果父类加载器可以完成加载任务，就返回成功结果，如果父类加载失败，就由子类自己去尝试加载，如果子类加载失败就会抛出ClassNotFoundException异常，这就是双亲委派模式\n\n * 优点：\n   \n   双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 java.lang.Object 类的话，那么程序运行的时候，系统就会出现多个不同的 Object 类。\n\n\n# 5.2 反向委派机制\n\n在Java应用中存在着很多服务提供者接口（Service Provider Interface，SPI），这些接口允许第三方为它们提供实现，如常见的 SPI 有 JDBC、JNDI等，这些 SPI 的接口属于 Java 核心库，一般存在rt.jar包中，由Bootstrap类加载器加载。而Bootstrap类加载器无法直接加载SPI的实现类，同时由于双亲委派模式的存在，Bootstrap类加载器也无法反向委托AppClassLoader加载器SPI的实现类。在这种情况下，我们就需要一种特殊的类加载器来加载第三方的类库，而线程上下文类加载器（双亲委派模型的破坏者）就是很好的选择。\n\n从图可知rt.jar核心包是有Bootstrap类加载器加载的，其内包含SPI核心接口类，由于SPI中的类经常需要调用外部实现类的方法，而jdbc.jar包含外部实现类(jdbc.jar存在于classpath路径)无法通过Bootstrap类加载器加载，因此只能委派线程上下文类加载器把jdbc.jar中的实现类加载到内存以便SPI相关类使用。显然这种线程上下文类加载器的加载方式破坏了“双亲委派模型”，它在执行过程中抛弃双亲委派加载链模式，使程序可以逆向使用类加载器，当然这也使得Java类加载器变得更加灵活。\n\n\n\n\n# 6 JVM参数\n\n\n# 6.1 堆内存相关\n\n> Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。\n\n# 显式指定堆内存–Xms和-Xmx\n\n与性能有关的最常见实践之一是根据应用程序要求初始化堆内存。如果我们需要指定最小和最大堆大小（推荐显示指定大小），以下参数可以帮助你实现：\n\n-Xms&lt;heap size>[unit] \n-Xmx&lt;heap size>[unit]\n\n\n * heap size 表示要初始化内存的具体大小。\n * unit 表示要初始化内存的单位。单位为***“ g”*** (GB) 、***“ m”***（MB）、***“ k”***（KB）。\n\n举个栗子🌰，如果我们要为JVM分配最小2 GB和最大5 GB的堆内存大小，我们的参数应该这样来写：\n\n-Xms2G -Xmx5G\n\n\n# 显式新生代内存(Young Generation)\n\n根据Oracle官方文档open in new window，在堆总可用内存配置完成之后，第二大影响因素是为 Young Generation 在堆内存所占的比例。默认情况下，YG 的最小大小为 1310 MB，最大大小为无限制。\n\n一共有两种指定 新生代内存(Young Ceneration)大小的方法：\n\n1.通过-XX:NewSize和-XX:MaxNewSize指定\n\n-XX:NewSize=&lt;young size>[unit] \n-XX:MaxNewSize=&lt;young size>[unit]\n\n\n举个栗子🌰，如果我们要为 新生代分配 最小256m 的内存，最大 1024m的内存我们的参数应该这样来写：\n\n-XX:NewSize=256m\n-XX:MaxNewSize=1024m\n\n\n2.通过-Xmn<young size>[unit]指定\n\n举个栗子🌰，如果我们要为 新生代分配256m的内存（NewSize与MaxNewSize设为一致），我们的参数应该这样来写：\n\n-Xmn256m \n\n\nGC 调优策略中很重要的一条经验总结是这样说的：\n\n> 将新对象预留在新生代，由于 Full GC 的成本远高于 Minor GC，因此尽可能将对象分配在新生代是明智的做法，实际项目中根据 GC 日志分析新生代空间大小分配是否合理，适当通过“-Xmn”命令调节新生代大小，最大限度降低新对象直接进入老年代的情况。\n\n另外，你还可以通过**-XX:NewRatio=<int>**来设置新生代和老年代内存的比值。\n\n比如下面的参数就是设置新生代（包括Eden和两个Survivor区）与老年代的比值为1。也就是说：新生代与老年代所占比值为1：1，新生代占整个堆栈的 1/2。\n\n-XX:NewRatio=1\n\n\n# 显式指定永久代/元空间的大小\n\n从Java 8开始，如果我们没有指定 Metaspace 的大小，随着更多类的创建，虚拟机会耗尽所有可用的系统内存（永久代并不会出现这种情况）。\n\nJDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小\n\n-XX:PermSize=N //方法区 (永久代) 初始大小\n-XX:MaxPermSize=N //方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen\n\n\n相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。\n\nJDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。\n\n下面是一些常用参数：\n\n-XX:MetaspaceSize=N //设置 Metaspace 的初始（和最小大小）\n-XX:MaxMetaspaceSize=N //设置 Metaspace 的最大大小，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。\n\n\n\n# 6.2 垃圾收集相关\n\n# 垃圾回收器\n\nJVM具有四种类型的GC实现：\n\n * 串行垃圾收集器\n * 并行垃圾收集器\n * CMS垃圾收集器\n * G1垃圾收集器\n\n可以使用以下参数声明这些实现：\n\n-XX:+UseSerialGC\n-XX:+UseParallelGC\n-XX:+UseParNewGC\n-XX:+UseG1GC\n\n\n# GC记录\n\n为了严格监控应用程序的运行状况，我们应该始终检查JVM的垃圾回收性能。最简单的方法是以人类可读的格式记录GC活动。\n\n使用以下参数，我们可以记录GC活动：\n\n-XX:+UseGCLogFileRotation \n-XX:NumberOfGCLogFiles=&lt; number of log files > \n-XX:GCLogFileSize=&lt; file size >[ unit ]\n-Xloggc:/path/to/gc.log\n\n\n\n# 7 面试问题\n\n 1.  运行时数据区中包含哪些区域？哪些线程共享？哪些线程独享？【⭐⭐⭐⭐⭐】\n 2.  说一下方法区和永久代的关系。【⭐⭐⭐】\n 3.  讲一下 Java 创建一个对象的过程。【⭐⭐⭐⭐】\n 4.  对象的访问定位的两种方式（句柄和直接指针两种方式）。【⭐⭐⭐⭐⭐】\n 5.  你了解分代理论吗？讲一下 Minor GC、还有 Full GC。【⭐⭐⭐⭐⭐】\n 6.  Java 用什么方法确定哪些对象该被清理？ 讲一下可达性分析算法的流程。【⭐⭐⭐⭐】\n 7.  JDK 中有几种引用类型？分别的特点是什么？【⭐⭐】\n 8.  如何回收方法区？【⭐⭐⭐】\n 9.  标记清楚、标记复制、标记整理分别是怎样清理垃圾的？各有什么优缺点？【⭐⭐⭐⭐⭐】\n 10. JVM 中的安全点和安全区各代表什么？写屏障你了解吗？【⭐⭐⭐⭐】\n 11. 并发标记要解决什么问题？并发标记带来了什么问题？如何解决并发扫描时对象消失问题？【⭐⭐⭐⭐】相关阅读：面试官:你说你熟悉 jvm?那你讲一下并发的可达性分析 。\n 12. 对于 JVM 的垃圾收集器你有什么了解的？【⭐⭐⭐⭐】有时候面试官会问出这种十分开放性的问题，你需要脑子里过一下你对这个大问题下的哪些知识熟悉哪些不熟悉，不熟悉的点一下就过，熟悉的展开讲。在准备校招时，我的一个是阿里 P7 的学姐，给我做过一次模拟面试，问出这个问题时让我有点懵，那么多东西我不知道从哪开始回答呀，就答得很凌乱。模拟面试完我问她这种问题应该从哪开始回答？ 她说她因为不知道我的掌握情况，所以就先问一个大问题，根据我的回答再追问，以后遇到这种问题主要从自己熟悉得方面切入就可以了。后来的面试还真遇到过好几次这种情况，我就答，垃圾收集器的种类有以下几种 Serial，ParNew...现在用的多的还是 CMS 和 G1，CMS 的垃圾收集流程是 xxx，G1 的垃圾收集流程是 xxx，他们特点是...就这样把话题引到 CMS 和 G1 了，只 CMS 和 G1 这部分和面试官讨论十几分钟完全没问题。\n 13. 新生代垃圾收集器有哪些？老年代垃圾收集器有哪些？哪些是单线程垃圾收集器，哪些是多线程垃圾收集器？各有什么特点？各基于哪一种垃圾收集算法？【⭐⭐⭐⭐】\n 14. 讲一下 CMS 垃圾收集器的四个步骤。CMS 有什么缺点？【⭐⭐⭐⭐】\n 15. G1 垃圾收集器的步骤。有什么缺点？【⭐⭐⭐⭐】\n 16. 讲一下内存分配策略？【⭐⭐⭐⭐】\n 17. 虚拟机基础故障处理工具有哪些？【⭐⭐⭐】\n 18. 什么是字节码？类文件结构的组成了解吗？【⭐⭐⭐⭐】\n 19. 类的生命周期？类加载的过程了解么？加载这一步主要做了什么事情？初始化阶段中哪几种情况必须对类初始化？【⭐⭐⭐⭐⭐】\n 20. 讲一下双亲委派模型。【⭐⭐⭐⭐⭐】',normalizedContent:'# 1 jvm内存结构\n\n对于从事c、c++程序开发的开发人员来说，在内存管理领域，他们既是拥有最高权力的“皇帝”，又是从事最基础工作的劳动人民——既拥有每一个对象的“所有权”，又担负着每一个对象生命从开始到终结的维护责任。 对于java程序员来说，在虚拟机自动内存管理机制的帮助下，不再需要为每一个new操作去写配对的delete/free代码，不容易出现内存泄漏和内存溢出问题，看起来由虚拟机管理内存一切都很美好。不过，也正是因为java程序员把控制内存的权力交给了java虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那排查错误、修正问题将会成为一项异常艰难的工作。\n\n\n\njvm包含两个子系统和两个组件，子系统为 calss loader(类装载)和execution engine(执行引擎)，组件为runtime data area（运行时数据区）和 native interface(本地接口)。\n\n\n# 1.1 运行时数据区\n\njava虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。 这些区域有各自的用途， 以及创建和销毁的时间， 有的区域随着虚拟机进程的启动而一直存在， 有些区域则是依赖用户线程的启动和结束而建立和销毁。\n\n# 线程共享\n\n * 方法区\n   \n   方法区（method area）与java堆一样，是各个线程共享的内存区域，**它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。**虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做non-heap（非堆），目的应该是与java堆区分开来。\n   \n   对于习惯在hotspot虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为==“永久代”==（permanent generation），本质上两者并不等价，仅仅是因为hotspot虚拟机的设计团队选择把gc分代收集扩展至方法区，或者说使用永久代来实现方法区而已。\n   \n   java虚拟机规范对这个区域的限制非常宽松，除了和java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了==。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，==一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。\n   \n   根据java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出outofmemoryerror异常。\n   \n   方法区有时被称为持久代（permgen）。\n   \n   > 方法区 -> 存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据\n\n * 运行时常量池\n   \n   ==运行时常量池是方法区的一部分==。class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）\n   \n   既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 outofmemoryerror 错误。\n   \n   >  1. jdk1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代\n\n>  2. jdk1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。\n>  3. jdk1.8 hotspot 移除了永久代用元空间(metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(metaspace)\n\n * 堆\n   \n   对于大多数应用来说，java堆（java heap）是java虚拟机所管理的内存中最大的一块。java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\n   \n   java 世界中“几乎”所有的对象都在堆中分配，但是，随着 jit 编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。从 jdk 1.7 开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。\n   \n   java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“gc堆”。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以java堆中还可以细分为：新生代和老年代；再细致一点的有eden空间、from survivor空间、to survivor空间等。\n   \n   在 jdk 7 版本及 jdk 7 版本之前，堆内存被通常分为下面三部分：\n   \n   1. 新生代内存(young generation)\n   2. 老生代(old generation)\n   3. 永久代(permanent generation)\n   \n   下图所示的 eden 区、两个 survivor 区 s0 和 s1 都属于新生代，中间一层属于老年代，最下面一层属于永久代。\n   \n   \n   \n   jdk 8 版本之后 permgen 已被 metaspace(元空间) 取代，元空间使用的是直接内存\n   \n   根据java虚拟机规范的规定，java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-xmx和-xms控制）。\n   \n   如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出outofmemoryerror异常。\n   \n   > 堆(gc堆) -> 存放对象实例 -> 垃圾搜集器管理的区域\n\n# 线程隔离（线程私有）\n\n * 程序计数器\n   \n   程序计数器（program counter register）是一块较小的内存空间，==它的作用可以看做是当前线程所执行的字节码的行号指示器==。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n   \n   由于java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，==每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。==\n   \n   如果线程正在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是natvie方法，这个计数器值则为空（undefined）。\n   \n   此内存区域是唯一一个在《java虚拟机规范》中没有规定任何outofmemoryerror情况的区域。\n   \n   > 程序计数器 -> ==当前线程所执行的字节码的行号指示器==-> 作用：\n   > \n   >  1. 字节码解释器通过改变程序计数器来依次读取指令，从而==实现代码的流程控制==，如：顺序执行、选择、循环、异常处理。\n   >  2. 在多线程的情况下，程序计数器用于==记录当前线程执行的位置==，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。\n\n * 虚拟机栈\n   \n   **与程序计数器一样，java 虚拟机栈也是线程私有的，它的生命周期和线程相同，==描述的是 java 方法执行的内存模型==，每次方法调用的数据都是通过栈传递的。**每个方法被执行的时候， java虚拟机都 会同步创建一个栈帧（stack frame） 用于存储局部变量表、 操作数栈、 动态连接、 方法出口等信 息。 每一个方法被调用直至执行完毕的过程， 就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n   \n   java 内存可以粗糙的区分为堆内存（heap）和栈内存 (stack)，其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。 （实际上，java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）\n   \n   局部变量表主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。\n   \n   java 虚拟机栈会出现两种错误：stackoverflowerror 和 outofmemoryerror。\n   \n   * stackoverflowerror： 若 java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 java 虚拟机栈的最大深度的时候，就抛出 stackoverflowerror 错误。\n   * outofmemoryerror： java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出outofmemoryerror异常。\n   \n   > 虚拟机栈 -> ==由一个个栈帧组成== -> 作用：==描述java方法执行的内存模型==\n   > \n   >  * 每个方法被执行的时候， java虚拟机都会同步创建一个栈帧（stack frame） 用于存储局部变量表、 操作数栈、 动态链接、 方法出口等信息。 每一个方法被调用直至执行完毕的过程， 就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n * 本地方法栈\n   \n   和虚拟机栈所发挥的作用非常相似，区别是： 虚拟机栈为虚拟机执行 java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 native 方法服务。 在 hotspot 虚拟机中和 java 虚拟机栈合二为一。\n   \n   本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。\n   \n   方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 stackoverflowerror 和 outofmemoryerror 两种错误。\n\n\n# 1.2 hotspot虚拟机对象探秘\n\n# 对象的创建\n\n\n\n# step1:类加载检查\n\n虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。\n\n# step2:分配内存\n\n在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 java 堆中划分出来。分配方式有 “指针碰撞” 和 “空闲列表” 两种，选择哪种分配方式由 java 堆是否规整决定，而 java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。\n\n\n\n内存分配的两种方式：（补充内容，需要掌握）\n\n选择以上两种方式中的哪一种，取决于 java 堆内存是否规整。而 java 堆内存是否规整，取决于 gc 收集器的算法是"标记-清除"，还是"标记-整理"（也称作"标记-压缩"），值得注意的是，复制算法内存也是规整的\n\n内存分配并发问题（补充内容，需要掌握）\n\n在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：\n\n * cas+失败重试： cas 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。虚拟机采用 cas 配上失败重试的方式保证更新操作的原子性。\n * tlab： 为每一个线程预先在 eden 区分配一块儿内存，jvm 在给线程中的对象分配内存时，首先在 tlab 分配，当对象大于 tlab 中的剩余内存或 tlab 的内存已用尽时，再采用上述的 cas 进行内存分配\n\n# step3:初始化零值\n\n内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。\n\n# step4:设置对象头\n\n初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 gc 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。\n\n# step5:执行 init 方法\n\n在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 java 程序的视角来看，对象创建才刚开始，<init> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <init> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。\n\n> ==对象的创建 -> 五个步骤==\n\n# 对象的内存布局\n\n在hotspot虚拟机里， 对象在堆内存中的存储布局可以划分为三个部分**： 对象头（header） 、 实例** 数据（instance data） 和对齐填充（padding） 。\n\n# header\n\n包括两类信息：\n\n * ==用于存储对象自身的运行时数据==， 如哈希码（hashcode） 、 gc分代年龄、 锁状态标志、 线程持有的锁、 偏向线程id、 偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针） 中分别为32个比特和64个比特， 官方称它为“mark word”。 对象需要存储的运行时数据很多， 其实已经超出了32、 64位bitmap结构所能记录的最大限度， 但对象头里的信息是与对象自身定义的数据无关的额外存储成本， 考虑到虚拟机的空间效率， mark word被设计成一个有着动态定义的数据结构， 以便在极小的空间内存储尽量多的数据， 根据对象的状态复用自己的存储空间。\n * 对象头的另外一部分是==类型指针==， ==即对象指向它的类型元数据的指针==， java虚拟机通过这个指针 来确定该对象是哪个类的实例。\n\n# 实例数据部分\n\n实例数据部分是==对象真正存储的有效信息==， 即我们在程序代码里面所==定义的各种类型的字段内容==， 无论是从父类继承下来的， 还是在子类中定义的字段都必须记录起来。 这部分的存储顺序会受到虚拟机分配策略参数（-xx： fieldsallocationstyle参数） 和字段在java源码中定义顺序的影响。\n\n# 对齐填充\n\n这并不是必然存在的， 也没有特别的含义， 它仅仅起着占位符的作用。 由于hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍， 换句话说就是任何对象的大小都必须是8字节的整数倍。 对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此， 如果对象实例数据部分没有对齐的话， 就需要通过对齐填充来补全。\n\n> ==对象的内存布局 -> 划分为三个部分 -> 每个部分对应的作用==\n\n# 对象的访问定位\n\njava程序会通过栈上的reference数据来操作堆上的具体对象。 由于reference类型在《java虚拟机规范》 里面只规定了它是一个指向对象的引用， 并没有定义这个引用应该通过什么方式去定位、 访问到堆中对象的具体位置，所以 对象访问方式也是由虚拟机实现而定的， 主流的访问方式主要有使用句柄和直接指针两种：\n\n# 句柄访问\n\n如果使用句柄的话，那么 java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；\n\n\n\n# 直接指针访问\n\n使用直接指针来访问最大的好处就是速度更快， 它节省了一次指针定位的时间开销， 由于对象访 问在java中非常频繁， 因此这类开销积少成多也是一项极为可观的执行成本，\n\n\n\n> ==对象的访问 -> 两种方式==\n> \n> 这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。\n\n\n# 2 jvm垃圾回收\n\njava堆是垃圾收集器管理的主要区域，堆的基本结构：\n\n\n\n\n# 2.1 垃圾回收机制\n\n目前主流的垃圾收集器都会采用分代回收算法，因此需要将堆内存分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。\n\n大多数情况下，对象在新生代中 eden 区分配。当 eden 区没有足够空间进行分配时，虚拟机将发起一次 minor gc.\n\n大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。大对象直接进入老年代，为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。\n\n既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（age）计数器。\n\n如果对象在 eden 出生并经过第一次 minor gc 后仍然能够存活，并且能被 survivor 容纳的话，将被移动到 survivor 空间中，并将对象年龄设为 1.对象在 survivor 中每熬过一次 minorgc,年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 -xx:maxtenuringthreshold 来设置。\n\n> 对象优先在eden区分配 -> eden区没有空间，进行minorgc -> 大对象直接进入老年代\n\n\n# 2.2 对象是否死亡的判断\n\n堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对象）。\n\n# 引用计数器\n\n给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。\n\n这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。\n\n# 可达性分析\n\n这个算法的基本思想就是通过一系列的称为 “gc roots” 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 gc roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。\n\n哪些对象可以作为 gc roots 呢？\n\n * 虚拟机栈(栈帧中的本地变量表)中引用的对象\n * 本地方法栈(native 方法)中引用的对象\n * 方法区中类静态属性引用的对象\n * 方法区中常量引用的对象\n * 所有被同步锁持有的对象\n\n对象可以被回收，就代表一定会被回收吗？\n\n即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。\n\n被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。\n\n> 对象是否死亡的判断方法 -> 引用计数器、==可达性分析==\n\n\n# 2.3 引用\n\n1．强引用（strongreference）\n\n以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，垃圾回收器绝不会回收它。当内存空间不足，java 虚拟机宁愿抛出 outofmemoryerror 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。\n\n2．软引用（softreference）\n\n如果一个对象只具有软引用，那就类似于可有可无的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。\n\n软引用可以和一个引用队列（referencequeue）联合使用，如果软引用所引用的对象被垃圾回收，java 虚拟机就会把这个软引用加入到与之关联的引用队列中。\n\n3．弱引用（weakreference）\n\n如果一个对象只具有弱引用，那就类似于可有可无的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。\n\n弱引用可以和一个引用队列（referencequeue）联合使用，如果弱引用所引用的对象被垃圾回收，java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n\n4．虚引用（phantomreference）\n\n"虚引用"顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。\n\n虚引用主要用来跟踪对象被垃圾回收的活动。\n\n虚引用与软引用和弱引用的一个区别在于： 虚引用必须和引用队列（referencequeue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。\n\n特别注意，在程序设计中一般很少使用弱引用与虚引用，使用软引用的情况较多，这是因为软引用可以加速 jvm 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（outofmemory）等问题的产生。\n\n\n# 2.4 垃圾收集算法\n\n# 标记-清除算法\n\n该算法分为“标记”和“清除”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：\n\n 1. 效率问题\n 2. 空间问题（标记清除后会产生大量不连续的碎片）\n\n# 标记-复制算法\n\n为了解决效率问题，“标记-复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。\n\n# 标记-整理算法\n\n根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。\n\n# 分代收集算法\n\n当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。\n\n比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。\n\n\n# 2.5 垃圾收集器\n\n如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。\n\n虽然我们对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为直到现在为止还没有最好的垃圾收集器出现，更加没有万能的垃圾收集器，我们能做的就是根据具体应用场景选择适合自己的垃圾收集器。\n\n# serial 收集器\n\nserial（串行）收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ "stop the world" ），直到它收集结束。\n\n新生代采用标记-复制算法，老年代采用标记-整理算法。\n\n# parnew 收集器\n\nparnew 收集器其实就是 serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 serial 收集器完全一样。\n\n它是许多运行在 server 模式下的虚拟机的首要选择，除了 serial 收集器外，只有它能与 cms 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。\n\n# parallel scavenge 收集器\n\nparallel scavenge 收集器也是使用标记-复制算法的多线程收集器，它看上去几乎和 parnew 都一样。 那么它有什么特别之处呢？\n\nparallel scavenge 收集器关注点是吞吐量（高效率的利用 cpu）。cms 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是 cpu 中用于运行用户代码的时间与 cpu 总消耗时间的比值。\n\n# cms 收集器\n\ncms（concurrent mark sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。\n\ncms（concurrent mark sweep）收集器是 hotspot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。\n\n从名字中的mark sweep这两个词可以看出，cms 收集器是一种 “标记-清除”算法实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：\n\n * 初始标记： 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；\n * 并发标记： 同时开启 gc 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 gc 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。\n * 重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短\n * 并发清除： 开启用户线程，同时 gc 线程开始对未标记的区域做清扫。\n\n从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：并发收集、低停顿。但是它有下面三个明显的缺点：\n\n * 对 cpu 资源敏感；\n * 无法处理浮动垃圾；\n * 它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。\n\n# g1 收集器\n\ng1 (garbage-first) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 gc 停顿时间要求的同时,还具备高吞吐量性能特征.\n\n被视为 jdk1.7 中 hotspot 虚拟机的一个重要进化特征。它具备以下特点：\n\n * 并行与并发：g1 能充分利用 cpu、多核环境下的硬件优势，使用多个 cpu（cpu 或者 cpu 核心）来缩短 stop-the-world 停顿时间。部分其他收集器原本需要停顿 java 线程执行的 gc 动作，g1 收集器仍然可以通过并发的方式让 java 程序继续执行。\n * 分代收集：虽然 g1 可以不需要其他收集器配合就能独立管理整个 gc 堆，但是还是保留了分代的概念。\n * 空间整合：与 cms 的“标记-清理”算法不同，g1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。\n * 可预测的停顿：这是 g1 相对于 cms 的另一个大优势，降低停顿时间是 g1 和 cms 共同的关注点，但 g1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 m 毫秒的时间片段内。\n\ng1 收集器的运作大致分为以下几个步骤：\n\n * 初始标记\n * 并发标记\n * 最终标记\n * 筛选回收\n\ng1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 region(这也就是它的名字 garbage-first 的由来) 。这种使用 region 划分内存空间以及有优先级的区域回收方式，保证了 g1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。\n\n# zgc 收集器\n\n与 cms 中的 parnew 和 g1 类似，zgc 也采用标记-复制算法，不过 zgc 对该算法做了重大改进。\n\n在 zgc 中出现 stop the world 的情况会更少！\n\n\n# 3 类加载的过程\n\n类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载，验证，准备，解析，初始化,使用,卸载这7个阶段.其中其中验证、准备、解析3个部分统称为连接.\n\n\n\n\n# 3.1 加载\n\n * 通过一个类的全限定名来获取其定义的二进制字节流。\n * 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n * 在java堆中生成一个代表这个类的 java.lang.class对象，作为对方法区中这些数据的访问入口。\n\n> 相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为==开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载==。\n\n\n# 3.2 连接\n\n# 验证\n\n==确保被加载类的正确性==\n\n验证是连接阶段的第一步，这一阶段的目的是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：\n\n * 文件格式验证：验证字节流是否符合class文件格式的规范；例如：是否以 0xcafebabe开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。\n * 元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合java语言规范的要求；例如：这个类是否有父类，除了 java.lang.object之外。\n * 字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。\n * 符号引用验证：确保解析动作能正确执行。\n\n> 验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用 -xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。\n\n# 准备\n\n为类的 静态变量分配内存，并将其初始化为默认值\n\n需要注意的几点：\n\n * 1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在java堆中。\n * 2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0l、null、false等），而不是被在java代码中被显式地赋予的值。\n\n> 这里还需要注意如下几点：\n> \n> 1、对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。\n> \n> 2、对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。\n> \n> 3、对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。\n> \n> 4、如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。\n\n * 3、如果类字段的字段属性表中存在 constantvalue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为constvalue属性所指定的值。\n\n# 解析\n\n把类中的符号引用转换为直接引用\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。\n\n直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\n\n\n# 3.3 初始化\n\n==为类的静态变量赋予正确的初始值==，jvm负责对类进行初始化，主要对类变量进行初始化。在java中对类变量进行初始值设定有两种方式：\n\n * 声明类变量是指定初始值\n * 使用静态代码块为类变量指定初始值\n\njvm 初始化步骤\n\n * 1、假如这个类还没有被加载和连接，则程序先加载并连接该类\n * 2、假如该类的直接父类还没有被初始化，则先初始化其直接父类\n * 3、假如类中有初始化语句，则系统依次执行这些初始化语句\n\n\n# 3.4 结束生命周期\n\n在如下几种情况下，java虚拟机将结束生命周期\n\n * 执行了 system.exit()方法\n * 程序正常执行结束\n * 程序在执行过程中遇到了异常或错误而异常终止\n * 由于操作系统出现错误而导致java虚拟机进程终止\n\n\n# 4 类加载器\n\njvm 中内置了三个重要的 classloader，除了 bootstrapclassloader 其他类加载器均由 java 实现且全部继承自java.lang.classloader：\n\n 1. bootstrapclassloader(启动类加载器) ：最顶层的加载类，由 c++实现，负责加载 %java_home%/lib目录下的 jar 包和类或者被 -xbootclasspath参数指定的路径中的所有类。\n 2. extensionclassloader(扩展类加载器) ：主要负责加载 %jre_home%/lib/ext 目录下的 jar 包和类，或被 java.ext.dirs 系统变量所指定的路径下的 jar 包。\n 3. appclassloader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。\n\n\n\n\n# 4.1 启动类/引导类：bootstrap classloader\n\n> 这个类加载器使用c/c++语言实现的，嵌套在jvm内部，java程序无法直接操作这个类。\n> \n> 它用来加载java核心类库，如：java_home/jre/lib/rt.jar、resources.jar、sun.boot.class.path路径下的包，用于提供jvm运行所需的包。\n> \n> 并不是继承自java.lang.classloader，它没有父类加载器\n> \n> 它加载扩展类加载器和应用程序类加载器，并成为他们的父类加载器\n> \n> 出于安全考虑，启动类只加载包名为：java、javax、sun开头的类\n\n\n# 4.2 扩展类加载器：extension classloader\n\n> java语言编写，由sun.misc.launcher$extclassloader实现，我们可以用java程序操作这个加载器\n> \n> 派生继承自java.lang.classloader，父类加载器为启动类加载器\n> \n> 从系统属性：java.ext.dirs目录中加载类库，或者从jdk安装目录：jre/lib/ext目录下加载类库。我们就可以将我们自己的包放在以上目录下，就会自动加载进来了。\n\n\n# 4.3 应用程序类加载器：application classloader\n\n> java语言编写，由sun.misc.launcher$appclassloader实现。\n> \n> 派生继承自java.lang.classloader，父类加载器为启动类加载器\n> \n> 它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库，它是程序中默认的类加载器，我们java程序中的类，都是由它加载完成的。\n> \n> 我们可以通过classloader#getsystemclassloader()获取并操作这个加载器\n\n\n# 4.4 自定义加载器\n\n> 一般情况下，以上3种加载器能满足我们日常的开发工作，不满足时，我们还可以==自定义加载器==\n> \n> 比如用网络加载java类，为了保证传输中的安全性，采用了加密操作，那么以上3种加载器就无法加载这个类，这时候就需要自定义加载器\n\n\n# 5 加载机制\n\njava 虚拟机把描述类的数据从 class 文件加载到内存中，并对数据进行校验、转化解析和初始化，最终形成可以被虚拟机直接使用的 java类型，这个过程被称作虚拟机的类加载机制。\n\n\n# 5.1 双亲委派模型\n\njvm对class文件采用的是按需加载的方式，当需要使用该类时，jvm才会将它的class文件加载到内存中产生class对象。\n\n在加载类的时候，是采用的双亲委派机制，即把请求交给父类处理的一种任务委派模式。\n\n\n\n * 工作原理\n   \n   1. 如果一个类加载器接收到了类加载的请求，它自己不会先去加载，会把这个请求委托给父类加载器去执行。\n   2. 如果父类还存在父类加载器，则继续向上委托，一直委托到启动类加载器：bootstrap classloader\n   3. 如果父类加载器可以完成加载任务，就返回成功结果，如果父类加载失败，就由子类自己去尝试加载，如果子类加载失败就会抛出classnotfoundexception异常，这就是双亲委派模式\n\n * 优点：\n   \n   双亲委派模型保证了 java 程序的稳定运行，可以避免类的重复加载（jvm 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 java 的核心 api 不被篡改。如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 java.lang.object 类的话，那么程序运行的时候，系统就会出现多个不同的 object 类。\n\n\n# 5.2 反向委派机制\n\n在java应用中存在着很多服务提供者接口（service provider interface，spi），这些接口允许第三方为它们提供实现，如常见的 spi 有 jdbc、jndi等，这些 spi 的接口属于 java 核心库，一般存在rt.jar包中，由bootstrap类加载器加载。而bootstrap类加载器无法直接加载spi的实现类，同时由于双亲委派模式的存在，bootstrap类加载器也无法反向委托appclassloader加载器spi的实现类。在这种情况下，我们就需要一种特殊的类加载器来加载第三方的类库，而线程上下文类加载器（双亲委派模型的破坏者）就是很好的选择。\n\n从图可知rt.jar核心包是有bootstrap类加载器加载的，其内包含spi核心接口类，由于spi中的类经常需要调用外部实现类的方法，而jdbc.jar包含外部实现类(jdbc.jar存在于classpath路径)无法通过bootstrap类加载器加载，因此只能委派线程上下文类加载器把jdbc.jar中的实现类加载到内存以便spi相关类使用。显然这种线程上下文类加载器的加载方式破坏了“双亲委派模型”，它在执行过程中抛弃双亲委派加载链模式，使程序可以逆向使用类加载器，当然这也使得java类加载器变得更加灵活。\n\n\n\n\n# 6 jvm参数\n\n\n# 6.1 堆内存相关\n\n> java 虚拟机所管理的内存中最大的一块，java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。\n\n# 显式指定堆内存–xms和-xmx\n\n与性能有关的最常见实践之一是根据应用程序要求初始化堆内存。如果我们需要指定最小和最大堆大小（推荐显示指定大小），以下参数可以帮助你实现：\n\n-xms&lt;heap size>[unit] \n-xmx&lt;heap size>[unit]\n\n\n * heap size 表示要初始化内存的具体大小。\n * unit 表示要初始化内存的单位。单位为***“ g”*** (gb) 、***“ m”***（mb）、***“ k”***（kb）。\n\n举个栗子🌰，如果我们要为jvm分配最小2 gb和最大5 gb的堆内存大小，我们的参数应该这样来写：\n\n-xms2g -xmx5g\n\n\n# 显式新生代内存(young generation)\n\n根据oracle官方文档open in new window，在堆总可用内存配置完成之后，第二大影响因素是为 young generation 在堆内存所占的比例。默认情况下，yg 的最小大小为 1310 mb，最大大小为无限制。\n\n一共有两种指定 新生代内存(young ceneration)大小的方法：\n\n1.通过-xx:newsize和-xx:maxnewsize指定\n\n-xx:newsize=&lt;young size>[unit] \n-xx:maxnewsize=&lt;young size>[unit]\n\n\n举个栗子🌰，如果我们要为 新生代分配 最小256m 的内存，最大 1024m的内存我们的参数应该这样来写：\n\n-xx:newsize=256m\n-xx:maxnewsize=1024m\n\n\n2.通过-xmn<young size>[unit]指定\n\n举个栗子🌰，如果我们要为 新生代分配256m的内存（newsize与maxnewsize设为一致），我们的参数应该这样来写：\n\n-xmn256m \n\n\ngc 调优策略中很重要的一条经验总结是这样说的：\n\n> 将新对象预留在新生代，由于 full gc 的成本远高于 minor gc，因此尽可能将对象分配在新生代是明智的做法，实际项目中根据 gc 日志分析新生代空间大小分配是否合理，适当通过“-xmn”命令调节新生代大小，最大限度降低新对象直接进入老年代的情况。\n\n另外，你还可以通过**-xx:newratio=<int>**来设置新生代和老年代内存的比值。\n\n比如下面的参数就是设置新生代（包括eden和两个survivor区）与老年代的比值为1。也就是说：新生代与老年代所占比值为1：1，新生代占整个堆栈的 1/2。\n\n-xx:newratio=1\n\n\n# 显式指定永久代/元空间的大小\n\n从java 8开始，如果我们没有指定 metaspace 的大小，随着更多类的创建，虚拟机会耗尽所有可用的系统内存（永久代并不会出现这种情况）。\n\njdk 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小\n\n-xx:permsize=n //方法区 (永久代) 初始大小\n-xx:maxpermsize=n //方法区 (永久代) 最大大小,超过这个值将会抛出 outofmemoryerror 异常:java.lang.outofmemoryerror: permgen\n\n\n相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。\n\njdk 1.8 的时候，方法区（hotspot 的永久代）被彻底移除了（jdk1.7 就已经开始了），取而代之是元空间，元空间使用的是本地内存。\n\n下面是一些常用参数：\n\n-xx:metaspacesize=n //设置 metaspace 的初始（和最小大小）\n-xx:maxmetaspacesize=n //设置 metaspace 的最大大小，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。\n\n\n\n# 6.2 垃圾收集相关\n\n# 垃圾回收器\n\njvm具有四种类型的gc实现：\n\n * 串行垃圾收集器\n * 并行垃圾收集器\n * cms垃圾收集器\n * g1垃圾收集器\n\n可以使用以下参数声明这些实现：\n\n-xx:+useserialgc\n-xx:+useparallelgc\n-xx:+useparnewgc\n-xx:+useg1gc\n\n\n# gc记录\n\n为了严格监控应用程序的运行状况，我们应该始终检查jvm的垃圾回收性能。最简单的方法是以人类可读的格式记录gc活动。\n\n使用以下参数，我们可以记录gc活动：\n\n-xx:+usegclogfilerotation \n-xx:numberofgclogfiles=&lt; number of log files > \n-xx:gclogfilesize=&lt; file size >[ unit ]\n-xloggc:/path/to/gc.log\n\n\n\n# 7 面试问题\n\n 1.  运行时数据区中包含哪些区域？哪些线程共享？哪些线程独享？【⭐⭐⭐⭐⭐】\n 2.  说一下方法区和永久代的关系。【⭐⭐⭐】\n 3.  讲一下 java 创建一个对象的过程。【⭐⭐⭐⭐】\n 4.  对象的访问定位的两种方式（句柄和直接指针两种方式）。【⭐⭐⭐⭐⭐】\n 5.  你了解分代理论吗？讲一下 minor gc、还有 full gc。【⭐⭐⭐⭐⭐】\n 6.  java 用什么方法确定哪些对象该被清理？ 讲一下可达性分析算法的流程。【⭐⭐⭐⭐】\n 7.  jdk 中有几种引用类型？分别的特点是什么？【⭐⭐】\n 8.  如何回收方法区？【⭐⭐⭐】\n 9.  标记清楚、标记复制、标记整理分别是怎样清理垃圾的？各有什么优缺点？【⭐⭐⭐⭐⭐】\n 10. jvm 中的安全点和安全区各代表什么？写屏障你了解吗？【⭐⭐⭐⭐】\n 11. 并发标记要解决什么问题？并发标记带来了什么问题？如何解决并发扫描时对象消失问题？【⭐⭐⭐⭐】相关阅读：面试官:你说你熟悉 jvm?那你讲一下并发的可达性分析 。\n 12. 对于 jvm 的垃圾收集器你有什么了解的？【⭐⭐⭐⭐】有时候面试官会问出这种十分开放性的问题，你需要脑子里过一下你对这个大问题下的哪些知识熟悉哪些不熟悉，不熟悉的点一下就过，熟悉的展开讲。在准备校招时，我的一个是阿里 p7 的学姐，给我做过一次模拟面试，问出这个问题时让我有点懵，那么多东西我不知道从哪开始回答呀，就答得很凌乱。模拟面试完我问她这种问题应该从哪开始回答？ 她说她因为不知道我的掌握情况，所以就先问一个大问题，根据我的回答再追问，以后遇到这种问题主要从自己熟悉得方面切入就可以了。后来的面试还真遇到过好几次这种情况，我就答，垃圾收集器的种类有以下几种 serial，parnew...现在用的多的还是 cms 和 g1，cms 的垃圾收集流程是 xxx，g1 的垃圾收集流程是 xxx，他们特点是...就这样把话题引到 cms 和 g1 了，只 cms 和 g1 这部分和面试官讨论十几分钟完全没问题。\n 13. 新生代垃圾收集器有哪些？老年代垃圾收集器有哪些？哪些是单线程垃圾收集器，哪些是多线程垃圾收集器？各有什么特点？各基于哪一种垃圾收集算法？【⭐⭐⭐⭐】\n 14. 讲一下 cms 垃圾收集器的四个步骤。cms 有什么缺点？【⭐⭐⭐⭐】\n 15. g1 垃圾收集器的步骤。有什么缺点？【⭐⭐⭐⭐】\n 16. 讲一下内存分配策略？【⭐⭐⭐⭐】\n 17. 虚拟机基础故障处理工具有哪些？【⭐⭐⭐】\n 18. 什么是字节码？类文件结构的组成了解吗？【⭐⭐⭐⭐】\n 19. 类的生命周期？类加载的过程了解么？加载这一步主要做了什么事情？初始化阶段中哪几种情况必须对类初始化？【⭐⭐⭐⭐⭐】\n 20. 讲一下双亲委派模型。【⭐⭐⭐⭐⭐】',charsets:{cjk:!0},lastUpdated:"2022/04/10, 11:44:52",lastUpdatedTimestamp:1649562292e3},{title:"MySQL",frontmatter:{title:"MySQL",date:"2022-04-10T11:39:05.000Z",permalink:"/pages/a99400/"},regularPath:"/01.%E5%9F%BA%E7%A1%80/03.%E6%95%B0%E6%8D%AE%E5%BA%93/01.MySQL.html",relativePath:"01.基础/03.数据库/01.MySQL.md",key:"v-404c9778",path:"/pages/a99400/",headers:[{level:2,title:"1 基本概述",slug:"_1-基本概述",normalizedTitle:"1 基本概述",charIndex:2},{level:3,title:"1.1 相关概念",slug:"_1-1-相关概念",normalizedTitle:"1.1 相关概念",charIndex:52},{level:2,title:"2 SQL语句",slug:"_2-sql语句",normalizedTitle:"2 sql语句",charIndex:155},{level:3,title:"2.1 数据操作语言",slug:"_2-1-数据操作语言",normalizedTitle:"2.1 数据操作语言",charIndex:278},{level:3,title:"2.2 数据定义语言",slug:"_2-2-数据定义语言",normalizedTitle:"2.2 数据定义语言",charIndex:541},{level:3,title:"2.3 数据查询语言",slug:"_2-3-数据查询语言",normalizedTitle:"2.3 数据查询语言",charIndex:714},{level:4,title:"2.3.1 简单查询",slug:"_2-3-1-简单查询",normalizedTitle:"2.3.1 简单查询",charIndex:830},{level:4,title:"2.3.2 运算符操作",slug:"_2-3-2-运算符操作",normalizedTitle:"2.3.2 运算符操作",charIndex:1102},{level:4,title:"2.3.3 排序查询 order by",slug:"_2-3-3-排序查询-order-by",normalizedTitle:"2.3.3 排序查询 order by",charIndex:1523},{level:4,title:"2.3.4 聚合查询",slug:"_2-3-4-聚合查询",normalizedTitle:"2.3.4 聚合查询",charIndex:1755},{level:4,title:"2.3.5 分组查询 group by",slug:"_2-3-5-分组查询-group-by",normalizedTitle:"2.3.5 分组查询 group by",charIndex:1834},{level:4,title:"2.3.6 分页显示 limit",slug:"_2-3-6-分页显示-limit",normalizedTitle:"2.3.6 分页显示 limit",charIndex:1930},{level:4,title:"2.3.7 SQL语句的执行顺序",slug:"_2-3-7-sql语句的执行顺序",normalizedTitle:"2.3.7 sql语句的执行顺序",charIndex:2085},{level:3,title:"2.4 数据控制语言",slug:"_2-4-数据控制语言",normalizedTitle:"2.4 数据控制语言",charIndex:2189},{level:4,title:"2.4.1 创建用户",slug:"_2-4-1-创建用户",normalizedTitle:"2.4.1 创建用户",charIndex:2331},{level:4,title:"2.4.2 赋予用户对数据库的权限",slug:"_2-4-2-赋予用户对数据库的权限",normalizedTitle:"2.4.2 赋予用户对数据库的权限",charIndex:2443},{level:4,title:"2.4.3 刷新权限表",slug:"_2-4-3-刷新权限表",normalizedTitle:"2.4.3 刷新权限表",charIndex:2641},{level:4,title:"2.4.5 收回权限",slug:"_2-4-5-收回权限",normalizedTitle:"2.4.5 收回权限",charIndex:2676},{level:3,title:"2.4 事务控制语言",slug:"_2-4-事务控制语言",normalizedTitle:"2.4 事务控制语言",charIndex:2699},{level:2,title:"3 约束",slug:"_3-约束",normalizedTitle:"3 约束",charIndex:2714},{level:3,title:"3.1 主键约束",slug:"_3-1-主键约束",normalizedTitle:"3.1 主键约束",charIndex:2723},{level:3,title:"3.2 唯一约束",slug:"_3-2-唯一约束",normalizedTitle:"3.2 唯一约束",charIndex:3030},{level:3,title:"3.3 NULL 约束",slug:"_3-3-null-约束",normalizedTitle:"3.3 null 约束",charIndex:3065},{level:3,title:"3.4  DEFAULT 约束",slug:"_3-4-default-约束",normalizedTitle:"3.4  default 约束",charIndex:null},{level:3,title:"3.5 自增长约束",slug:"_3-5-自增长约束",normalizedTitle:"3.5 自增长约束",charIndex:3267},{level:3,title:"3.6 外键约束",slug:"_3-6-外键约束",normalizedTitle:"3.6 外键约束",charIndex:3416},{level:2,title:"4 三大范式",slug:"_4-三大范式",normalizedTitle:"4 三大范式",charIndex:3480},{level:2,title:"5 视图",slug:"_5-视图",normalizedTitle:"5 视图",charIndex:4653},{level:3,title:"5.1 创建视图",slug:"_5-1-创建视图",normalizedTitle:"5.1 创建视图",charIndex:4926},{level:3,title:"5.2 查看视图",slug:"_5-2-查看视图",normalizedTitle:"5.2 查看视图",charIndex:4966},{level:3,title:"5.3 更新视图数据与视图的删除",slug:"_5-3-更新视图数据与视图的删除",normalizedTitle:"5.3 更新视图数据与视图的删除",charIndex:4979},{level:2,title:"6 存储过程与存储函数",slug:"_6-存储过程与存储函数",normalizedTitle:"6 存储过程与存储函数",charIndex:5e3},{level:3,title:"6.1 存储过程",slug:"_6-1-存储过程",normalizedTitle:"6.1 存储过程",charIndex:5035},{level:3,title:"6.2 存储函数",slug:"_6-2-存储函数",normalizedTitle:"6.2 存储函数",charIndex:5149},{level:2,title:"7 触发器（事件）",slug:"_7-触发器-事件",normalizedTitle:"7 触发器（事件）",charIndex:5162},{level:2,title:"8 SQL的执行流程",slug:"_8-sql的执行流程",normalizedTitle:"8 sql的执行流程",charIndex:5176},{level:3,title:"8.1 存储引擎",slug:"_8-1-存储引擎",normalizedTitle:"8.1 存储引擎",charIndex:5411},{level:4,title:"锁机制",slug:"锁机制",normalizedTitle:"锁机制",charIndex:5679},{level:4,title:"锁算法",slug:"锁算法",normalizedTitle:"锁算法",charIndex:6182},{level:4,title:"缓冲池",slug:"缓冲池",normalizedTitle:"缓冲池",charIndex:5567},{level:4,title:"Undo 日志",slug:"undo-日志",normalizedTitle:"undo 日志",charIndex:6392},{level:4,title:"redo 日志",slug:"redo-日志",normalizedTitle:"redo 日志",charIndex:6448},{level:4,title:"到此为止，从==执行器开始调用存储引擎==接口做了哪些事情呢？",slug:"到此为止-从-执行器开始调用存储引擎-接口做了哪些事情呢",normalizedTitle:"到此为止，从==执行器开始调用存储引擎==接口做了哪些事情呢？",charIndex:6532},{level:4,title:"bin log 日志文件",slug:"bin-log-日志文件",normalizedTitle:"bin log 日志文件",charIndex:6968},{level:2,title:"9 事务",slug:"_9-事务",normalizedTitle:"9 事务",charIndex:7031},{level:3,title:"9.1 事务的特性",slug:"_9-1-事务的特性",normalizedTitle:"9.1 事务的特性",charIndex:7040},{level:3,title:"9.2 数据事务的实现原理",slug:"_9-2-数据事务的实现原理",normalizedTitle:"9.2 数据事务的实现原理",charIndex:7329},{level:3,title:"9.3 并发事务带来的问题",slug:"_9-3-并发事务带来的问题",normalizedTitle:"9.3 并发事务带来的问题",charIndex:7557},{level:3,title:"9.4 事务的隔离级别",slug:"_9-4-事务的隔离级别",normalizedTitle:"9.4 事务的隔离级别",charIndex:8361},{level:2,title:"10 索引",slug:"_10-索引",normalizedTitle:"10 索引",charIndex:9191},{level:3,title:"10.1 优缺点",slug:"_10-1-优缺点",normalizedTitle:"10.1 优缺点",charIndex:9355},{level:3,title:"10.2 索引的底层数据结构",slug:"_10-2-索引的底层数据结构",normalizedTitle:"10.2 索引的底层数据结构",charIndex:9564},{level:5,title:"Hash表 & B+树",slug:"hash表-b-树",normalizedTitle:"hash表 &amp; b+树",charIndex:null},{level:5,title:"B 树& B+树",slug:"b-树-b-树",normalizedTitle:"b 树&amp; b+树",charIndex:null},{level:3,title:"10.3 索引类型",slug:"_10-3-索引类型",normalizedTitle:"10.3 索引类型",charIndex:10480},{level:5,title:"主键索引(Primary Key)",slug:"主键索引-primary-key",normalizedTitle:"主键索引(primary key)",charIndex:10493},{level:5,title:"二级索引(辅助索引)",slug:"二级索引-辅助索引",normalizedTitle:"二级索引(辅助索引)",charIndex:10678},{level:5,title:"聚集索引与非聚集索引",slug:"聚集索引与非聚集索引",normalizedTitle:"聚集索引与非聚集索引",charIndex:11160},{level:6,title:"聚集索引",slug:"聚集索引",normalizedTitle:"聚集索引",charIndex:11160},{level:6,title:"聚集索引的优点",slug:"聚集索引的优点",normalizedTitle:"聚集索引的优点",charIndex:11315},{level:6,title:"聚集索引的缺点",slug:"聚集索引的缺点",normalizedTitle:"聚集索引的缺点",charIndex:11393},{level:6,title:"非聚集索引",slug:"非聚集索引",normalizedTitle:"非聚集索引",charIndex:11165},{level:6,title:"非聚集索引的优点",slug:"非聚集索引的优点",normalizedTitle:"非聚集索引的优点",charIndex:11652},{level:6,title:"非聚集索引的缺点",slug:"非聚集索引的缺点",normalizedTitle:"非聚集索引的缺点",charIndex:11718},{level:3,title:"10.4 创建索引的注意事项",slug:"_10-4-创建索引的注意事项",normalizedTitle:"10.4 创建索引的注意事项",charIndex:11833},{level:2,title:"11 InnoDB的锁机制和MVCC",slug:"_11-innodb的锁机制和mvcc",normalizedTitle:"11 innodb的锁机制和mvcc",charIndex:12716},{level:3,title:"11.1 MVCC",slug:"_11-1-mvcc",normalizedTitle:"11.1 mvcc",charIndex:12739}],headersStr:"1 基本概述 1.1 相关概念 2 SQL语句 2.1 数据操作语言 2.2 数据定义语言 2.3 数据查询语言 2.3.1 简单查询 2.3.2 运算符操作 2.3.3 排序查询 order by 2.3.4 聚合查询 2.3.5 分组查询 group by 2.3.6 分页显示 limit 2.3.7 SQL语句的执行顺序 2.4 数据控制语言 2.4.1 创建用户 2.4.2 赋予用户对数据库的权限 2.4.3 刷新权限表 2.4.5 收回权限 2.4 事务控制语言 3 约束 3.1 主键约束 3.2 唯一约束 3.3 NULL 约束 3.4  DEFAULT 约束 3.5 自增长约束 3.6 外键约束 4 三大范式 5 视图 5.1 创建视图 5.2 查看视图 5.3 更新视图数据与视图的删除 6 存储过程与存储函数 6.1 存储过程 6.2 存储函数 7 触发器（事件） 8 SQL的执行流程 8.1 存储引擎 锁机制 锁算法 缓冲池 Undo 日志 redo 日志 到此为止，从==执行器开始调用存储引擎==接口做了哪些事情呢？ bin log 日志文件 9 事务 9.1 事务的特性 9.2 数据事务的实现原理 9.3 并发事务带来的问题 9.4 事务的隔离级别 10 索引 10.1 优缺点 10.2 索引的底层数据结构 Hash表 & B+树 B 树& B+树 10.3 索引类型 主键索引(Primary Key) 二级索引(辅助索引) 聚集索引与非聚集索引 聚集索引 聚集索引的优点 聚集索引的缺点 非聚集索引 非聚集索引的优点 非聚集索引的缺点 10.4 创建索引的注意事项 11 InnoDB的锁机制和MVCC 11.1 MVCC",content:"# 1 基本概述\n\nMySQL 是一种关系型数据库，主要用于持久化存储我们的系统中的一些数据。\n\n\n# 1.1 相关概念\n\nDB（DataBase）：存储数据的‘仓库’，器本质是一个文件系统。\n\nDBMS（DataBase Management System）：是一种用于操作和管理数据库的大型软件。\n\n\n# 2 SQL语句\n\n结构化查询语言，可==以总结为对数据库、表、表中的数据、索引等的增删改查。==\n\n-- 查看已有的数据库\n\tSHOW DATABASES [ LIKE 'PATTERN']；\n\t\n-- 使用数据库\n\tUSE 库名；\t\n\n\n\n# 2.1 数据操作语言\n\nDML（Data Manipulation Language），主要用于对数据库对象中包含的数据进行操作。\n\n * insert 向数据库中插入一条数据\n * delete 删除表中的一条或者多条记录\n * update 修改表中的数据\n\n-- 对表中数据的增删改\nINSERT INTO 表(列名,....) VALUES (值,...);\n\nDELETE FROM 表 WHERE 条件;\n\tTRUNCATE 表; --这是清空整个表\n\nUPDATE 表名 SET 字段名=值,...;\n\n\n\n# 2.2 数据定义语言\n\nDDL（Data Definition Language），主要用于维护存储数据的结构，这种结构包括数据库，表、视图、索引、同义词、聚簇等。\n\n * create 创建数据库和数据库的一些对象。\n * drop 删除数据库/表、索引、条件约束以及数据表的权限等。\n * alter 修改数据库表的定义及数据属性。\n\n\n# 2.3 数据查询语言\n\nDQL （Data Query Language） ，主要用于查询数据库当中的数据。\n\n * selete 查询表中的数据\n\n * from 查询哪张表、视图\n\n * where 约束条件\n   \n   # 2.3.1 简单查询\n   \n   -- 1、查询全表、\n   \tSELECT * FROM 表名;\n   -- 2、指定字段查询\n   \tSELECT 字段1,字段2,...FROM 表名;\n   -- 3、别名查询\n   \tSELECT 字段名 AS '别名',...FROM 表名 AS '表别名';\n   -- 4、去重查询\n   \t-- 去除重复的行\n   \tSELECT DISTINCT * FROM 表名;\n   \t-- 去除重复的列\n   \tSELECT DISTINCT 字段名 FROM 表名;\n   \n   \n   # 2.3.2 运算符操作\n   \n   -- 1、+ - * / 算术运算符\n   \tselect price * 1.1 from product;\n   -- 2、> >= < <= != 比较运算符\n   \t-- 查询价格为800商品\n   \tselect * from product where price = 800;\n   -- 3、&& || 逻辑运算符\n   \t-- 查询商品价格是200或800的所有商品\n   \tselect * from product where price in(200,800);\n   \tselect * from product where price = 200 or price = 800;\n   \tselect * from product where price = 200 || price = 800;\n   -- 4、& ^ << >> ~ 位运算符\n   \n   \n   # 2.3.3 排序查询 order by\n   \n   -- 1、升序排列,默认升序 ASC\n   \tSELECT * FROM product ORDER BY price [ASC];\n   -- 2、降序排列\n   \tSELECT * FROM product ORDER BY price DESC;\n   \tSELECT * FROM product ORDER BY price DESC, category_id DESC;\n   \n   \n   # 2.3.4 聚合查询\n   \n   -- 有 null 值，不会进行统计。\n   -- count、sum、max、min、avg\n   \n   \n   # 2.3.5 分组查询 group by\n   \n   -- 分组可以理解将一张表拆分成多张表，拆分的依据就是分组字段。\n   -- 分组后的条件筛选用 HAVING\n   \n   \n   # 2.3.6 分页显示 limit\n   \n   -- 1、查询 product 表的前5条记录\n   \tSELECT * FROM product LIMIT 5;\n   -- 1、从第4条开始显示，显示5条\n   \tSELECT * FROM product LIMIT 3,5;\n   \n   \n   # 2.3.7 SQL语句的执行顺序\n   \n   FROM -> WHERE -> GROUP BY -> COUNT -> HAVING -> SELECT -> ORDER BY -> LIMIT\n\n\n# 2.4 数据控制语言\n\nDCL（Data Control Language），主要控制数据库对象的权限管理、事务和实时监视。\n\n * grant分配权限给用户\n * revoke废除数据库中某用户的权限\n * rollback 退回到某一点 (回滚）\n * commit 提交\n\n# 2.4.1 创建用户\n\nCREATE USER 'username'@'%' IDENTIFIED BY 'password';\n\n\n% 表示所有的 host 都可以连接，通常为了安全，设置为你允许连接的主机 ip。\n\n# 2.4.2 赋予用户对数据库的权限\n\nGRANT ALL PRIVILEGES ON 数据库.* TO 'username'@'%';\n\n\nGRANT CREATE, ALTER, DROP, INSERT, UPDATE, DELETE, SELECT, REFERENCES, RELOAD on . TO 'sammy'@'localhost' WITH GRANT OPTION;\n\n# 2.4.3 刷新权限表\n\nFLUSH PRIVILEGES;\n\n\n# 2.4.5 收回权限\n\nREVOKE\n\n\n# 2.4 事务控制语言\n\n\n# 3 约束\n\n\n# 3.1 主键约束\n\n能唯一标识记录的字段，可以作为主键。\n\n>  * 一个表只能有一个主键。\n>  * 主键具有唯一性。\n>  * 声明字段时，用 primary key 标识。也可以在字段列表之后声明 例：create table tab ( id int, stu varchar(10), primary key (id));\n>  * 主键字段的值不能为null。\n>  * 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。 例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));\n\n\n# 3.2 唯一约束\n\nUNIQUE 使得某字段的值也不能重复。\n\n\n# 3.3 NULL 约束\n\nnull不是数据类型，是列的一个属性。表示当前列是否可以为null，表示什么都没有。\n\n> null, 允许为空。默认。 not null, 不允许为空。 insert into tab values (null, 'val'); -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null\n\n\n# 3.4 DEFAULT 约束\n\n当前字段的默认值。\n\n\n# 3.5 自增长约束\n\nAUTO_INCREMENT\n\n> 自动增长必须为索引（主键或unique） 只能存在一个字段为自动增长。 默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;\n\n\n# 3.6 外键约束\n\n用于限制主表与从表数据完整性。存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。\n\n\n# 4 三大范式\n\n1NF(第一范式)\n\n属性（对应于表中的字段）不能再被分割，也就是这个字段只能是一个值，不能再分为多个其他的字段了。1NF 是所有关系型数据库的最基本要求 ，也就是说关系型数据库中创建的表一定满足第一范式。\n\n2NF(第二范式)\n\n2NF 在 1NF 的基础之上，消除了非主属性对于码的部分函数依赖。如下图所示，展示了第一范式到第二范式的过渡。第二范式在第一范式的基础上增加了一个列，这个列称为主键，非主属性都依赖于主键。\n\n一些重要的概念：\n\n * 函数依赖（functional dependency） ：若在一张表中，在属性（或属性组）X 的值确定的情况下，必定能确定属性 Y 的值，那么就可以说 Y 函数依赖于 X，写作 X → Y。\n * 部分函数依赖（partial functional dependency） ：如果 X→Y，并且存在 X 的一个真子集 X0，使得 X0→Y，则称 Y 对 X 部分函数依赖。比如学生基本信息表 R 中（学号，身份证号，姓名）当然学号属性取值是唯一的，在 R 关系中，（学号，身份证号）->（姓名），（学号）->（姓名），（身份证号）->（姓名）；所以姓名部分函数依赖与（学号，身份证号）；\n * 完全函数依赖(Full functional dependency) ：在一个关系中，若某个非主属性数据项依赖于全部关键字称之为完全函数依赖。比如学生基本信息表 R（学号，班级，姓名）假设不同的班级学号有相同的，班级内学号不能相同，在 R 关系中，（学号，班级）->（姓名），但是（学号）->(姓名)不成立，（班级）->(姓名)不成立，所以姓名完全函数依赖与（学号，班级）；\n * 传递函数依赖 ： 在关系模式 R(U)中，设 X，Y，Z 是 U 的不同的属性子集，如果 X 确定 Y、Y 确定 Z，且有 X 不包含 Y，Y 不确定 X，（X∪Y）∩Z=空集合，则称 Z 传递函数依赖(transitive functional dependency) 于 X。传递函数依赖会导致数据冗余和异常。传递函数依赖的 Y 和 Z 子集往往同属于某一个事物，因此可将其合并放到一个表中。比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖。。\n\n3NF(第三范式)\n\n3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。符合 3NF 要求的数据库设计，基本上解决了数据冗余过大，插入异常，修改异常，删除异常的问题。比如在关系 R(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖，所以该表的设计，不符合 3NF 的要求。\n\n\n# 5 视图\n\n视图是一个==虚拟表==，本身并不拥有数据，占用很少的内存。视图基于已有的表。\n\n * 视图的创建和删除只会影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和修改的操作时，数据表中的数据会相应的发生变化，反之亦然。\n * 向视图提供的数据内容语句为 SELECT 语句时，可以将视图理解为存储起来的 SELECT 语句。\n * 视图，是向用户提供基表数据的另一种表现形式。在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，他==可以帮助我们把经常查询的结果集放到虚拟表中，提升使用效率。==\n\n\n# 5.1 创建视图\n\n * 在 CREATE VIEW 语句中嵌入子查询\n\n\n# 5.2 查看视图\n\n\n# 5.3 更新视图数据与视图的删除\n\n\n# 6 存储过程与存储函数\n\n可以将复杂的SQL逻辑封装到一起。\n\n\n# 6.1 存储过程\n\n是一组经过预先编译的SQL语句的封装。执行过程：存储过程预先存储在MySQL服务器上，需要执行时，客户端只需要向服务器发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列SQL语句全部执行。\n\n\n# 6.2 存储函数\n\n\n# 7 触发器（事件）\n\n\n# 8 SQL的执行流程\n\n\n\nJava 系统在通过 MySQL 驱动和 MySQL 数据库连接的时候是基于 TCP/IP 协议的，每个请求都是新建连接和销毁连接，这样势必会造成不必要的浪费和性能的下降。通过==数据库连接池==提供一些固定的用来连接的线程，避免连接的频繁创建和销毁。\n\n线程获取 SQL 语句 -> 交给 SQL接口处理 -> SQL解析器处理SQL语句 -> 解析过的SQL语句由查询优化器来优化 -> 执行器调用存储引擎的接口去完成SQL执行\n\n\n# 8.1 存储引擎\n\nInnoDB：事务型数据库的首选，支持ACID，支持行锁，表锁，外键。\n\nMylSAM：基于ISAM的存储引擎，MyISAM 拥有较高的插入、查询速度，但不支持事务，只支持表锁。\n\nMEMORY：将表中的数据存储到内存中，为查询和引用其他数据提供快速访问。\n\nInnoDB中的一个重要的组件：缓冲池 Buffer Pool\n\n * MySQL InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。\n * MySQL InnoDB 引擎通过 锁机制、MVCC 等手段来保证事务的隔离性（ 默认支持的隔离级别是 REPEATABLE-READ ）。MVCC 可以看作是行级锁的一个升级，可以有效减少加锁操作，提供性能。\n * 保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。\n\n# 锁机制\n\nInnoDB 行锁的实现方式\n\n**InnoDB行锁是通过给索引上的索引项加锁来实现的，**这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！\n\n表级锁和行级锁对比：\n\n * 表级锁： MySQL 中锁定 粒度最大 的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM 和 InnoDB 引擎都支持表级锁。\n * 行级锁： MySQL 中锁定 粒度最小 的一种锁，只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。\n\n# 锁算法\n\n * Record lock：记录锁，单个行记录上的锁\n * Gap lock：间隙锁，锁定一个范围，不包括记录本身\n * Next-key lock：record+gap 临键锁，锁定一个范围，包含记录本身\n\n# 缓冲池\n\n第一次查询的时候会将查询的结果存到 Buffer Pool 中，这样后面再有请求的时候，就会先从缓冲池中去查询，如果没有再去磁盘中查找，然后再放到 Buffer Pool 中。\n\n# Undo 日志\n\n在一条数据被加载到 Buffer Pool 中的同时会在 undo日志中记录更新前的值\n\n# redo 日志\n\nredo 记录的是数据修改之后的值，不管事务是否提交都会记录下来，一般情况下，redo log Buffer 数据写入磁盘的策略是立即刷入磁盘\n\n# 到此为止，从==执行器开始调用存储引擎==接口做了哪些事情呢？\n\n1.准备更新一条 SQL 语句\n\n2.MySQL（innodb）会先去缓冲池（BufferPool）中去查找这条数据，没找到就会去磁盘中查找，如果查找到就会将这条数据加载到缓冲池（BufferPool）中\n\n3.在加载到 Buffer Pool 的同时，会将这条数据的原始记录保存到 undo 日志文件中\n\n4.innodb 会在 Buffer Pool 中执行更新操作\n\n5.更新后的数据会记录在 redo log buffer 中\n\n6.MySQL 提交事务的时候，会将 redo log buffer 中的数据写入到 redo 日志文件中 刷磁盘可以通过 innodb_flush_log_at_trx_commit 参数来设置\n\n值为 0 表示不刷入磁盘\n\n值为 1 表示立即刷入磁盘\n\n值为 2 表示先刷到 os cache\n\n7.myslq 重启的时候会将 redo 日志恢复到缓冲池中\n\n# bin log 日志文件\n\nMySQL级别的，所有的存储引擎都可以使用，记录整个操作过程。适用于主从复制和数据恢复。\n\n\n# 9 事务\n\n\n# 9.1 事务的特性\n\nACID：\n\n 1. 原子性（Atomicity） ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n 2. 一致性（Consistency）： 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；\n 3. 隔离性（Isolation）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；\n 4. 持久性（Durabilily）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n\n# 9.2 数据事务的实现原理\n\n我们这里以 MySQL 的 InnoDB 引擎为例来简单说一下。\n\nMySQL InnoDB 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。\n\nMySQL InnoDB 引擎通过 锁机制、MVCC 等手段来保证事务的隔离性（ 默认支持的隔离级别是 REPEATABLE-READ ）。\n\n保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。\n\n\n# 9.3 并发事务带来的问题\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。\n\n * 脏读（Dirty read）: 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n * 丢失修改（Lost to modify）: 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务 1 读取某表中的数据 A=20，事务 2 也读取 A=20，事务 1 修改 A=A-1，事务 2 也修改 A=A-1，最终结果 A=19，事务 1 的修改被丢失。\n * 不可重复读（Unrepeatable read）: 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n * 幻读（Phantom read）: 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n不可重复读和幻读区别：\n\n不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了。\n\n\n# 9.4 事务的隔离级别\n\nSQL 标准定义了四个隔离级别：\n\n * READ-UNCOMMITTED(读取未提交)： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\n\n * READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\n\n * REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\n\n * SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\n   \n   隔离级别               脏读   不可重复读   幻读\n   READ-UNCOMMITTED   √    √       √\n   READ-COMMITTED     ×    √       √\n   REPEATABLE-READ    ×    ×       √\n   SERIALIZABLE       ×    ×       ×\n   \n   MySQL InnoDB 的 REPEATABLE-READ（可重读）并不保证避免幻读，需要应用使用加锁读来保证。而这个加锁度使用到的机制就是 Next-Key Locks。\n   \n   因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 READ-COMMITTED(读取提交内容) ，但是你要知道的是 InnoDB 存储引擎默认使用 REPEATABLE-READ（可重读） 并不会有任何性能损失。\n   \n   InnoDB 存储引擎在 分布式事务 的情况下一般会用到 SERIALIZABLE(可串行化) 隔离级别。\n\n\n# 10 索引\n\n索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B 树， B+树和 Hash。\n\n索引的作用就相当于目录的作用。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。\n\n\n# 10.1 优缺点\n\n优点 ：\n\n * 使用索引可以大大加快 数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。\n * 通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。\n\n缺点 ：\n\n * 创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。\n * 索引需要使用物理文件存储，也会耗费一定空间。\n\n\n# 10.2 索引的底层数据结构\n\n# Hash表 & B+树\n\n哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 O（1））。\n\n为何能够通过 key 快速取出 value呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 value 对应的 index，找到了 index 也就找到了对应的 value。\n\n但是！哈希算法有个 Hash 冲突 问题，也就是说多个不同的 key 最后得到的 index 相同。通常情况下，我们常用的解决办法是 链地址法。链地址法就是将哈希冲突数据存放在链表中。就比如 JDK1.8 之前 HashMap 就是通过链地址法来解决哈希冲突的。不过，JDK1.8 以后HashMap为了减少链表过长的时候搜索时间过长引入了红黑树。\n\n既然哈希表这么快，为什么MySQL 没有使用其作为索引的数据结构呢？\n\n1.Hash 冲突问题 ：我们上面也提到过Hash 冲突了，不过对于数据库来说这还不算最大的缺点。\n\n2.Hash 索引不支持顺序和范围查询(Hash 索引不支持顺序和范围查询是它最大的缺点： 假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。\n\n# B 树& B+树\n\nB 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。B 树和 B+树中的 B 是 Balanced （平衡）的意思。\n\n目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。\n\nB 树& B+树两者有何异同呢？\n\n * B 树的所有节点既存放键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\n * B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。\n * B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\n\n\n# 10.3 索引类型\n\n# 主键索引(Primary Key)\n\n数据表的主键列使用的就是主键索引。\n\n一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\n\n在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。\n\n# 二级索引(辅助索引)\n\n二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\n\n唯一索引，普通索引，前缀索引等索引属于二级索引。\n\n 1. 唯一索引(Unique Key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\n 2. 普通索引(Index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 NULL。\n 3. 前缀索引(Prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\n 4. 全文索引(Full Text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MYISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。\n\n# 聚集索引与非聚集索引\n\n# 聚集索引\n\n聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。\n\n在 Mysql 中，InnoDB 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\n\n# 聚集索引的优点\n\n聚集索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。\n\n# 聚集索引的缺点\n\n 1. 依赖于有序的数据 ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\n 2. 更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改， 而且况聚集索引的叶子节点还存放着数据，修改代价肯定是较大的， 所以对于主键索引来说，主键一般都是不可被修改的。\n\n# 非聚集索引\n\n非聚集索引即索引结构和数据分开存放的索引。\n\n二级索引属于非聚集索引。\n\n# 非聚集索引的优点\n\n更新代价比聚集索引要小 。非聚集索引的更新代价就没有聚集索引那么大了，非聚集索引的叶子节点是不存放数据的\n\n# 非聚集索引的缺点\n\n 1. 跟聚集索引一样，非聚集索引也依赖于有序的数据\n 2. 可能会二次查询(回表) :这应该是非聚集索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\n\n\n# 10.4 创建索引的注意事项\n\n1.选择合适的字段创建索引：\n\n * 不为 NULL 的字段 ：索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\n * 被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\n * 被作为条件查询的字段 ：被作为 WHERE 条件查询的字段，应该被考虑建立索引。\n * 频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\n * 被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\n\n2.被频繁更新的字段应该慎重建立索引。\n\n虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\n\n3.尽可能的考虑建立联合索引而不是单列索引。\n\n因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\n\n4.注意避免冗余索引 。\n\n冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\n\n5.考虑在字符串类型的字段上使用前缀索引代替普通索引。\n\n前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\n\n\n# 11 InnoDB的锁机制和MVCC\n\n\n# 11.1 MVCC",normalizedContent:"# 1 基本概述\n\nmysql 是一种关系型数据库，主要用于持久化存储我们的系统中的一些数据。\n\n\n# 1.1 相关概念\n\ndb（database）：存储数据的‘仓库’，器本质是一个文件系统。\n\ndbms（database management system）：是一种用于操作和管理数据库的大型软件。\n\n\n# 2 sql语句\n\n结构化查询语言，可==以总结为对数据库、表、表中的数据、索引等的增删改查。==\n\n-- 查看已有的数据库\n\tshow databases [ like 'pattern']；\n\t\n-- 使用数据库\n\tuse 库名；\t\n\n\n\n# 2.1 数据操作语言\n\ndml（data manipulation language），主要用于对数据库对象中包含的数据进行操作。\n\n * insert 向数据库中插入一条数据\n * delete 删除表中的一条或者多条记录\n * update 修改表中的数据\n\n-- 对表中数据的增删改\ninsert into 表(列名,....) values (值,...);\n\ndelete from 表 where 条件;\n\ttruncate 表; --这是清空整个表\n\nupdate 表名 set 字段名=值,...;\n\n\n\n# 2.2 数据定义语言\n\nddl（data definition language），主要用于维护存储数据的结构，这种结构包括数据库，表、视图、索引、同义词、聚簇等。\n\n * create 创建数据库和数据库的一些对象。\n * drop 删除数据库/表、索引、条件约束以及数据表的权限等。\n * alter 修改数据库表的定义及数据属性。\n\n\n# 2.3 数据查询语言\n\ndql （data query language） ，主要用于查询数据库当中的数据。\n\n * selete 查询表中的数据\n\n * from 查询哪张表、视图\n\n * where 约束条件\n   \n   # 2.3.1 简单查询\n   \n   -- 1、查询全表、\n   \tselect * from 表名;\n   -- 2、指定字段查询\n   \tselect 字段1,字段2,...from 表名;\n   -- 3、别名查询\n   \tselect 字段名 as '别名',...from 表名 as '表别名';\n   -- 4、去重查询\n   \t-- 去除重复的行\n   \tselect distinct * from 表名;\n   \t-- 去除重复的列\n   \tselect distinct 字段名 from 表名;\n   \n   \n   # 2.3.2 运算符操作\n   \n   -- 1、+ - * / 算术运算符\n   \tselect price * 1.1 from product;\n   -- 2、> >= < <= != 比较运算符\n   \t-- 查询价格为800商品\n   \tselect * from product where price = 800;\n   -- 3、&& || 逻辑运算符\n   \t-- 查询商品价格是200或800的所有商品\n   \tselect * from product where price in(200,800);\n   \tselect * from product where price = 200 or price = 800;\n   \tselect * from product where price = 200 || price = 800;\n   -- 4、& ^ << >> ~ 位运算符\n   \n   \n   # 2.3.3 排序查询 order by\n   \n   -- 1、升序排列,默认升序 asc\n   \tselect * from product order by price [asc];\n   -- 2、降序排列\n   \tselect * from product order by price desc;\n   \tselect * from product order by price desc, category_id desc;\n   \n   \n   # 2.3.4 聚合查询\n   \n   -- 有 null 值，不会进行统计。\n   -- count、sum、max、min、avg\n   \n   \n   # 2.3.5 分组查询 group by\n   \n   -- 分组可以理解将一张表拆分成多张表，拆分的依据就是分组字段。\n   -- 分组后的条件筛选用 having\n   \n   \n   # 2.3.6 分页显示 limit\n   \n   -- 1、查询 product 表的前5条记录\n   \tselect * from product limit 5;\n   -- 1、从第4条开始显示，显示5条\n   \tselect * from product limit 3,5;\n   \n   \n   # 2.3.7 sql语句的执行顺序\n   \n   from -> where -> group by -> count -> having -> select -> order by -> limit\n\n\n# 2.4 数据控制语言\n\ndcl（data control language），主要控制数据库对象的权限管理、事务和实时监视。\n\n * grant分配权限给用户\n * revoke废除数据库中某用户的权限\n * rollback 退回到某一点 (回滚）\n * commit 提交\n\n# 2.4.1 创建用户\n\ncreate user 'username'@'%' identified by 'password';\n\n\n% 表示所有的 host 都可以连接，通常为了安全，设置为你允许连接的主机 ip。\n\n# 2.4.2 赋予用户对数据库的权限\n\ngrant all privileges on 数据库.* to 'username'@'%';\n\n\ngrant create, alter, drop, insert, update, delete, select, references, reload on . to 'sammy'@'localhost' with grant option;\n\n# 2.4.3 刷新权限表\n\nflush privileges;\n\n\n# 2.4.5 收回权限\n\nrevoke\n\n\n# 2.4 事务控制语言\n\n\n# 3 约束\n\n\n# 3.1 主键约束\n\n能唯一标识记录的字段，可以作为主键。\n\n>  * 一个表只能有一个主键。\n>  * 主键具有唯一性。\n>  * 声明字段时，用 primary key 标识。也可以在字段列表之后声明 例：create table tab ( id int, stu varchar(10), primary key (id));\n>  * 主键字段的值不能为null。\n>  * 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。 例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));\n\n\n# 3.2 唯一约束\n\nunique 使得某字段的值也不能重复。\n\n\n# 3.3 null 约束\n\nnull不是数据类型，是列的一个属性。表示当前列是否可以为null，表示什么都没有。\n\n> null, 允许为空。默认。 not null, 不允许为空。 insert into tab values (null, 'val'); -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null\n\n\n# 3.4 default 约束\n\n当前字段的默认值。\n\n\n# 3.5 自增长约束\n\nauto_increment\n\n> 自动增长必须为索引（主键或unique） 只能存在一个字段为自动增长。 默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;\n\n\n# 3.6 外键约束\n\n用于限制主表与从表数据完整性。存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。\n\n\n# 4 三大范式\n\n1nf(第一范式)\n\n属性（对应于表中的字段）不能再被分割，也就是这个字段只能是一个值，不能再分为多个其他的字段了。1nf 是所有关系型数据库的最基本要求 ，也就是说关系型数据库中创建的表一定满足第一范式。\n\n2nf(第二范式)\n\n2nf 在 1nf 的基础之上，消除了非主属性对于码的部分函数依赖。如下图所示，展示了第一范式到第二范式的过渡。第二范式在第一范式的基础上增加了一个列，这个列称为主键，非主属性都依赖于主键。\n\n一些重要的概念：\n\n * 函数依赖（functional dependency） ：若在一张表中，在属性（或属性组）x 的值确定的情况下，必定能确定属性 y 的值，那么就可以说 y 函数依赖于 x，写作 x → y。\n * 部分函数依赖（partial functional dependency） ：如果 x→y，并且存在 x 的一个真子集 x0，使得 x0→y，则称 y 对 x 部分函数依赖。比如学生基本信息表 r 中（学号，身份证号，姓名）当然学号属性取值是唯一的，在 r 关系中，（学号，身份证号）->（姓名），（学号）->（姓名），（身份证号）->（姓名）；所以姓名部分函数依赖与（学号，身份证号）；\n * 完全函数依赖(full functional dependency) ：在一个关系中，若某个非主属性数据项依赖于全部关键字称之为完全函数依赖。比如学生基本信息表 r（学号，班级，姓名）假设不同的班级学号有相同的，班级内学号不能相同，在 r 关系中，（学号，班级）->（姓名），但是（学号）->(姓名)不成立，（班级）->(姓名)不成立，所以姓名完全函数依赖与（学号，班级）；\n * 传递函数依赖 ： 在关系模式 r(u)中，设 x，y，z 是 u 的不同的属性子集，如果 x 确定 y、y 确定 z，且有 x 不包含 y，y 不确定 x，（x∪y）∩z=空集合，则称 z 传递函数依赖(transitive functional dependency) 于 x。传递函数依赖会导致数据冗余和异常。传递函数依赖的 y 和 z 子集往往同属于某一个事物，因此可将其合并放到一个表中。比如在关系 r(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖。。\n\n3nf(第三范式)\n\n3nf 在 2nf 的基础之上，消除了非主属性对于码的传递函数依赖 。符合 3nf 要求的数据库设计，基本上解决了数据冗余过大，插入异常，修改异常，删除异常的问题。比如在关系 r(学号 , 姓名, 系名，系主任)中，学号 → 系名，系名 → 系主任，所以存在非主属性系主任对于学号的传递函数依赖，所以该表的设计，不符合 3nf 的要求。\n\n\n# 5 视图\n\n视图是一个==虚拟表==，本身并不拥有数据，占用很少的内存。视图基于已有的表。\n\n * 视图的创建和删除只会影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和修改的操作时，数据表中的数据会相应的发生变化，反之亦然。\n * 向视图提供的数据内容语句为 select 语句时，可以将视图理解为存储起来的 select 语句。\n * 视图，是向用户提供基表数据的另一种表现形式。在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，他==可以帮助我们把经常查询的结果集放到虚拟表中，提升使用效率。==\n\n\n# 5.1 创建视图\n\n * 在 create view 语句中嵌入子查询\n\n\n# 5.2 查看视图\n\n\n# 5.3 更新视图数据与视图的删除\n\n\n# 6 存储过程与存储函数\n\n可以将复杂的sql逻辑封装到一起。\n\n\n# 6.1 存储过程\n\n是一组经过预先编译的sql语句的封装。执行过程：存储过程预先存储在mysql服务器上，需要执行时，客户端只需要向服务器发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列sql语句全部执行。\n\n\n# 6.2 存储函数\n\n\n# 7 触发器（事件）\n\n\n# 8 sql的执行流程\n\n\n\njava 系统在通过 mysql 驱动和 mysql 数据库连接的时候是基于 tcp/ip 协议的，每个请求都是新建连接和销毁连接，这样势必会造成不必要的浪费和性能的下降。通过==数据库连接池==提供一些固定的用来连接的线程，避免连接的频繁创建和销毁。\n\n线程获取 sql 语句 -> 交给 sql接口处理 -> sql解析器处理sql语句 -> 解析过的sql语句由查询优化器来优化 -> 执行器调用存储引擎的接口去完成sql执行\n\n\n# 8.1 存储引擎\n\ninnodb：事务型数据库的首选，支持acid，支持行锁，表锁，外键。\n\nmylsam：基于isam的存储引擎，myisam 拥有较高的插入、查询速度，但不支持事务，只支持表锁。\n\nmemory：将表中的数据存储到内存中，为查询和引用其他数据提供快速访问。\n\ninnodb中的一个重要的组件：缓冲池 buffer pool\n\n * mysql innodb 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。\n * mysql innodb 引擎通过 锁机制、mvcc 等手段来保证事务的隔离性（ 默认支持的隔离级别是 repeatable-read ）。mvcc 可以看作是行级锁的一个升级，可以有效减少加锁操作，提供性能。\n * 保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。\n\n# 锁机制\n\ninnodb 行锁的实现方式\n\n**innodb行锁是通过给索引上的索引项加锁来实现的，**这一点mysql与oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。innodb这种行锁实现特点意味着：只有通过索引条件检索数据，innodb才使用行级锁，否则，innodb将使用表锁！\n\n表级锁和行级锁对比：\n\n * 表级锁： mysql 中锁定 粒度最大 的一种锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，myisam 和 innodb 引擎都支持表级锁。\n * 行级锁： mysql 中锁定 粒度最小 的一种锁，只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。\n\n# 锁算法\n\n * record lock：记录锁，单个行记录上的锁\n * gap lock：间隙锁，锁定一个范围，不包括记录本身\n * next-key lock：record+gap 临键锁，锁定一个范围，包含记录本身\n\n# 缓冲池\n\n第一次查询的时候会将查询的结果存到 buffer pool 中，这样后面再有请求的时候，就会先从缓冲池中去查询，如果没有再去磁盘中查找，然后再放到 buffer pool 中。\n\n# undo 日志\n\n在一条数据被加载到 buffer pool 中的同时会在 undo日志中记录更新前的值\n\n# redo 日志\n\nredo 记录的是数据修改之后的值，不管事务是否提交都会记录下来，一般情况下，redo log buffer 数据写入磁盘的策略是立即刷入磁盘\n\n# 到此为止，从==执行器开始调用存储引擎==接口做了哪些事情呢？\n\n1.准备更新一条 sql 语句\n\n2.mysql（innodb）会先去缓冲池（bufferpool）中去查找这条数据，没找到就会去磁盘中查找，如果查找到就会将这条数据加载到缓冲池（bufferpool）中\n\n3.在加载到 buffer pool 的同时，会将这条数据的原始记录保存到 undo 日志文件中\n\n4.innodb 会在 buffer pool 中执行更新操作\n\n5.更新后的数据会记录在 redo log buffer 中\n\n6.mysql 提交事务的时候，会将 redo log buffer 中的数据写入到 redo 日志文件中 刷磁盘可以通过 innodb_flush_log_at_trx_commit 参数来设置\n\n值为 0 表示不刷入磁盘\n\n值为 1 表示立即刷入磁盘\n\n值为 2 表示先刷到 os cache\n\n7.myslq 重启的时候会将 redo 日志恢复到缓冲池中\n\n# bin log 日志文件\n\nmysql级别的，所有的存储引擎都可以使用，记录整个操作过程。适用于主从复制和数据恢复。\n\n\n# 9 事务\n\n\n# 9.1 事务的特性\n\nacid：\n\n 1. 原子性（atomicity） ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n 2. 一致性（consistency）： 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；\n 3. 隔离性（isolation）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；\n 4. 持久性（durabilily）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n\n# 9.2 数据事务的实现原理\n\n我们这里以 mysql 的 innodb 引擎为例来简单说一下。\n\nmysql innodb 引擎使用 redo log(重做日志) 保证事务的持久性，使用 undo log(回滚日志) 来保证事务的原子性。\n\nmysql innodb 引擎通过 锁机制、mvcc 等手段来保证事务的隔离性（ 默认支持的隔离级别是 repeatable-read ）。\n\n保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。\n\n\n# 9.3 并发事务带来的问题\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。\n\n * 脏读（dirty read）: 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n * 丢失修改（lost to modify）: 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务 1 读取某表中的数据 a=20，事务 2 也读取 a=20，事务 1 修改 a=a-1，事务 2 也修改 a=a-1，最终结果 a=19，事务 1 的修改被丢失。\n * 不可重复读（unrepeatable read）: 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n * 幻读（phantom read）: 幻读与不可重复读类似。它发生在一个事务（t1）读取了几行数据，接着另一个并发事务（t2）插入了一些数据时。在随后的查询中，第一个事务（t1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n不可重复读和幻读区别：\n\n不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了。\n\n\n# 9.4 事务的隔离级别\n\nsql 标准定义了四个隔离级别：\n\n * read-uncommitted(读取未提交)： 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。\n\n * read-committed(读取已提交)： 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。\n\n * repeatable-read(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\n\n * serializable(可串行化)： 最高的隔离级别，完全服从 acid 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。\n   \n   隔离级别               脏读   不可重复读   幻读\n   read-uncommitted   √    √       √\n   read-committed     ×    √       √\n   repeatable-read    ×    ×       √\n   serializable       ×    ×       ×\n   \n   mysql innodb 的 repeatable-read（可重读）并不保证避免幻读，需要应用使用加锁读来保证。而这个加锁度使用到的机制就是 next-key locks。\n   \n   因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 read-committed(读取提交内容) ，但是你要知道的是 innodb 存储引擎默认使用 repeatable-read（可重读） 并不会有任何性能损失。\n   \n   innodb 存储引擎在 分布式事务 的情况下一般会用到 serializable(可串行化) 隔离级别。\n\n\n# 10 索引\n\n索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: b 树， b+树和 hash。\n\n索引的作用就相当于目录的作用。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。\n\n\n# 10.1 优缺点\n\n优点 ：\n\n * 使用索引可以大大加快 数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。\n * 通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。\n\n缺点 ：\n\n * 创建索引和维护索引需要耗费许多时间。当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低 sql 执行效率。\n * 索引需要使用物理文件存储，也会耗费一定空间。\n\n\n# 10.2 索引的底层数据结构\n\n# hash表 & b+树\n\n哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，因此哈希表可以快速检索数据（接近 o（1））。\n\n为何能够通过 key 快速取出 value呢？ 原因在于 哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到 value 对应的 index，找到了 index 也就找到了对应的 value。\n\n但是！哈希算法有个 hash 冲突 问题，也就是说多个不同的 key 最后得到的 index 相同。通常情况下，我们常用的解决办法是 链地址法。链地址法就是将哈希冲突数据存放在链表中。就比如 jdk1.8 之前 hashmap 就是通过链地址法来解决哈希冲突的。不过，jdk1.8 以后hashmap为了减少链表过长的时候搜索时间过长引入了红黑树。\n\n既然哈希表这么快，为什么mysql 没有使用其作为索引的数据结构呢？\n\n1.hash 冲突问题 ：我们上面也提到过hash 冲突了，不过对于数据库来说这还不算最大的缺点。\n\n2.hash 索引不支持顺序和范围查询(hash 索引不支持顺序和范围查询是它最大的缺点： 假如我们要对表中的数据进行排序或者进行范围查询，那 hash 索引可就不行了。\n\n# b 树& b+树\n\nb 树也称 b-树,全称为 多路平衡查找树 ，b+ 树是 b 树的一种变体。b 树和 b+树中的 b 是 balanced （平衡）的意思。\n\n目前大部分数据库系统及文件系统都采用 b-tree 或其变种 b+tree 作为索引结构。\n\nb 树& b+树两者有何异同呢？\n\n * b 树的所有节点既存放键(key) 也存放 数据(data)，而 b+树只有叶子节点存放 key 和 data，其他内节点只存放 key。\n * b 树的叶子节点都是独立的;b+树的叶子节点有一条引用链指向与它相邻的叶子节点。\n * b 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 b+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。\n\n\n# 10.3 索引类型\n\n# 主键索引(primary key)\n\n数据表的主键列使用的就是主键索引。\n\n一张数据表有只能有一个主键，并且主键不能为 null，不能重复。\n\n在 mysql 的 innodb 的表中，当没有显示的指定表的主键时，innodb 会自动先检查表中是否有唯一索引的字段，如果有，则选择该字段为默认的主键，否则 innodb 将会自动创建一个 6byte 的自增主键。\n\n# 二级索引(辅助索引)\n\n二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。\n\n唯一索引，普通索引，前缀索引等索引属于二级索引。\n\n 1. 唯一索引(unique key) ：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 null，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。\n 2. 普通索引(index) ：普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和 null。\n 3. 前缀索引(prefix) ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。\n 4. 全文索引(full text) ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。mysql5.6 之前只有 myisam 引擎支持全文索引，5.6 之后 innodb 也支持了全文索引。\n\n# 聚集索引与非聚集索引\n\n# 聚集索引\n\n聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。\n\n在 mysql 中，innodb 引擎的表的 .ibd文件就包含了该表的索引和数据，对于 innodb 引擎表来说，该表的索引(b+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。\n\n# 聚集索引的优点\n\n聚集索引的查询速度非常的快，因为整个 b+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。\n\n# 聚集索引的缺点\n\n 1. 依赖于有序的数据 ：因为 b+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 uuid 这种又长又难比较的数据，插入或查找的速度肯定比较慢。\n 2. 更新代价大 ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改， 而且况聚集索引的叶子节点还存放着数据，修改代价肯定是较大的， 所以对于主键索引来说，主键一般都是不可被修改的。\n\n# 非聚集索引\n\n非聚集索引即索引结构和数据分开存放的索引。\n\n二级索引属于非聚集索引。\n\n# 非聚集索引的优点\n\n更新代价比聚集索引要小 。非聚集索引的更新代价就没有聚集索引那么大了，非聚集索引的叶子节点是不存放数据的\n\n# 非聚集索引的缺点\n\n 1. 跟聚集索引一样，非聚集索引也依赖于有序的数据\n 2. 可能会二次查询(回表) :这应该是非聚集索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。\n\n\n# 10.4 创建索引的注意事项\n\n1.选择合适的字段创建索引：\n\n * 不为 null 的字段 ：索引字段的数据应该尽量不为 null，因为对于数据为 null 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 null，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。\n * 被频繁查询的字段 ：我们创建索引的字段应该是查询操作非常频繁的字段。\n * 被作为条件查询的字段 ：被作为 where 条件查询的字段，应该被考虑建立索引。\n * 频繁需要排序的字段 ：索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。\n * 被经常频繁用于连接的字段 ：经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。\n\n2.被频繁更新的字段应该慎重建立索引。\n\n虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。\n\n3.尽可能的考虑建立联合索引而不是单列索引。\n\n因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 b+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。\n\n4.注意避免冗余索引 。\n\n冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。\n\n5.考虑在字符串类型的字段上使用前缀索引代替普通索引。\n\n前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。\n\n\n# 11 innodb的锁机制和mvcc\n\n\n# 11.1 mvcc",charsets:{cjk:!0},lastUpdated:"2022/04/10, 11:42:00",lastUpdatedTimestamp:164956212e4},{title:"Spring",frontmatter:{title:"Spring",date:"2022-04-10T11:43:55.000Z",permalink:"/pages/5aa973/"},regularPath:"/02.%E6%A1%86%E6%9E%B6/01.Spring/01.%E5%9F%BA%E7%A1%80/01.Spring.html",relativePath:"02.框架/01.Spring/01.基础/01.Spring.md",key:"v-3fccfa19",path:"/pages/5aa973/",headers:[{level:2,title:"一、概述",slug:"一、概述",normalizedTitle:"一、概述",charIndex:2},{level:3,title:"1.1 设计理念和核心",slug:"_1-1-设计理念和核心",normalizedTitle:"1.1 设计理念和核心",charIndex:195},{level:3,title:"1.2 优缺点",slug:"_1-2-优缺点",normalizedTitle:"1.2 优缺点",charIndex:410},{level:2,title:"二、结构",slug:"二、结构",normalizedTitle:"二、结构",charIndex:571},{level:3,title:"2.1 组成模块",slug:"_2-1-组成模块",normalizedTitle:"2.1 组成模块",charIndex:580},{level:3,title:"2.2 用到的设计模式",slug:"_2-2-用到的设计模式",normalizedTitle:"2.2 用到的设计模式",charIndex:1314},{level:2,title:"三、IOC",slug:"三、ioc",normalizedTitle:"三、ioc",charIndex:1610},{level:3,title:"3.1 bean对象的注册",slug:"_3-1-bean对象的注册",normalizedTitle:"3.1 bean对象的注册",charIndex:1791},{level:4,title:"3.1.1 @Configuration 和 @Bean 的批量注册",slug:"_3-1-1-configuration-和-bean-的批量注册",normalizedTitle:"3.1.1 @configuration 和 @bean 的批量注册",charIndex:1808},{level:4,title:"3.1.2 @ComponentScan 扫描包",slug:"_3-1-2-componentscan-扫描包",normalizedTitle:"3.1.2 @componentscan 扫描包",charIndex:2087},{level:4,title:"3.1.3 @Import",slug:"_3-1-3-import",normalizedTitle:"3.1.3 @import",charIndex:2629},{level:3,title:"3.2 注解实现依赖注入",slug:"_3-2-注解实现依赖注入",normalizedTitle:"3.2 注解实现依赖注入",charIndex:2917},{level:4,title:"3.2.1 @Autowired",slug:"_3-2-1-autowired",normalizedTitle:"3.2.1 @autowired",charIndex:2933},{level:4,title:"3.2.2 @Resource",slug:"_3-2-2-resource",normalizedTitle:"3.2.2 @resource",charIndex:3274},{level:4,title:"3.2.3 其他注解",slug:"_3-2-3-其他注解",normalizedTitle:"3.2.3 其他注解",charIndex:3517},{level:3,title:"3.3 其他注解的作用",slug:"_3-3-其他注解的作用",normalizedTitle:"3.3 其他注解的作用",charIndex:3609},{level:4,title:"3.3.1 @Scope",slug:"_3-3-1-scope",normalizedTitle:"3.3.1 @scope",charIndex:3624},{level:4,title:"3.3.2 @DependsOn",slug:"_3-3-2-dependson",normalizedTitle:"3.3.2 @dependson",charIndex:3702},{level:4,title:"3.3.3 @ImportSource",slug:"_3-3-3-importsource",normalizedTitle:"3.3.3 @importsource",charIndex:3857},{level:4,title:"3.3.4 @Lazy",slug:"_3-3-4-lazy",normalizedTitle:"3.3.4 @lazy",charIndex:4029},{level:4,title:"3.3.5 @Value",slug:"_3-3-5-value",normalizedTitle:"3.3.5 @value",charIndex:4233},{level:3,title:"3.4 bean的生命周期",slug:"_3-4-bean的生命周期",normalizedTitle:"3.4 bean的生命周期",charIndex:4334},{level:3,title:"3.5 Bean循环依赖",slug:"_3-5-bean循环依赖",normalizedTitle:"3.5 bean循环依赖",charIndex:10152},{level:2,title:"四、AOP",slug:"四、aop",normalizedTitle:"四、aop",charIndex:10437},{level:3,title:"4.1 代理",slug:"_4-1-代理",normalizedTitle:"4.1 代理",charIndex:10621},{level:4,title:"4.1.1 静态代理",slug:"_4-1-1-静态代理",normalizedTitle:"4.1.1 静态代理",charIndex:10631},{level:4,title:"4.1.2 动态代理",slug:"_4-1-2-动态代理",normalizedTitle:"4.1.2 动态代理",charIndex:10645},{level:3,title:"4.2 AOP的一些概念",slug:"_4-2-aop的一些概念",normalizedTitle:"4.2 aop的一些概念",charIndex:12555},{level:2,title:"五、事务",slug:"五、事务",normalizedTitle:"五、事务",charIndex:13566},{level:3,title:"5.1 编程式事务",slug:"_5-1-编程式事务",normalizedTitle:"5.1 编程式事务",charIndex:13636},{level:3,title:"5.2 声明式事务",slug:"_5-2-声明式事务",normalizedTitle:"5.2 声明式事务",charIndex:13650},{level:4,title:"5.2.1 相关注解",slug:"_5-2-1-相关注解",normalizedTitle:"5.2.1 相关注解",charIndex:13766},{level:4,title:"5.2.2 事务的传播行为",slug:"_5-2-2-事务的传播行为",normalizedTitle:"5.2.2 事务的传播行为",charIndex:14822}],headersStr:"一、概述 1.1 设计理念和核心 1.2 优缺点 二、结构 2.1 组成模块 2.2 用到的设计模式 三、IOC 3.1 bean对象的注册 3.1.1 @Configuration 和 @Bean 的批量注册 3.1.2 @ComponentScan 扫描包 3.1.3 @Import 3.2 注解实现依赖注入 3.2.1 @Autowired 3.2.2 @Resource 3.2.3 其他注解 3.3 其他注解的作用 3.3.1 @Scope 3.3.2 @DependsOn 3.3.3 @ImportSource 3.3.4 @Lazy 3.3.5 @Value 3.4 bean的生命周期 3.5 Bean循环依赖 四、AOP 4.1 代理 4.1.1 静态代理 4.1.2 动态代理 4.2 AOP的一些概念 五、事务 5.1 编程式事务 5.2 声明式事务 5.2.1 相关注解 5.2.2 事务的传播行为",content:'# 一、概述\n\nSpring是一个轻量级的Java开发框架，目的是为了解决企业级应用开发的业务逻辑和其他各层的耦合问题。\n\nSpring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的两个核心特性，也就是依赖注入（dependency injection，DI） 和 面向切面编程（aspect-oriented programming，AOP）。\n\n\n# 1.1 设计理念和核心\n\nSpring设计理念：在JavaEE开发中，支持POJO和JavaBean开发方式，使应用面向接口开发，充分支持OO（面向对象）设计方法；Spring通过IoC容器实现对象耦合关系的管理，并实现依赖反转，将对象之间的依赖关系交给IoC容器，实现解耦；\n\nSpring框架的核心：IoC容器和AOP模块。通过IoC容器管理POJO对象以及他们之间的耦合关系；通过AOP以动态非侵入的方式增强服务。\n\n\n# 1.2 优缺点\n\n * 优点：\n   \n   1. 方便解耦，简化开发\n   2. AOP编程的支持\n   3. 声明式事务的支持\n   4. 方便程序的测试\n   5. 方便集成各种优秀框架\n   6. 降低JavaEE API的使用难度\n\n * 缺点：\n   \n   1. Spring依赖反射，反射影响性能\n\n\n# 二、结构\n\n\n# 2.1 组成模块\n\nSpring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在核心容器（Core Container） 、AOP（Aspect Oriented Programming）和设备支持（Instrmentation） 、数据访问与集成（Data Access/Integeration） 、 Web、 消息（Messaging） 、 Test等 6 个模块中。 以下是 Spring 5 的模块结构图：\n\n\n\n * spring core：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能。\n * spring beans：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。\n * spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。\n * spring jdbc：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析， 用于简化JDBC。\n * spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。\n * spring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。\n * spring test：主要为测试提供支持的，支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。\n\n\n# 2.2 用到的设计模式\n\n 1. 工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；\n 2. 单例模式：Bean默认为单例模式。\n 3. 代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；\n 4. 模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。\n 5. 观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如Spring中listener的实现–ApplicationListener。\n\n\n# 三、IOC\n\nInversion of Control 它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。\n\nSpring IOC 负责创建对象，管理对象（通过依赖注入（DI）），装配对象，配置对象，并且管理这些对象的整个生命周期。\n\n\n# 3.1 bean对象的注册\n\n# 3.1.1 @Configuration 和 @Bean 的批量注册\n\n@Configuration加在类上，让这个类的功能等同于一个 bean.xml 配置文件。\n\n注意\n\n被 @Configuration 修饰的类，spring容器中会通过cglib给这个类创建一个代理，代理会拦截所有被 @Bean 修饰的方法，默认情况（bean为单例）下确保这些方法只被调用一次，从而确保这些bean是同一个bean，即单例的。\n\n@Bean用到方法上，类似于 bean.xml 配置文件中的 bean 元素，用来在 spring 容器中注册一个 bean。\n\n# 3.1.2 @ComponentScan 扫描包\n\n@ComponentScan这个注解会让spring去扫描某些包及其子包中所有的类，然后将满足一定条件的类作为bean注册到spring容器容器中。\n\n提示\n\n所以玩这个注解，主要关注2个问题：\n\n第一个：需要扫描哪些包？通过value、backPackages、basePackageClasses这3个参数来控制\n\n第二：过滤器有哪些？通过useDefaultFilters、includeFilters、excludeFilters这3个参数来控制过滤器\n\n这两个问题搞清楚了，就可以确定哪些类会被注册到容器中。\n\n默认情况下，任何参数都不设置的情况下，此时，会将@ComponentScan修饰的类所在的包作为扫描包；默认情况下useDefaultFilters为true，这个为true的时候，spring容器内部会使用默认过滤器，规则是：凡是类上有@Repository、@Service、@Controller、@Component这几个注解中的任何一个的，那么这个类就会被作为bean注册到spring容器中，所以默认情况下，只需在类上加上这几个注解中的任何一个，这些类就会自动交给spring容器来管理了。\n\n# 3.1.3 @Import\n\n@Import可以用来批量导入需要注册的各种类，如普通的类、配置类，完后完成普通类和配置类中所有bean的注册。\n\n注意\n\n@Import的value常见的有5种用法\n\n 1. value为普通的类\n 2. value为@Configuration标注的类\n 3. value为@CompontentScan标注的类\n 4. value为ImportBeanDefinitionRegistrar接口类型\n 5. value为ImportSelector接口类型\n 6. value为DeferredImportSelector接口类型\n\n\n# 3.2 注解实现依赖注入\n\n# 3.2.1 @Autowired\n\n实现依赖注入，spring容器会对bean中所有字段、方法进行遍历，标注有@Autowired注解的，都会进行注入。\n\n多个参数的时候，方法上面的@Autowire默认对方法中所有参数起效，如果我们想对某个参数进行特定的配置，可以在参数上加上@Autowired(required = false)，这个配置会覆盖方法上面的@Autowired配置。\n\nrequired为false：表示这个bean不是强制注入的，能找到就注入，找不到就注入一个null对象\n\n注意\n\n@Autowired 查找候选者的过程\n\n按类型找->通过限定符@Qualifier过滤->@Primary->@Priority->根据名称找（字段名称或者方法名称）\n\n# 3.2.2 @Resource\n\n和@Autowired注解类似，也是用来注入依赖的对象的，spring容器会对bean中所有字段、方法进行遍历，标注有@Resource注解的，都会进行注入。\n\n注意\n\n@Resource 查找候选者的过程\n\n先按Resource的name值作为bean名称找->按名称（字段名称、方法名称、set属性名称）找->按类型找->通过限定符@Qualifier过滤->@Primary->@Priority->根据名称找（字段名称或者方法参数名称）\n\n# 3.2.3 其他注解\n\n * @Qualifier：可以在依赖注入查找候选者的过程中对候选者进行过滤。用在类、字段、方法和方法参数上\n * @Primary：设置为主要候选者\n\n\n# 3.3 其他注解的作用\n\n# 3.3.1 @Scope\n\n指定bean的作用域。\n\n用法：\n\n 1. 和@Compontent一起使用在类上\n 2. 和@Bean一起标注在方法上\n\n# 3.3.2 @DependsOn\n\n指定当前bean依赖的bean，@DependsOn可以指定当前bean依赖的bean，通过这个可以确保@DependsOn指定的bean在当前bean创建之前先创建好\n\n用法：\n\n 1. 和@Compontent一起使用在类上\n 2. 和@Bean一起标注在方法上\n\n# 3.3.3 @ImportSource\n\n配置类中导入bean定义的配置文件，有些项目，前期可能采用xml的方式配置bean，后期可能想采用spring注解的方式来重构项目，但是有些老的模块可能还是xml的方式，spring为了方便在注解方式中兼容老的xml的方式，提供了@ImportResource注解来引入bean定义的配置文件。\n\n# 3.3.4 @Lazy\n\n延迟初始化，@Lazy等效于bean xml中bean元素的lazy-init属性，可以实现bean的延迟初始化。\n\n用法：\n\n 1. 和@Compontent一起标注在类上，可以是这个类延迟初始化\n 2. 和@Configuration一起标注在配置类中，可以让当前配置类中通过@Bean注册的bean延迟初始化\n 3. 和@Bean一起使用，可以使当前bean延迟初始化\n\n# 3.3.5 @Value\n\n@Value可以标注在字段上面，可以引入外部配置文件中的数据，比如可以将数据库的一些配置信息放在配置文件中，然后通过@Value的方式将其注入到bean的一些字段中\n\n\n# 3.4 bean的生命周期\n\n 1. 将各种方式定义的bean的信息，解析成BeanDefinition对象,注册到spring容器中。\n    \n    注意\n    \n    BeanDefinition里面里面包含了bean定义的各种信息，如：bean对应的class、scope、lazy信息、dependOn信息、autowireCandidate（是否是候选对象）、primary（是否是主要的候选者）等信息。\n\n 2. bean 的注册\n    \n    bean注册阶段需要用到一个非常重要的接口：BeanDefinitionRegistry\n    \n    BeanDefinitionRegistry唯一实现：DefaultListableBeanFactory\n\n 3. BeanDefinition合并阶段\n    \n    可能我们定义bean的时候有父子bean关系，此时子BeanDefinition中的信息是不完整的，比如设置属性的时候配置在父BeanDefinition中，此时子BeanDefinition中是没有这些信息的，需要将子bean的BeanDefinition和父bean的BeanDefinition进行合并，得到最终的一个RootBeanDefinition，合并之后得到的RootBeanDefinition包含bean定义的所有信息，包含了从父bean中继继承过来的所有信息，后续bean的所有创建工作就是依靠合并之后BeanDefinition来进行的。\n\n 4. Bean Class加载阶段 这个阶段就是将bean的class名称转换为Class类型的对象。此时会对阶段3中合并产生的RootBeanDefinition中的beanClass进行解析，将bean的类名转换为Class对象，然后赋值给beanClass字段。\n\n 5. 通过反射调用bean的构造器，实例化bean\n    \n    Bean实例化前操作\n    \n    先来看一下DefaultListableBeanFactory，这个类中有个非常非常重要的字段：\n    \n    private final List<BeanPostProcessor> beanPostProcessors = new CopyOnWriteArrayList<>();\n    \n    \n    是一个BeanPostProcessor类型的集合\n    \n    BeanPostProcessor是一个接口，还有很多子接口，这些接口中提供了很多方法，spring在bean生命周期的不同阶段，会调用上面这个列表中的BeanPostProcessor中的一些方法，来对生命周期进行扩展，bean生命周期中的所有扩展点都是依靠这个集合中的BeanPostProcessor来实现的，所以如果大家想对bean的生命周期进行干预，这块一定要掌握好。\n    \n    注意：本文中很多以BeanPostProcessor结尾的，都实现了BeanPostProcessor接口，有些是直接实现的，有些是实现了它的子接口。\n    \n    Bean实例化之前会调用一段代码：\n    \n    @Nullable\n        protected Object applyBeanPostProcessorsBeforeInstantiation(Class<?> beanClass, String beanName) {\n            for (BeanPostProcessor bp : getBeanPostProcessors()) {\n                if (bp instanceof InstantiationAwareBeanPostProcessor) {\n                    InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;\n                    Object result = ibp.postProcessBeforeInstantiation(beanClass, beanName);\n                    if (result != null) {\n                        return result;\n                    }\n                }\n            }\n            return null;\n        }\n    \n    \n    这段代码在bean实例化之前给开发者留了个口子，开发者自己可以在这个地方直接去创建一个对象作为bean实例，而跳过spring内部实例化bean的过程。\n    \n    上面代码中轮询beanPostProcessors列表，如果类型是InstantiationAwareBeanPostProcessor， 尝试调用InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation获取bean的实例对象，如果能够获取到，那么将返回值作为当前bean的实例，那么spring自带的实例化bean的过程就被跳过了。\n    \n    postProcessBeforeInstantiation方法如下：\n    \n    default Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {\n        return null;\n    }\n    \n    \n    > 这个地方给开发者提供了一个扩展点，允许开发者在这个方法中直接返回bean的一个实例。\n    \n    实际上，在实例化前阶段对bean的创建进行干预的情况，用的非常少，所以大部分bean的创建还会继续走下面的阶段。\n    \n    Bean实例化操作\n    \n    这个过程可以干什么？\n    \n    这个过程会通过反射来调用bean的构造器来创建bean的实例。\n    \n    具体需要使用哪个构造器，spring为开发者提供了一个接口，允许开发者自己来判断用哪个构造器。\n    \n    看一下这块的代码逻辑：\n    \n    for (BeanPostProcessor bp : getBeanPostProcessors()) {\n        if (bp instanceof SmartInstantiationAwareBeanPostProcessor) {\n            SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp;\n            Constructor<?>[] ctors = ibp.determineCandidateConstructors(beanClass, beanName);\n            if (ctors != null) {\n                return ctors;\n            }\n        }\n    }\n    \n    \n    会调用SmartInstantiationAwareBeanPostProcessor接口的determineCandidateConstructors方法，这个方法会返回候选的构造器列表，也可以返回空，看一下这个方法的源码：\n    \n    @Nullable\n    default Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName)\n    throws BeansException {\n    \n        return null;\n    }\n    \n    \n    这个方法有个比较重要的实现类\n    \n    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor\n    \n    \n    可以将@Autowired标注的方法作为候选构造器返回。\n\n 6. bean的属性填充\n    \n    注意\n    \n    Bean 属性赋值前会调用InstantiationAwareBeanPostProcessor接口的postProcessProperties方法\n    \n    Bean 属性赋值阶段，这个过程比较简单了，循环处理PropertyValues中的属性值信息，通过反射调用set方法将属性的值设置到bean实例中。\n\n 7. bean的初始化阶段\n    \n    * Bean Aware 接口回调\n      \n      private void invokeAwareMethods(final String beanName, final Object bean) {\n              if (bean instanceof Aware) {\n                  if (bean instanceof BeanNameAware) {\n                      ((BeanNameAware) bean).setBeanName(beanName);\n                  }\n                  if (bean instanceof BeanClassLoaderAware) {\n                      ClassLoader bcl = getBeanClassLoader();\n                      if (bcl != null) {\n                          ((BeanClassLoaderAware) bean).setBeanClassLoader(bcl);\n                      }\n                  }\n                  if (bean instanceof BeanFactoryAware) {\n                      ((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.this);\n                  }\n              }\n          }\n      \n      \n      如果我们的bean实例实现了上面的接口，会按照下面的顺序依次进行调用：\n      \n      BeanNameAware：将bean的名称注入进去\n      BeanClassLoaderAware：将BeanClassLoader注入进去\n      BeanFactoryAware：将BeanFactory注入进去\n      \n    \n    * 初始化前\n      \n      会调用BeanPostProcessor的postProcessBeforeInitialization方法，若返回null，当前方法将结束。\n    \n    * 初始化阶段\n      \n      2个步骤\n      \n      1. 调用InitializingBean接口的afterPropertiesSet方法\n      2. 调用定义bean的时候指定的初始化方法（@Bean(initMethod = "初始化的方法")）。\n    \n    * 初始化后\n      \n      调用BeanPostProcessor接口的postProcessAfterInitialization方法，返回null的时候，会中断上面的操作。\n\n 8. bean的使用阶段\n\n 9. bean的销毁阶段\n    \n    笔记\n    \n     3. 触发bean销毁的几种方式:\n    \n     4. 调用org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#destroyBean\n    \n     5. 调用org.springframework.beans.factory.config.ConfigurableBeanFactory#destroySingletons\n    \n     6. 调用ApplicationContext中的close方法\n    \n    Bean销毁阶段会依次执行\n    \n     1. 轮询beanPostProcessors列表，如果是DestructionAwareBeanPostProcessor这种类型的，会调用其内部的postProcessBeforeDestruction方法\n     2. 如果bean实现了org.springframework.beans.factory.DisposableBean接口，会调用这个接口中的destroy方法\n     3. 调用bean自定义的销毁方法(@Bean(destroyMethod = "销毁的方法"))\n\n\n# 3.5 Bean循环依赖\n\n多个bean之间相互依赖，形成了一个闭环。\n\n检测循环依赖：检测循环依赖比较简单，使用一个列表来记录正在创建中的bean，bean创建之前，先去记录中看一下自己是否已经在列表中了，如果在，说明存在循环依赖，如果不在，则将其加入到这个列表，bean创建完毕之后，将其再从这个列表中移除。\n\n解决循环依赖：\n\n * 构造器的循环依赖无法解决\n * 只有单例的bean会通过三级缓存提前暴露来解决循环依赖的问题，而非单例的bean，每次从容器中获取都是一个新的对象，都会重新创建，所以非单例的bean是没有缓存的，不会将其放到三级缓存中。\n\n\n# 四、AOP\n\n面向切面编程，spring中提供的一些非常牛逼的功能都是通过aop实现的，比如下面这些大家比较熟悉的功能\n\nspring事务管理：@Transactional\n\nspring异步处理：@EnableAsync\n\nspring缓存技术的使用：@EnableCaching\n\nspring中各种拦截器：@EnableAspectJAutoProxy\n\n\n# 4.1 代理\n\n# 4.1.1 静态代理\n\n# 4.1.2 动态代理\n\n * JDK 动态代理\n   \n   jdk中为实现代理提供了支持，主要用到2个类：\n   \n   java.lang.reflect.Proxy\n   java.lang.reflect.InvocationHandler\n   \n   \n   * proxy\n     \n     里面的一些重要的静态方法\n     \n     //为指定的接口创建代理类，返回代理类的Class对象\n     public static Class<?> getProxyClass(ClassLoader loader,Class<?>... interfaces)\n     //创建代理类的实例对象\n     public static Object newProxyInstance(ClassLoader loader,\n                                           Class<?>[] interfaces,\n                                           InvocationHandler h)\n     //判断指定的类是否是一个代理类\n     public static boolean isProxyClass(Class<?> cl)\n     //获取代理对象的InvocationHandler对象\n     public static InvocationHandler getInvocationHandler(Object proxy)\n         throws IllegalArgumentException\n     \n     \n     创建方式一:\n     \n     笔记\n     \n      1. 调用Proxy.getProxyClass方法获取代理类的Class对象\n      2. 使用InvocationHandler接口创建代理类的处理器\n      3. 通过代理类和InvocationHandler创建代理对象\n      4. 上面已经创建好代理对象了，接着我们就可以使用代理对象了\n     \n     创建方式二:\n     \n     笔记\n     \n      5. 使用InvocationHandler接口创建代理类的处理器\n      6. 使用Proxy类的静态方法newProxyInstance直接创建代理对象\n      7. 使用代理对象\n\n注意\n\nJDK动态代理只能为接口或接口的实现类创建代理类，不能直接给普通类创建代理类。\n\nJDK动态代理是编译时增强。\n\n * CGLIB 动态代理\n\njdk动态代理只能为接口创建代理，使用上有局限性。实际的场景中我们的类不一定有接口，此时如果我们想为普通的类也实现代理功能，我们就需要用到cglib来实现了。\n\ncglib是一个强大、高性能的字节码生成库，它用于在运行时扩展Java类和实现接口；本质上它是通过动态的生成一个子类去覆盖所要代理的类（非final修饰的类和方法）。Enhancer可能是CGLIB中最常用的一个类，和jdk中的Proxy不同的是，Enhancer既能够代理普通的class，也能够代理接口。\n\n创建方式：\n\n笔记\n\n 1. 定义一个类；\n 2. 自定义 MethodInterceptor 并重写 intercept 方法，intercept用于拦截增强被代理类的方法，和 JDK 动态代理中的 invoke 方法类似；\n 3. 通过 Enhancer 类的 create()创建代理类；\n\n特点：\n\n 1. cglib弥补了jdk动态代理的不足，jdk动态代理只能为接口创建代理，而cglib非常强大，不管是接口还是类，都可以使用cglib来创建代理\n 2. cglib创建代理的过程，相当于创建了一个新的类，可以通过cglib来配置这个新的类需要实现的接口，以及需要继承的父类\n 3. cglib可以为类创建代理，但是这个类不能是final类型的，cglib为类创建代理的过程，实际上为通过继承来实现的，相当于给需要被代理的类创建了一个子类，然后会重写父类中的方法，来进行增强，继承的特性大家应该都知道，final修饰的类是不能被继承的，final修饰的方法不能被重写，static修饰的方法也不能被重写，private修饰的方法也不能被子类重写，而其他类型的方法都可以被子类重写，被重写的这些方法可以通过cglib进行拦截增强\n\n\n# 4.2 AOP的一些概念\n\n * 目标对象(target)\n   \n   目标对象指将要被增强的对象，即包含主业务逻辑的类对象。\n\n * 连接点(JoinPoint)\n   \n   程序执行过程中明确的点，如方法的调用或特定的异常被抛出。\n   \n   连接点由两个信息确定：\n   \n   方法(表示程序执行点，即在哪个目标方法)\n   \n   相对点(表示方位，即目标方法的什么位置，比如调用前，后等)\n   \n   简单来说，连接点就是被拦截到的程序执行点，因为Spring只支持方法类型的连接点，所以在Spring中连接点就是被拦截到的方法。\n\n * 代理对象(Proxy)\n   \n   AOP中会通过代理的方式，对目标对象生成一个代理对象，代理对象中会加入需要增强功能，通过代理对象来间接的方式目标对象，起到增强目标对象的效果。\n\n * 通知(Advice)\n   \n   需要在目标对象中增强的功能，如上面说的：业务方法前验证用户的功能、方法执行之后打印方法的执行日志。\n   \n   通知中有2个重要的信息：方法的什么地方，执行什么操作，这2个信息通过通知来指定。\n   \n   方法的什么地方？之前、之后、包裹目标方法、方法抛出异常后等。\n   \n   如：\n   \n   在方法执行之前验证用户是否有效。\n   \n   在方法执行之后，打印方法的执行耗时。\n   \n   在方法抛出异常后，记录异常信息发送到mq。\n\n * 切入点(Pointcut )\n   \n   用来指定需要将通知使用到哪些地方，比如需要用在哪些类的哪些方法上，切入点就是做这个配置的。\n\n * 切面（Aspect）\n   \n   通知（Advice）和切入点（Pointcut）的组合。切面来定义在哪些地方（Pointcut）执行什么操作（Advice）。\n\n * 顾问（Advisor)\n   \n   Advisor 其实它就是 Pointcut 与 Advice 的组合，Advice 是要增强的逻辑，而增强的逻辑要在什么地方执行是通过Pointcut来指定的，所以 Advice 必需与 Pointcut 组合在一起，这就诞生了 Advisor 这个类，spring Aop中提供了一个Advisor接口将Pointcut 与 Advice 的组合起来。\n   \n   Advisor有好几个称呼：顾问、通知器。\n\n\n# 五、事务\n\nspring 使用事务的两种方式：\n\n * 编程式事务:硬编码的方式\n * 声明式事务:@Transaction的方式\n\n\n# 5.1 编程式事务\n\n\n# 5.2 声明式事务\n\n所谓声明式事务，就是通过配置的方式，比如通过配置文件（xml）或者注解的方式，告诉spring，哪些方法需要spring帮忙管理事务，然后开发者只用关注业务代码，而事务的事情spring自动帮我们控制。\n\n# 5.2.1 相关注解\n\n * @EnableTransactionManagement\n   \n   笔记\n   \n   当spring容器启动的时候，发现有@EnableTransactionManagement注解，此时会拦截所有bean的创建，扫描看一下bean上是否有@Transaction注解（类、或者父类、或者接口、或者方法中有这个注解都可以），如果有这个注解，spring会通过aop的方式给bean生成代理对象，代理对象中会增加一个拦截器，拦截器会拦截bean中public方法执行，会在方法执行之前启动事务，方法执行完毕之后提交或者回滚事务。\n   \n   * 定义事务管理器 事务交给spring管理，那么你肯定要创建一个或者多个事务管理者，有这些管理者来管理具体的事务，比如启动事务、提交事务、回滚事务，这些都是管理者来负责的。\n   \n   spring中使用PlatformTransactionManager这个接口来表示事务管理者。\n   \n   PlatformTransactionManager多个实现类，用来应对不同的环境\n   \n   1. JpaTransactionManager：如果你用jpa来操作db，那么需要用这个管理器来帮你控制事务。\n   2. DataSourceTransactionManager：如果你用是指定数据源的方式，比如操作数据库用的是：JdbcTemplate、mybatis ibatis，那么需要用这个管理器来帮你控制事务。\n   3. HibernateTransactionManager：如果你用hibernate来操作db，那么需要用这个管理器来帮你控制事务\n   4. JtaTransactionManager：如果你用的是java中的jta来操作db，这种通常是分布式事务，此时需要用这种管理器来控制事务。\n\n * @Transaction\n   \n   需使用事务的目标上加@Transaction注解\n   \n   * @Transaction放在接口上，那么接口的实现类中所有public都被spring自动加上事务\n   * @Transaction放在类上，那么当前类以及其下无限级子类中所有pubilc方法将被spring自动加上事务\n   * @Transaction放在public方法上，那么该方法将被spring自动加上事务\n   * 注意：@Transaction只对public方法有效\n\n# 5.2.2 事务的传播行为\n\n事务传播行为（propagation behavior）指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行。\n\n\n\n 1. PROPAGATION_REQUIRED',normalizedContent:'# 一、概述\n\nspring是一个轻量级的java开发框架，目的是为了解决企业级应用开发的业务逻辑和其他各层的耦合问题。\n\nspring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的两个核心特性，也就是依赖注入（dependency injection，di） 和 面向切面编程（aspect-oriented programming，aop）。\n\n\n# 1.1 设计理念和核心\n\nspring设计理念：在javaee开发中，支持pojo和javabean开发方式，使应用面向接口开发，充分支持oo（面向对象）设计方法；spring通过ioc容器实现对象耦合关系的管理，并实现依赖反转，将对象之间的依赖关系交给ioc容器，实现解耦；\n\nspring框架的核心：ioc容器和aop模块。通过ioc容器管理pojo对象以及他们之间的耦合关系；通过aop以动态非侵入的方式增强服务。\n\n\n# 1.2 优缺点\n\n * 优点：\n   \n   1. 方便解耦，简化开发\n   2. aop编程的支持\n   3. 声明式事务的支持\n   4. 方便程序的测试\n   5. 方便集成各种优秀框架\n   6. 降低javaee api的使用难度\n\n * 缺点：\n   \n   1. spring依赖反射，反射影响性能\n\n\n# 二、结构\n\n\n# 2.1 组成模块\n\nspring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在核心容器（core container） 、aop（aspect oriented programming）和设备支持（instrmentation） 、数据访问与集成（data access/integeration） 、 web、 消息（messaging） 、 test等 6 个模块中。 以下是 spring 5 的模块结构图：\n\n\n\n * spring core：提供了框架的基本组成部分，包括控制反转（inversion of control，ioc）和依赖注入（dependency injection，di）功能。\n * spring beans：提供了beanfactory，是工厂模式的一个经典实现，spring将管理对象称为bean。\n * spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。\n * spring jdbc：提供了一个jdbc的抽象层，消除了烦琐的jdbc编码和数据库厂商特有的错误代码解析， 用于简化jdbc。\n * spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。\n * spring web：提供了针对 web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 web 的 applicationcontext。\n * spring test：主要为测试提供支持的，支持使用junit或testng对spring组件进行单元测试和集成测试。\n\n\n# 2.2 用到的设计模式\n\n 1. 工厂模式：beanfactory就是简单工厂模式的体现，用来创建对象的实例；\n 2. 单例模式：bean默认为单例模式。\n 3. 代理模式：spring的aop功能用到了jdk的动态代理和cglib字节码生成技术；\n 4. 模板方法：用来解决代码重复的问题。比如. resttemplate, jmstemplate, jpatemplate。\n 5. 观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如spring中listener的实现–applicationlistener。\n\n\n# 三、ioc\n\ninversion of control 它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。\n\nspring ioc 负责创建对象，管理对象（通过依赖注入（di）），装配对象，配置对象，并且管理这些对象的整个生命周期。\n\n\n# 3.1 bean对象的注册\n\n# 3.1.1 @configuration 和 @bean 的批量注册\n\n@configuration加在类上，让这个类的功能等同于一个 bean.xml 配置文件。\n\n注意\n\n被 @configuration 修饰的类，spring容器中会通过cglib给这个类创建一个代理，代理会拦截所有被 @bean 修饰的方法，默认情况（bean为单例）下确保这些方法只被调用一次，从而确保这些bean是同一个bean，即单例的。\n\n@bean用到方法上，类似于 bean.xml 配置文件中的 bean 元素，用来在 spring 容器中注册一个 bean。\n\n# 3.1.2 @componentscan 扫描包\n\n@componentscan这个注解会让spring去扫描某些包及其子包中所有的类，然后将满足一定条件的类作为bean注册到spring容器容器中。\n\n提示\n\n所以玩这个注解，主要关注2个问题：\n\n第一个：需要扫描哪些包？通过value、backpackages、basepackageclasses这3个参数来控制\n\n第二：过滤器有哪些？通过usedefaultfilters、includefilters、excludefilters这3个参数来控制过滤器\n\n这两个问题搞清楚了，就可以确定哪些类会被注册到容器中。\n\n默认情况下，任何参数都不设置的情况下，此时，会将@componentscan修饰的类所在的包作为扫描包；默认情况下usedefaultfilters为true，这个为true的时候，spring容器内部会使用默认过滤器，规则是：凡是类上有@repository、@service、@controller、@component这几个注解中的任何一个的，那么这个类就会被作为bean注册到spring容器中，所以默认情况下，只需在类上加上这几个注解中的任何一个，这些类就会自动交给spring容器来管理了。\n\n# 3.1.3 @import\n\n@import可以用来批量导入需要注册的各种类，如普通的类、配置类，完后完成普通类和配置类中所有bean的注册。\n\n注意\n\n@import的value常见的有5种用法\n\n 1. value为普通的类\n 2. value为@configuration标注的类\n 3. value为@compontentscan标注的类\n 4. value为importbeandefinitionregistrar接口类型\n 5. value为importselector接口类型\n 6. value为deferredimportselector接口类型\n\n\n# 3.2 注解实现依赖注入\n\n# 3.2.1 @autowired\n\n实现依赖注入，spring容器会对bean中所有字段、方法进行遍历，标注有@autowired注解的，都会进行注入。\n\n多个参数的时候，方法上面的@autowire默认对方法中所有参数起效，如果我们想对某个参数进行特定的配置，可以在参数上加上@autowired(required = false)，这个配置会覆盖方法上面的@autowired配置。\n\nrequired为false：表示这个bean不是强制注入的，能找到就注入，找不到就注入一个null对象\n\n注意\n\n@autowired 查找候选者的过程\n\n按类型找->通过限定符@qualifier过滤->@primary->@priority->根据名称找（字段名称或者方法名称）\n\n# 3.2.2 @resource\n\n和@autowired注解类似，也是用来注入依赖的对象的，spring容器会对bean中所有字段、方法进行遍历，标注有@resource注解的，都会进行注入。\n\n注意\n\n@resource 查找候选者的过程\n\n先按resource的name值作为bean名称找->按名称（字段名称、方法名称、set属性名称）找->按类型找->通过限定符@qualifier过滤->@primary->@priority->根据名称找（字段名称或者方法参数名称）\n\n# 3.2.3 其他注解\n\n * @qualifier：可以在依赖注入查找候选者的过程中对候选者进行过滤。用在类、字段、方法和方法参数上\n * @primary：设置为主要候选者\n\n\n# 3.3 其他注解的作用\n\n# 3.3.1 @scope\n\n指定bean的作用域。\n\n用法：\n\n 1. 和@compontent一起使用在类上\n 2. 和@bean一起标注在方法上\n\n# 3.3.2 @dependson\n\n指定当前bean依赖的bean，@dependson可以指定当前bean依赖的bean，通过这个可以确保@dependson指定的bean在当前bean创建之前先创建好\n\n用法：\n\n 1. 和@compontent一起使用在类上\n 2. 和@bean一起标注在方法上\n\n# 3.3.3 @importsource\n\n配置类中导入bean定义的配置文件，有些项目，前期可能采用xml的方式配置bean，后期可能想采用spring注解的方式来重构项目，但是有些老的模块可能还是xml的方式，spring为了方便在注解方式中兼容老的xml的方式，提供了@importresource注解来引入bean定义的配置文件。\n\n# 3.3.4 @lazy\n\n延迟初始化，@lazy等效于bean xml中bean元素的lazy-init属性，可以实现bean的延迟初始化。\n\n用法：\n\n 1. 和@compontent一起标注在类上，可以是这个类延迟初始化\n 2. 和@configuration一起标注在配置类中，可以让当前配置类中通过@bean注册的bean延迟初始化\n 3. 和@bean一起使用，可以使当前bean延迟初始化\n\n# 3.3.5 @value\n\n@value可以标注在字段上面，可以引入外部配置文件中的数据，比如可以将数据库的一些配置信息放在配置文件中，然后通过@value的方式将其注入到bean的一些字段中\n\n\n# 3.4 bean的生命周期\n\n 1. 将各种方式定义的bean的信息，解析成beandefinition对象,注册到spring容器中。\n    \n    注意\n    \n    beandefinition里面里面包含了bean定义的各种信息，如：bean对应的class、scope、lazy信息、dependon信息、autowirecandidate（是否是候选对象）、primary（是否是主要的候选者）等信息。\n\n 2. bean 的注册\n    \n    bean注册阶段需要用到一个非常重要的接口：beandefinitionregistry\n    \n    beandefinitionregistry唯一实现：defaultlistablebeanfactory\n\n 3. beandefinition合并阶段\n    \n    可能我们定义bean的时候有父子bean关系，此时子beandefinition中的信息是不完整的，比如设置属性的时候配置在父beandefinition中，此时子beandefinition中是没有这些信息的，需要将子bean的beandefinition和父bean的beandefinition进行合并，得到最终的一个rootbeandefinition，合并之后得到的rootbeandefinition包含bean定义的所有信息，包含了从父bean中继继承过来的所有信息，后续bean的所有创建工作就是依靠合并之后beandefinition来进行的。\n\n 4. bean class加载阶段 这个阶段就是将bean的class名称转换为class类型的对象。此时会对阶段3中合并产生的rootbeandefinition中的beanclass进行解析，将bean的类名转换为class对象，然后赋值给beanclass字段。\n\n 5. 通过反射调用bean的构造器，实例化bean\n    \n    bean实例化前操作\n    \n    先来看一下defaultlistablebeanfactory，这个类中有个非常非常重要的字段：\n    \n    private final list<beanpostprocessor> beanpostprocessors = new copyonwritearraylist<>();\n    \n    \n    是一个beanpostprocessor类型的集合\n    \n    beanpostprocessor是一个接口，还有很多子接口，这些接口中提供了很多方法，spring在bean生命周期的不同阶段，会调用上面这个列表中的beanpostprocessor中的一些方法，来对生命周期进行扩展，bean生命周期中的所有扩展点都是依靠这个集合中的beanpostprocessor来实现的，所以如果大家想对bean的生命周期进行干预，这块一定要掌握好。\n    \n    注意：本文中很多以beanpostprocessor结尾的，都实现了beanpostprocessor接口，有些是直接实现的，有些是实现了它的子接口。\n    \n    bean实例化之前会调用一段代码：\n    \n    @nullable\n        protected object applybeanpostprocessorsbeforeinstantiation(class<?> beanclass, string beanname) {\n            for (beanpostprocessor bp : getbeanpostprocessors()) {\n                if (bp instanceof instantiationawarebeanpostprocessor) {\n                    instantiationawarebeanpostprocessor ibp = (instantiationawarebeanpostprocessor) bp;\n                    object result = ibp.postprocessbeforeinstantiation(beanclass, beanname);\n                    if (result != null) {\n                        return result;\n                    }\n                }\n            }\n            return null;\n        }\n    \n    \n    这段代码在bean实例化之前给开发者留了个口子，开发者自己可以在这个地方直接去创建一个对象作为bean实例，而跳过spring内部实例化bean的过程。\n    \n    上面代码中轮询beanpostprocessors列表，如果类型是instantiationawarebeanpostprocessor， 尝试调用instantiationawarebeanpostprocessor#postprocessbeforeinstantiation获取bean的实例对象，如果能够获取到，那么将返回值作为当前bean的实例，那么spring自带的实例化bean的过程就被跳过了。\n    \n    postprocessbeforeinstantiation方法如下：\n    \n    default object postprocessbeforeinstantiation(class<?> beanclass, string beanname) throws beansexception {\n        return null;\n    }\n    \n    \n    > 这个地方给开发者提供了一个扩展点，允许开发者在这个方法中直接返回bean的一个实例。\n    \n    实际上，在实例化前阶段对bean的创建进行干预的情况，用的非常少，所以大部分bean的创建还会继续走下面的阶段。\n    \n    bean实例化操作\n    \n    这个过程可以干什么？\n    \n    这个过程会通过反射来调用bean的构造器来创建bean的实例。\n    \n    具体需要使用哪个构造器，spring为开发者提供了一个接口，允许开发者自己来判断用哪个构造器。\n    \n    看一下这块的代码逻辑：\n    \n    for (beanpostprocessor bp : getbeanpostprocessors()) {\n        if (bp instanceof smartinstantiationawarebeanpostprocessor) {\n            smartinstantiationawarebeanpostprocessor ibp = (smartinstantiationawarebeanpostprocessor) bp;\n            constructor<?>[] ctors = ibp.determinecandidateconstructors(beanclass, beanname);\n            if (ctors != null) {\n                return ctors;\n            }\n        }\n    }\n    \n    \n    会调用smartinstantiationawarebeanpostprocessor接口的determinecandidateconstructors方法，这个方法会返回候选的构造器列表，也可以返回空，看一下这个方法的源码：\n    \n    @nullable\n    default constructor<?>[] determinecandidateconstructors(class<?> beanclass, string beanname)\n    throws beansexception {\n    \n        return null;\n    }\n    \n    \n    这个方法有个比较重要的实现类\n    \n    org.springframework.beans.factory.annotation.autowiredannotationbeanpostprocessor\n    \n    \n    可以将@autowired标注的方法作为候选构造器返回。\n\n 6. bean的属性填充\n    \n    注意\n    \n    bean 属性赋值前会调用instantiationawarebeanpostprocessor接口的postprocessproperties方法\n    \n    bean 属性赋值阶段，这个过程比较简单了，循环处理propertyvalues中的属性值信息，通过反射调用set方法将属性的值设置到bean实例中。\n\n 7. bean的初始化阶段\n    \n    * bean aware 接口回调\n      \n      private void invokeawaremethods(final string beanname, final object bean) {\n              if (bean instanceof aware) {\n                  if (bean instanceof beannameaware) {\n                      ((beannameaware) bean).setbeanname(beanname);\n                  }\n                  if (bean instanceof beanclassloaderaware) {\n                      classloader bcl = getbeanclassloader();\n                      if (bcl != null) {\n                          ((beanclassloaderaware) bean).setbeanclassloader(bcl);\n                      }\n                  }\n                  if (bean instanceof beanfactoryaware) {\n                      ((beanfactoryaware) bean).setbeanfactory(abstractautowirecapablebeanfactory.this);\n                  }\n              }\n          }\n      \n      \n      如果我们的bean实例实现了上面的接口，会按照下面的顺序依次进行调用：\n      \n      beannameaware：将bean的名称注入进去\n      beanclassloaderaware：将beanclassloader注入进去\n      beanfactoryaware：将beanfactory注入进去\n      \n    \n    * 初始化前\n      \n      会调用beanpostprocessor的postprocessbeforeinitialization方法，若返回null，当前方法将结束。\n    \n    * 初始化阶段\n      \n      2个步骤\n      \n      1. 调用initializingbean接口的afterpropertiesset方法\n      2. 调用定义bean的时候指定的初始化方法（@bean(initmethod = "初始化的方法")）。\n    \n    * 初始化后\n      \n      调用beanpostprocessor接口的postprocessafterinitialization方法，返回null的时候，会中断上面的操作。\n\n 8. bean的使用阶段\n\n 9. bean的销毁阶段\n    \n    笔记\n    \n     3. 触发bean销毁的几种方式:\n    \n     4. 调用org.springframework.beans.factory.support.abstractautowirecapablebeanfactory#destroybean\n    \n     5. 调用org.springframework.beans.factory.config.configurablebeanfactory#destroysingletons\n    \n     6. 调用applicationcontext中的close方法\n    \n    bean销毁阶段会依次执行\n    \n     1. 轮询beanpostprocessors列表，如果是destructionawarebeanpostprocessor这种类型的，会调用其内部的postprocessbeforedestruction方法\n     2. 如果bean实现了org.springframework.beans.factory.disposablebean接口，会调用这个接口中的destroy方法\n     3. 调用bean自定义的销毁方法(@bean(destroymethod = "销毁的方法"))\n\n\n# 3.5 bean循环依赖\n\n多个bean之间相互依赖，形成了一个闭环。\n\n检测循环依赖：检测循环依赖比较简单，使用一个列表来记录正在创建中的bean，bean创建之前，先去记录中看一下自己是否已经在列表中了，如果在，说明存在循环依赖，如果不在，则将其加入到这个列表，bean创建完毕之后，将其再从这个列表中移除。\n\n解决循环依赖：\n\n * 构造器的循环依赖无法解决\n * 只有单例的bean会通过三级缓存提前暴露来解决循环依赖的问题，而非单例的bean，每次从容器中获取都是一个新的对象，都会重新创建，所以非单例的bean是没有缓存的，不会将其放到三级缓存中。\n\n\n# 四、aop\n\n面向切面编程，spring中提供的一些非常牛逼的功能都是通过aop实现的，比如下面这些大家比较熟悉的功能\n\nspring事务管理：@transactional\n\nspring异步处理：@enableasync\n\nspring缓存技术的使用：@enablecaching\n\nspring中各种拦截器：@enableaspectjautoproxy\n\n\n# 4.1 代理\n\n# 4.1.1 静态代理\n\n# 4.1.2 动态代理\n\n * jdk 动态代理\n   \n   jdk中为实现代理提供了支持，主要用到2个类：\n   \n   java.lang.reflect.proxy\n   java.lang.reflect.invocationhandler\n   \n   \n   * proxy\n     \n     里面的一些重要的静态方法\n     \n     //为指定的接口创建代理类，返回代理类的class对象\n     public static class<?> getproxyclass(classloader loader,class<?>... interfaces)\n     //创建代理类的实例对象\n     public static object newproxyinstance(classloader loader,\n                                           class<?>[] interfaces,\n                                           invocationhandler h)\n     //判断指定的类是否是一个代理类\n     public static boolean isproxyclass(class<?> cl)\n     //获取代理对象的invocationhandler对象\n     public static invocationhandler getinvocationhandler(object proxy)\n         throws illegalargumentexception\n     \n     \n     创建方式一:\n     \n     笔记\n     \n      1. 调用proxy.getproxyclass方法获取代理类的class对象\n      2. 使用invocationhandler接口创建代理类的处理器\n      3. 通过代理类和invocationhandler创建代理对象\n      4. 上面已经创建好代理对象了，接着我们就可以使用代理对象了\n     \n     创建方式二:\n     \n     笔记\n     \n      5. 使用invocationhandler接口创建代理类的处理器\n      6. 使用proxy类的静态方法newproxyinstance直接创建代理对象\n      7. 使用代理对象\n\n注意\n\njdk动态代理只能为接口或接口的实现类创建代理类，不能直接给普通类创建代理类。\n\njdk动态代理是编译时增强。\n\n * cglib 动态代理\n\njdk动态代理只能为接口创建代理，使用上有局限性。实际的场景中我们的类不一定有接口，此时如果我们想为普通的类也实现代理功能，我们就需要用到cglib来实现了。\n\ncglib是一个强大、高性能的字节码生成库，它用于在运行时扩展java类和实现接口；本质上它是通过动态的生成一个子类去覆盖所要代理的类（非final修饰的类和方法）。enhancer可能是cglib中最常用的一个类，和jdk中的proxy不同的是，enhancer既能够代理普通的class，也能够代理接口。\n\n创建方式：\n\n笔记\n\n 1. 定义一个类；\n 2. 自定义 methodinterceptor 并重写 intercept 方法，intercept用于拦截增强被代理类的方法，和 jdk 动态代理中的 invoke 方法类似；\n 3. 通过 enhancer 类的 create()创建代理类；\n\n特点：\n\n 1. cglib弥补了jdk动态代理的不足，jdk动态代理只能为接口创建代理，而cglib非常强大，不管是接口还是类，都可以使用cglib来创建代理\n 2. cglib创建代理的过程，相当于创建了一个新的类，可以通过cglib来配置这个新的类需要实现的接口，以及需要继承的父类\n 3. cglib可以为类创建代理，但是这个类不能是final类型的，cglib为类创建代理的过程，实际上为通过继承来实现的，相当于给需要被代理的类创建了一个子类，然后会重写父类中的方法，来进行增强，继承的特性大家应该都知道，final修饰的类是不能被继承的，final修饰的方法不能被重写，static修饰的方法也不能被重写，private修饰的方法也不能被子类重写，而其他类型的方法都可以被子类重写，被重写的这些方法可以通过cglib进行拦截增强\n\n\n# 4.2 aop的一些概念\n\n * 目标对象(target)\n   \n   目标对象指将要被增强的对象，即包含主业务逻辑的类对象。\n\n * 连接点(joinpoint)\n   \n   程序执行过程中明确的点，如方法的调用或特定的异常被抛出。\n   \n   连接点由两个信息确定：\n   \n   方法(表示程序执行点，即在哪个目标方法)\n   \n   相对点(表示方位，即目标方法的什么位置，比如调用前，后等)\n   \n   简单来说，连接点就是被拦截到的程序执行点，因为spring只支持方法类型的连接点，所以在spring中连接点就是被拦截到的方法。\n\n * 代理对象(proxy)\n   \n   aop中会通过代理的方式，对目标对象生成一个代理对象，代理对象中会加入需要增强功能，通过代理对象来间接的方式目标对象，起到增强目标对象的效果。\n\n * 通知(advice)\n   \n   需要在目标对象中增强的功能，如上面说的：业务方法前验证用户的功能、方法执行之后打印方法的执行日志。\n   \n   通知中有2个重要的信息：方法的什么地方，执行什么操作，这2个信息通过通知来指定。\n   \n   方法的什么地方？之前、之后、包裹目标方法、方法抛出异常后等。\n   \n   如：\n   \n   在方法执行之前验证用户是否有效。\n   \n   在方法执行之后，打印方法的执行耗时。\n   \n   在方法抛出异常后，记录异常信息发送到mq。\n\n * 切入点(pointcut )\n   \n   用来指定需要将通知使用到哪些地方，比如需要用在哪些类的哪些方法上，切入点就是做这个配置的。\n\n * 切面（aspect）\n   \n   通知（advice）和切入点（pointcut）的组合。切面来定义在哪些地方（pointcut）执行什么操作（advice）。\n\n * 顾问（advisor)\n   \n   advisor 其实它就是 pointcut 与 advice 的组合，advice 是要增强的逻辑，而增强的逻辑要在什么地方执行是通过pointcut来指定的，所以 advice 必需与 pointcut 组合在一起，这就诞生了 advisor 这个类，spring aop中提供了一个advisor接口将pointcut 与 advice 的组合起来。\n   \n   advisor有好几个称呼：顾问、通知器。\n\n\n# 五、事务\n\nspring 使用事务的两种方式：\n\n * 编程式事务:硬编码的方式\n * 声明式事务:@transaction的方式\n\n\n# 5.1 编程式事务\n\n\n# 5.2 声明式事务\n\n所谓声明式事务，就是通过配置的方式，比如通过配置文件（xml）或者注解的方式，告诉spring，哪些方法需要spring帮忙管理事务，然后开发者只用关注业务代码，而事务的事情spring自动帮我们控制。\n\n# 5.2.1 相关注解\n\n * @enabletransactionmanagement\n   \n   笔记\n   \n   当spring容器启动的时候，发现有@enabletransactionmanagement注解，此时会拦截所有bean的创建，扫描看一下bean上是否有@transaction注解（类、或者父类、或者接口、或者方法中有这个注解都可以），如果有这个注解，spring会通过aop的方式给bean生成代理对象，代理对象中会增加一个拦截器，拦截器会拦截bean中public方法执行，会在方法执行之前启动事务，方法执行完毕之后提交或者回滚事务。\n   \n   * 定义事务管理器 事务交给spring管理，那么你肯定要创建一个或者多个事务管理者，有这些管理者来管理具体的事务，比如启动事务、提交事务、回滚事务，这些都是管理者来负责的。\n   \n   spring中使用platformtransactionmanager这个接口来表示事务管理者。\n   \n   platformtransactionmanager多个实现类，用来应对不同的环境\n   \n   1. jpatransactionmanager：如果你用jpa来操作db，那么需要用这个管理器来帮你控制事务。\n   2. datasourcetransactionmanager：如果你用是指定数据源的方式，比如操作数据库用的是：jdbctemplate、mybatis ibatis，那么需要用这个管理器来帮你控制事务。\n   3. hibernatetransactionmanager：如果你用hibernate来操作db，那么需要用这个管理器来帮你控制事务\n   4. jtatransactionmanager：如果你用的是java中的jta来操作db，这种通常是分布式事务，此时需要用这种管理器来控制事务。\n\n * @transaction\n   \n   需使用事务的目标上加@transaction注解\n   \n   * @transaction放在接口上，那么接口的实现类中所有public都被spring自动加上事务\n   * @transaction放在类上，那么当前类以及其下无限级子类中所有pubilc方法将被spring自动加上事务\n   * @transaction放在public方法上，那么该方法将被spring自动加上事务\n   * 注意：@transaction只对public方法有效\n\n# 5.2.2 事务的传播行为\n\n事务传播行为（propagation behavior）指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行。\n\n\n\n 1. propagation_required',charsets:{cjk:!0},lastUpdated:"2022/04/15, 21:19:01",lastUpdatedTimestamp:1650028741e3},{title:"JWT",frontmatter:{title:"JWT",date:"2022-04-07T20:26:24.000Z",permalink:"/pages/ce6c78/"},regularPath:"/02.%E6%A1%86%E6%9E%B6/01.Spring/10.%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/01.JWT.html",relativePath:"02.框架/01.Spring/10.安全框架/01.JWT.md",key:"v-33a08dcd",path:"/pages/ce6c78/",headers:[{level:2,title:"发展史",slug:"发展史",normalizedTitle:"发展史",charIndex:2},{level:2,title:"Cookie",slug:"cookie",normalizedTitle:"cookie",charIndex:1871},{level:2,title:"Session",slug:"session",normalizedTitle:"session",charIndex:2095},{level:2,title:"Token",slug:"token",normalizedTitle:"token",charIndex:1545},{level:2,title:"Token的起源",slug:"token的起源",normalizedTitle:"token的起源",charIndex:2726},{level:3,title:"基于服务器的验证",slug:"基于服务器的验证",normalizedTitle:"基于服务器的验证",charIndex:2782},{level:3,title:"基于服务器验证方式暴露的一些问题",slug:"基于服务器验证方式暴露的一些问题",normalizedTitle:"基于服务器验证方式暴露的一些问题",charIndex:2949},{level:3,title:"基于Token的验证原理",slug:"基于token的验证原理",normalizedTitle:"基于token的验证原理",charIndex:3281},{level:2,title:"Tokens的优势",slug:"tokens的优势",normalizedTitle:"tokens的优势",charIndex:3958}],headersStr:"发展史 Cookie Session Token Token的起源 基于服务器的验证 基于服务器验证方式暴露的一些问题 基于Token的验证原理 Tokens的优势",content:"# 发展史\n\n1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮。\n\n2、但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了\n\n3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！如果访问服务器多了， 就得由成千上万，甚至几十万个。\n\n这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上， 假设小F的下一次请求被转发到机器B怎么办？机器B可没有小F的 session id啊。\n\n有时候会采用一点小伎俩： session sticky ， 就是让小F的请求一直粘连在机器A上， 但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。\n\n那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。\n\n\n\n后来有个叫Memcached的支了招：把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。\n\n\n\n也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担\n\n4、于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？\n\n可是如 果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。\n\n嗯，对了，关键点就是验证 ！\n\n比如说， 小F已经登录了系统， 我给他发一个令牌(token)， 里边包含了小F的 user id， 下一次小F 再次通过Http 请求访问我的时候， 把这个token 通过Http header 带过来不就可以了。\n\n不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。\n\n那就对数据做一个签名吧， 比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。\n\n\n\n这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者：对不起，没有认证。\n\n\n\nToken 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。\n\n当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。\n\n这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的 session 存储空间 ！\n\n解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。这种无状态的感觉实在是太好了！\n\n\n# Cookie\n\ncookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。\n\ncookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。\n\n\n# Session\n\nsession 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。\n\nsession 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。\n\n服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。\n\n\n# Token\n\n在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。\n\n以下几点特性会让你在程序中使用基于Token的身份验证\n\n 1. 无状态、可扩展\n 2. 支持移动设备\n 3. 跨程序调用\n 4. 安全\n\n那些使用基于Token的身份验证的大佬们\n\n大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。\n\n\n# Token的起源\n\n在介绍基于Token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。\n\n\n# 基于服务器的验证\n\n我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。\n\n在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。\n\n随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。\n\n\n# 基于服务器验证方式暴露的一些问题\n\n 1. Seesion： 每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。\n 2. 可扩展性： 在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。\n 3. CORS(跨域资源共享)： 当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。\n 4. CSRF(跨站请求伪造)： 用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。\n\n在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。\n\n\n# 基于Token的验证原理\n\n基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。\n\n这种概念解决了在服务端存储信息时的许多问题\n\n> NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。\n\n基于Token的身份验证的过程如下:\n\n 1. 用户通过用户名和密码发送请求。\n 2. 程序验证。\n 3. 程序返回一个签名的token 给客户端。\n 4. 客户端储存token,并且每次用于每次发送请求。\n 5. 服务端验证token并返回数据。\n\n每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin:* ，让服务器能接受到来自所有域的请求。\n\n需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。\n\n实现思路：\n\n\n\n 1. 用户登录校验，校验成功后就返回Token给客户端。\n 2. 客户端收到数据后保存在客户端\n 3. 客户端每次访问API是携带Token到服务器端。\n 4. 服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码\n\n当我们在程序中认证了信息并取得token之后，我们便能通过这个Token做许多的事情。\n\n我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）\n\n\n# Tokens的优势\n\n无状态、可扩展\n\n在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。\n\n如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。\n\n但是不要着急。使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。\n\n安全性\n\n请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。\n\ntoken是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。\n\n可扩展性\n\nTokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。\n\n使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。\n\n多平台跨域\n\n我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。\n\n> Having our API just serve data, we can also make the design choice to serve assets from a CDN. This eliminates the issues that CORS brings up after we set a quick header configuration for our application.\n\n只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。\n\nAccess-Control-Allow-Origin: *\n\n\n基于标准创建token的时候，你可以设定一些选项。我们在后续的文章中会进行更加详尽的描述，但是标准的用法会在JSON Web Tokens体现。\n\n最近的程序和文档是供给JSON Web Tokens的。它支持众多的语言。这意味在未来的使用中你可以真正的转换你的认证机制。",normalizedContent:"# 发展史\n\n1、很久很久以前，web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的http协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了http请求， 每个请求对我来说都是全新的。这段时间很嗨皮。\n\n2、但是随着交互式web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为http请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起http请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了\n\n3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！如果访问服务器多了， 就得由成千上万，甚至几十万个。\n\n这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小f通过机器a登录了系统， 那session id会保存在机器a上， 假设小f的下一次请求被转发到机器b怎么办？机器b可没有小f的 session id啊。\n\n有时候会采用一点小伎俩： session sticky ， 就是让小f的请求一直粘连在机器a上， 但是这也不管用， 要是机器a挂掉了， 还得转到机器b去。\n\n那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。\n\n\n\n后来有个叫memcached的支了招：把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。\n\n\n\n也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担\n\n4、于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？\n\n可是如 果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。\n\n嗯，对了，关键点就是验证 ！\n\n比如说， 小f已经登录了系统， 我给他发一个令牌(token)， 里边包含了小f的 user id， 下一次小f 再次通过http 请求访问我的时候， 把这个token 通过http header 带过来不就可以了。\n\n不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。\n\n那就对数据做一个签名吧， 比如说我用hmac-sha256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。\n\n\n\n这个token 我不保存， 当小f把这个token 给我发过来的时候，我再用同样的hmac-sha256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小f已经登录过了，并且可以直接取到小f的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者：对不起，没有认证。\n\n\n\ntoken 中的数据是明文保存的（虽然我会用base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。\n\n当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。\n\n这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的cpu计算时间获取了我的 session 存储空间 ！\n\n解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。这种无状态的感觉实在是太好了！\n\n\n# cookie\n\ncookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。\n\ncookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。\n\n\n# session\n\nsession 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。\n\nsession 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。\n\n服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。\n\n\n# token\n\n在web领域基于token的身份验证随处可见。在大多数使用web api的互联网公司中，tokens 是多用户下处理认证的最佳方式。\n\n以下几点特性会让你在程序中使用基于token的身份验证\n\n 1. 无状态、可扩展\n 2. 支持移动设备\n 3. 跨程序调用\n 4. 安全\n\n那些使用基于token的身份验证的大佬们\n\n大部分你见到过的api和web应用都使用tokens。例如facebook, twitter, google+, github等。\n\n\n# token的起源\n\n在介绍基于token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。\n\n\n# 基于服务器的验证\n\n我们都是知道http协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。\n\n在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储session来完成。\n\n随着web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。\n\n\n# 基于服务器验证方式暴露的一些问题\n\n 1. seesion： 每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。\n 2. 可扩展性： 在服务端的内存中使用seesion存储登录信息，伴随而来的是可扩展性问题。\n 3. cors(跨域资源共享)： 当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用ajax抓取另一个域的资源，就可以会出现禁止请求的情况。\n 4. csrf(跨站请求伪造)： 用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。\n\n在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。\n\n\n# 基于token的验证原理\n\n基于token的身份验证是无状态的，我们不将用户信息存在服务器或session中。\n\n这种概念解决了在服务端存储信息时的许多问题\n\n> nosession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。\n\n基于token的身份验证的过程如下:\n\n 1. 用户通过用户名和密码发送请求。\n 2. 程序验证。\n 3. 程序返回一个签名的token 给客户端。\n 4. 客户端储存token,并且每次用于每次发送请求。\n 5. 服务端验证token并返回数据。\n\n每一次请求都需要token。token应该在http的头部发送从而保证了http请求无状态。我们同样通过设置服务器属性access-control-allow-origin:* ，让服务器能接受到来自所有域的请求。\n\n需要主要的是，在acao头部标明(designating)*时，不得带有像http认证，客户端ssl证书和cookies的证书。\n\n实现思路：\n\n\n\n 1. 用户登录校验，校验成功后就返回token给客户端。\n 2. 客户端收到数据后保存在客户端\n 3. 客户端每次访问api是携带token到服务器端。\n 4. 服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码\n\n当我们在程序中认证了信息并取得token之后，我们便能通过这个token做许多的事情。\n\n我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）\n\n\n# tokens的优势\n\n无状态、可扩展\n\n在客户端存储的tokens是无状态的，并且能够被扩展。基于这种无状态和不存储session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。\n\n如果我们将已验证的用户的信息保存在session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为session亲和性)。用户量大时，可能会造成一些拥堵。\n\n但是不要着急。使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。\n\n安全性\n\n请求中发送token而不再是发送cookie能够防止csrf(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在session中，让我们少了对session操作。\n\ntoken是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。\n\n可扩展性\n\ntokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(fackbook或是twitter)联系起来。当通过服务登录twitter(我们将这个过程buffer)时，我们可以将这些buffer附到twitter的数据流上(we are allowing buffer to post to our twitter stream)。\n\n使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的api，得出特殊权限的tokens。\n\n多平台跨域\n\n我们提前先来谈论一下cors(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。\n\n> having our api just serve data, we can also make the design choice to serve assets from a cdn. this eliminates the issues that cors brings up after we set a quick header configuration for our application.\n\n只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。\n\naccess-control-allow-origin: *\n\n\n基于标准创建token的时候，你可以设定一些选项。我们在后续的文章中会进行更加详尽的描述，但是标准的用法会在json web tokens体现。\n\n最近的程序和文档是供给json web tokens的。它支持众多的语言。这意味在未来的使用中你可以真正的转换你的认证机制。",charsets:{cjk:!0},lastUpdated:"2022/04/07, 20:28:38",lastUpdatedTimestamp:1649334518e3},{title:"Redis",frontmatter:{title:"Redis",date:"2022-04-10T11:24:37.000Z",permalink:"/pages/9a6634/"},regularPath:"/02.%E6%A1%86%E6%9E%B6/03.SpringBoot/03.%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/01.Redis.html",relativePath:"02.框架/03.SpringBoot/03.非关系型数据库/01.Redis.md",key:"v-f84a6a2e",path:"/pages/9a6634/",headers:[{level:2,title:"一、概述",slug:"一、概述",normalizedTitle:"一、概述",charIndex:2},{level:2,title:"二、Redis 常见的数据结构",slug:"二、redis-常见的数据结构",normalizedTitle:"二、redis 常见的数据结构",charIndex:401},{level:3,title:"string",slug:"string",normalizedTitle:"string",charIndex:421},{level:3,title:"list",slug:"list",normalizedTitle:"list",charIndex:314},{level:3,title:"hash",slug:"hash",normalizedTitle:"hash",charIndex:328},{level:3,title:"set",slug:"set",normalizedTitle:"set",charIndex:319},{level:3,title:"sorted set",slug:"sorted-set",normalizedTitle:"sorted set",charIndex:1961},{level:3,title:"bitmap",slug:"bitmap",normalizedTitle:"bitmap",charIndex:2250},{level:2,title:"三、Spring Data Redis",slug:"三、spring-data-redis",normalizedTitle:"三、spring data redis",charIndex:2531},{level:3,title:"1. RedisTemplate",slug:"_1-redistemplate",normalizedTitle:"1. redistemplate",charIndex:2804},{level:3,title:"2. 序列化",slug:"_2-序列化",normalizedTitle:"2. 序列化",charIndex:3624},{level:4,title:"2.1 Rediserializer",slug:"_2-1-rediserializer",normalizedTitle:"2.1 rediserializer",charIndex:3634},{level:5,title:"2.1.1 String 序列化方式",slug:"_2-1-1-string-序列化方式",normalizedTitle:"2.1.1 string 序列化方式",charIndex:4525},{level:5,title:"2.1.2 JSON 序列化方式",slug:"_2-1-2-json-序列化方式",normalizedTitle:"2.1.2 json 序列化方式",charIndex:5836},{level:4,title:"2.2 配置序列化的方式",slug:"_2-2-配置序列化的方式",normalizedTitle:"2.2 配置序列化的方式",charIndex:6374},{level:3,title:"3. Redisson",slug:"_3-redisson",normalizedTitle:"3. redisson",charIndex:7578},{level:2,title:"四、缓存",slug:"四、缓存",normalizedTitle:"四、缓存",charIndex:7791},{level:3,title:"4.1 缓存设置过期时间",slug:"_4-1-缓存设置过期时间",normalizedTitle:"4.1 缓存设置过期时间",charIndex:7800},{level:3,title:"4.2 如何判断数据是否过期",slug:"_4-2-如何判断数据是否过期",normalizedTitle:"4.2 如何判断数据是否过期",charIndex:8150},{level:4,title:"4.2.1 过期删除策略",slug:"_4-2-1-过期删除策略",normalizedTitle:"4.2.1 过期删除策略",charIndex:8309},{level:4,title:"4.2.2 LRU和LFU",slug:"_4-2-2-lru和lfu",normalizedTitle:"4.2.2 lru和lfu",charIndex:9456},{level:3,title:"4.3 缓存穿透",slug:"_4-3-缓存穿透",normalizedTitle:"4.3 缓存穿透",charIndex:10580},{level:4,title:"什么是缓存穿透？",slug:"什么是缓存穿透",normalizedTitle:"什么是缓存穿透？",charIndex:10592},{level:4,title:"有哪些解决办法？",slug:"有哪些解决办法",normalizedTitle:"有哪些解决办法？",charIndex:10707},{level:3,title:"4.4 缓存雪崩",slug:"_4-4-缓存雪崩",normalizedTitle:"4.4 缓存雪崩",charIndex:11725},{level:4,title:"什么是缓存雪崩？",slug:"什么是缓存雪崩",normalizedTitle:"什么是缓存雪崩？",charIndex:11737},{level:4,title:"有哪些解决办法？",slug:"有哪些解决办法-2",normalizedTitle:"有哪些解决办法？",charIndex:10707},{level:3,title:"4.5 如何保证缓存和数据库数据的一致性？",slug:"_4-5-如何保证缓存和数据库数据的一致性",normalizedTitle:"4.5 如何保证缓存和数据库数据的一致性？",charIndex:12254},{level:4,title:"为什么会发生缓存和数据库的数据不一致",slug:"为什么会发生缓存和数据库的数据不一致",normalizedTitle:"为什么会发生缓存和数据库的数据不一致",charIndex:12410},{level:5,title:"当redis作为读写缓存时",slug:"当redis作为读写缓存时",normalizedTitle:"当redis作为读写缓存时",charIndex:12462},{level:5,title:"当redis 作为只读缓存时",slug:"当redis-作为只读缓存时",normalizedTitle:"当redis 作为只读缓存时",charIndex:12874},{level:4,title:"如何解决数据不一致问题？",slug:"如何解决数据不一致问题",normalizedTitle:"如何解决数据不一致问题？",charIndex:13572},{level:6,title:"第一种方法：重试机制",slug:"第一种方法-重试机制",normalizedTitle:"第一种方法：重试机制",charIndex:13588},{level:6,title:"情况一：先删除缓存，再更新数据库",slug:"情况一-先删除缓存-再更新数据库",normalizedTitle:"情况一：先删除缓存，再更新数据库",charIndex:13947},{level:6,title:"情况二：先更新数据库值，再删除缓存值",slug:"情况二-先更新数据库值-再删除缓存值",normalizedTitle:"情况二：先更新数据库值，再删除缓存值",charIndex:14447},{level:2,title:"五、Redis 的持久化机制",slug:"五、redis-的持久化机制",normalizedTitle:"五、redis 的持久化机制",charIndex:14686},{level:3,title:"快照（snapshotting）持久化（RDB）",slug:"快照-snapshotting-持久化-rdb",normalizedTitle:"快照（snapshotting）持久化（rdb）",charIndex:14973},{level:3,title:"AOF（append-only file）持久化",slug:"aof-append-only-file-持久化",normalizedTitle:"aof（append-only file）持久化",charIndex:15415},{level:2,title:"六、Redis 事务",slug:"六、redis-事务",normalizedTitle:"六、redis 事务",charIndex:16085},{level:2,title:"七、Redis 做消息队列",slug:"七、redis-做消息队列",normalizedTitle:"七、redis 做消息队列",charIndex:16668}],headersStr:"一、概述 二、Redis 常见的数据结构 string list hash set sorted set bitmap 三、Spring Data Redis 1. RedisTemplate 2. 序列化 2.1 Rediserializer 2.1.1 String 序列化方式 2.1.2 JSON 序列化方式 2.2 配置序列化的方式 3. Redisson 四、缓存 4.1 缓存设置过期时间 4.2 如何判断数据是否过期 4.2.1 过期删除策略 4.2.2 LRU和LFU 4.3 缓存穿透 什么是缓存穿透？ 有哪些解决办法？ 4.4 缓存雪崩 什么是缓存雪崩？ 有哪些解决办法？ 4.5 如何保证缓存和数据库数据的一致性？ 为什么会发生缓存和数据库的数据不一致 当redis作为读写缓存时 当redis 作为只读缓存时 如何解决数据不一致问题？ 第一种方法：重试机制 情况一：先删除缓存，再更新数据库 情况二：先更新数据库值，再删除缓存值 五、Redis 的持久化机制 快照（snapshotting）持久化（RDB） AOF（append-only file）持久化 六、Redis 事务 七、Redis 做消息队列",content:'# 一、概述\n\nRedis 是一个高性能的 key-value 数据库，不过与传统数据库不同的是 Redis 的数据是存在内存中的 ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。\n\n另外，Redis 除了做缓存之外，Redis 也经常用来做分布式锁，甚至是消息队列。\n\nRedis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。\n\n`Redis的特点`：\n\n 1. Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n 2. Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。(Redis支持多数据结构存储)\n 3. Redis支持数据的备份，即master-slave模式的数据备份。\n\n\n# 二、Redis 常见的数据结构\n\n\n# string\n\n 1. 介绍 ：string 数据结构是简单的 key-value 类型。虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 简单动态字符串（simple dynamic string，SDS）。相比于 C 的原生字符串，Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）,除此之外，Redis 的 SDS API 是安全的，不会造成缓冲区溢出。\n 2. 常用命令： set,get,strlen,exists,decr,incr,setex 等等。\n 3. 应用场景： 一般常用在需要计数的场景，比如用户的访问次数、热点文章的点赞转发数量等等。\n\n**设置过期时间**\n\nSETEX key seconds value 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。\n\nPSETEX key milliseconds value这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。\n\n其他类型使用 EXPIRE key seconds为给定 key 设置过期时间。\n\n\n# list\n\n 1. 介绍 ：list 即是 链表。链表是一种非常常见的数据结构，特点是易于数据元素的插入和删除并且可以灵活调整链表长度，但是链表的随机访问困难。许多高级编程语言都内置了链表的实现比如 Java 中的 LinkedList，但是 C 语言并没有实现链表，所以 Redis 实现了自己的链表数据结构。Redis 的 list 的实现为一个 双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。\n 2. 常用命令: rpush,lpop,lpush,rpop,lrange,llen 等。\n 3. 应用场景: 发布与订阅或者说消息队列、慢查询。\n\n\n# hash\n\n 1. 介绍 ：hash 类似于 JDK1.8 前的 HashMap，内部实现也差不多(数组 + 链表)。不过，Redis 的 hash 做了更多优化。另外，hash 是一个 string 类型的 field 和 value 的映射表，特别适合用于存储对象，后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值。 比如我们可以 hash 数据结构来存储用户信息，商品信息等等。\n 2. 常用命令： hset,hmset,hexists,hget,hgetall,hkeys,hvals 等。\n 3. 应用场景: 系统中对象数据的存储。\n\n\n# set\n\n 1. 介绍 ： set 类似于 Java 中的 HashSet 。Redis 中的 set 类型是一种无序不重复集合，集合中的元素没有先后顺序。当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。比如：你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。\n 2. 常用命令： sadd,spop,smembers,sismember,scard,sinterstore,sunion 等。\n 3. 应用场景: 需要存放的数据不能重复以及需要获取多个数据源交集和并集等场景\n\n\n# sorted set\n\n 1. 介绍： 和 set 相比，sorted set 增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列，还可以通过 score 的范围来获取元素的列表。有点像是 Java 中 HashMap 和 TreeSet 的结合体。\n 2. 常用命令： zadd,zcard,zscore,zrange,zrevrange,zrem 等。\n 3. 应用场景： 需要对数据根据某个权重进行排序的场景。比如在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息。\n\n\n# bitmap\n\n 1. 介绍： bitmap 存储的是连续的二进制数字（0 和 1），通过 bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 bitmap 本身会极大的节省储存空间。\n 2. 常用命令： setbit 、getbit 、bitcount、bitop\n 3. 应用场景： 适合需要保存状态信息（比如是否签到、是否登录...）并需要进一步对这些信息进行分析的场景。比如用户签到情况、活跃用户情况、用户行为统计（比如是否点赞过某个视频）。\n\n\n# 三、Spring Data Redis\n\n对于下层，Spring Data Redis 提供了统一的操作模板（后文中，我们会看到是 RedisTemplate 类），封装了 Jedis、Lettuce 的 API 操作，访问 Redis 数据。所以，实际上，Spring Data Redis 内置真正访问的实际是 Jedis、Lettuce 等 API 操作。\n\n目前Spring Data Redis 暂时只支持 Jedis、Lettuce 的内部封装，而 Redisson 是由 redisson-spring-data 来提供。\n\n\n# 1. RedisTemplate\n\norg.springframework.data.redis.core.RedisTemplate 类，从类名上，我们就明明白白知道，提供 Redis 操作模板 API 。核心属性如下：\n\n// 1、序列化相关属性\n@Nullable\nprivate RedisSerializer keySerializer = null;\n@Nullable\nprivate RedisSerializer valueSerializer = null;\n@Nullable\nprivate RedisSerializer hashKeySerializer = null;\n@Nullable\nprivate RedisSerializer hashValueSerializer = null;\nprivate RedisSerializer<String> stringSerializer = RedisSerializer.string();\n\n// 2、Lua 脚本执行器\n@Nullable\nprivate ScriptExecutor<K> scriptExecutor;\n\n// 3、常见数据结构操作类\n@Nullable\nprivate ValueOperations<K, V> valueOps;\n@Nullable\nprivate ListOperations<K, V> listOps;\n@Nullable\nprivate SetOperations<K, V> setOps;\n@Nullable\nprivate ZSetOperations<K, V> zSetOps;\n@Nullable\nprivate GeoOperations<K, V> geoOps;\n@Nullable\nprivate HyperLogLogOperations<K, V> hllOps;\n\n\n\n# 2. 序列化\n\n# 2.1 Rediserializer\n\norg.springframework.data.redis.serializer.RedisSerializer 接口，Redis 序列化接口，用于 Redis KEY 和 VALUE 的序列化。\n\npublic interface RedisSerializer<T> {\n    @Nullable\n    byte[] serialize(@Nullable T var1) throws SerializationException;\n\n    @Nullable\n    T deserialize(@Nullable byte[] var1) throws SerializationException;\n\n    static RedisSerializer<Object> java() {\n        return java((ClassLoader)null);\n    }\n\n    static RedisSerializer<Object> java(@Nullable ClassLoader classLoader) {\n        return new JdkSerializationRedisSerializer(classLoader);\n    }\n\n    static RedisSerializer<Object> json() {\n        return new GenericJackson2JsonRedisSerializer();\n    }\n\n    static RedisSerializer<String> string() {\n        return StringRedisSerializer.UTF_8;\n    }\n}\n\n\n * 定义了对象 和二进制数组的转换\n\nRedisSerializer 的实现类\n\n\n\n主要分成四类：\n\n * JDK 序列化方式\n * String 序列化方式\n * JSON 序列化方式\n * XML 序列化方式\n\n# 2.1.1 String 序列化方式\n\n 1. org.springframework.data.redis.serializer.StringRedisSerializer ，字符串和二进制数组的直接转换。代码如下：\n\npublic class StringRedisSerializer implements RedisSerializer<String> {\n    private final Charset charset;\n    public static final StringRedisSerializer US_ASCII;\n    public static final StringRedisSerializer ISO_8859_1;\n    public static final StringRedisSerializer UTF_8;\n\n    public StringRedisSerializer() {\n        this(StandardCharsets.UTF_8);\n    }\n\n    public StringRedisSerializer(Charset charset) {\n        Assert.notNull(charset, "Charset must not be null!");\n        this.charset = charset;\n    }\n\n    public String deserialize(@Nullable byte[] bytes) {\n        return bytes == null ? null : new String(bytes, this.charset);\n    }\n\n    public byte[] serialize(@Nullable String string) {\n        return string == null ? null : string.getBytes(this.charset);\n    }\n\n    static {\n        US_ASCII = new StringRedisSerializer(StandardCharsets.US_ASCII);\n        ISO_8859_1 = new StringRedisSerializer(StandardCharsets.ISO_8859_1);\n        UTF_8 = new StringRedisSerializer(StandardCharsets.UTF_8);\n    }\n}\n\n\n绝大多数情况下，我们 KEY 和 VALUE 都会使用这种序列化方案。\n\n 2. org.springframework.data.redis.serializer.GenericToStringSerializer ，使用 Spring ConversionService 实现 <T> 对象和 String 的转换，从而 String 和二进制数组的转换。\n\n# 2.1.2 JSON 序列化方式\n\n 1. org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer ，使用 Jackson 实现 JSON 的序列化方式，并且从 Generic 单词可以看出，是支持所有类。\n 2. org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer ，使用 Jackson 实现 JSON 的序列化方式，并且显示指定 <T> 类型。\n 3. com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer ，使用 FastJSON 实现 JSON 的序列化方式，和 GenericJackson2JsonRedisSerializer 一致。\n 4. com.alibaba.fastjson.support.spring.FastJsonRedisSerializer ，使用 FastJSON 实现 JSON 的序列化方式，和 Jackson2JsonRedisSerializer 一致。\n\n# 2.2 配置序列化的方式\n\n 1. 创建 RedisConfiguration 配置类\n\n@Configuration\npublic class RedisConfiguration {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        // 创建 RedisTemplate 对象\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\n        // 设置 RedisConnection 工厂。\n        template.setConnectionFactory(factory);\n\n        // 使用 String 序列化方式，序列化 KEY 。\n        template.setKeySerializer(RedisSerializer.string());\n\n        // 使用 JSON 序列化方式（库是 Jackson ），序列化 VALUE 。\n        template.setValueSerializer(RedisSerializer.json());\n        return template;\n    }\n\n}\n\n\n * RedisSerializer#string() 静态方法，返回的就是使用 UTF-8 编码的 StringRedisSerializer 对象。代码如下：\n   \n   // RedisSerializer.java\n   static RedisSerializer<String> string() {\n   \treturn StringRedisSerializer.UTF_8;\n   }\n   \n   // StringRedisSerializer.java\n   public static final StringRedisSerializer ISO_8859_1 = new StringRedisSerializer(StandardCharsets.ISO_8859_1);\n   \n\n * RedisSerializer#json() 静态方法，返回 GenericJackson2JsonRedisSerializer 对象。代码如下：\n\n * // RedisSerializer.java\n   \n   static RedisSerializer<Object> json() {\n   \treturn new GenericJackson2JsonRedisSerializer();\n   }\n   \n\n\n# 3. Redisson\n\nRedisson在基于NIO的Netty框架上，充分的利用了Redis键值数据库提供的一系列优势，在Java实用工具包中常用接口的基础上，为使用者提供了一系列具有分布式特性的常用工具类。使得原本作为协调单机多线程并发程序的工具包获得了协调分布式多机多线程并发系统的能力，大大降低了设计和研发大规模分布式系统的难度。同时结合各富特色的分布式服务，更进一步简化了分布式环境中程序相互之间的协作。\n\n\n# 四、缓存\n\n\n# 4.1 缓存设置过期时间\n\n一般情况下，我们设置保存的缓存数据的时候都会设置一个过期时间。为什么呢？\n\n因为内存是有限的，如果缓存中的所有数据都是一直保存的话，分分钟直接 Out of memory。\n\nRedis 中除了字符串类型有自己独有设置过期时间的命令 setex 外，其他方法都需要依靠 expire 命令来设置过期时间 。另外， persist 命令可以移除一个键的过期时间。\n\n过期时间除了有助于缓解内存的消耗，还有什么其他用么？\n\n很多时候，我们的业务场景就是需要某个数据只在某一时间段内存在，比如我们的短信验证码可能只在 1 分钟内有效，用户登录的 token 可能只在 1 天内有效。\n\n如果使用传统的数据库来处理的话，一般都是自己判断过期，这样更麻烦并且性能要差很多。\n\n\n# 4.2 如何判断数据是否过期\n\nRedis 通过一个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。过期字典的键指向 Redis 数据库中的某个 key(键)，过期字典的值是一个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 UNIX 时间戳）。\n\n# 4.2.1 过期删除策略\n\n如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？\n\n常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\n\n 1. 惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。\n 2. 定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。\n\n定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。\n\n但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。\n\n怎么解决这个问题呢？答案就是：Redis 内存淘汰机制。\n\n * 设置淘汰策略\n   \n   config set maxmemory-policy allkeys-lru\n   \n\nRedis 提供 6 种数据淘汰策略：\n\n 1. volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n 2. volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n 3. volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n 4. allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）\n 5. allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n 6. no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\n\n4.0 版本后增加以下两种：\n\n 1. volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰\n 2. allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key\n\n# 4.2.2 LRU和LFU\n\n * LRU（Least Recently Used）\n   \n   即最近最少使用，会将最不常用的数据筛选出来，保留最近频繁使用的数据。LRU 会把所有数据组成一个链表，链表头部称为 MRU，代表最近最常使用的数据；尾部称为 LRU代表最近最不常使用的数据；\n   \n   但是，如果直接在 Redis 中使用 LRU 算法也会有一些问题：\n   \n   LRU 算法在实现过程中使用链表管理所有缓存的数据，这会给 Redis 带来额外的开销，而且，当有数据访问时就会有链表移动操作，进而降低 Redis 的性能。\n   \n   于是，Redis 对 LRU 的实现进行了一些改变：\n   \n   * 记录每个 key 最近一次被访问的时间戳（由键值对数据结构 RedisObject 中的 lru 字段记录）\n   * 在第一次淘汰数据时，会先随机选择 N 个数据作为一个候选集合，然后淘汰 lru 值最小的。（N 可以通过 config set maxmemory-samples 100 命令来配置）\n   * 后续再淘汰数据时，会挑选数据进入候选集合，进入集合的条件是：它的 lru 小于候选集合中最小的 lru。\n   * 如果候选集合中数据个数达到了 maxmemory-samples，Redis 就会将 lru 值小的数据淘汰出去。\n\n * LFU（Least Frequently Used）\n   \n   即最不经常使用策略，它是基于数据访问次数来淘汰数据的，在 Redis 4.0 时添加进来。它在 LRU 策略基础上，为每个数据增加了一个计数器，来统计这个数据的访问次数。\n   \n   前面说到，LRU 使用了 RedisObject 中的 lru 字段记录时间戳，lru 是 24bit 的，LFU 将 lru 拆分为两部分：\n   \n   * ldt 值：lru 字段的前 16bit，表示数据的访问时间戳\n   * counter 值：lru 字段的后 8bit，表示数据的访问次数 使用 LFU 策略淘汰缓存时，会把访问次数最低的数据淘汰，如果访问次数相同，再根据访问的时间，将访问时间戳最小的淘汰。\n   \n   为什么 Redis 有了 LRU 还需要 LFU 呢？\n   \n   在一些场景下，有些数据被访问的次数非常少，甚至只会被访问一次。当这些数据服务完访问请求后，如果还继续留存在缓存中的话，就只会白白占用缓存空间。\n   \n   由于 LRU 是基于访问时间的，如果系统对大量数据进行单次查询，这些数据的 lru 值就很大，使用 LFU 算法就不容易被淘汰。\n\n\n# 4.3 缓存穿透\n\n# 什么是缓存穿透？\n\n缓存穿透说简单点就是大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。举个例子：某个黑客故意制造我们缓存中不存在的 key 发起大量请求，导致大量请求落到数据库。\n\n# 有哪些解决办法？\n\n最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\n\n1）缓存无效 key\n\n如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： SET key value EX 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\n\n另外，这里多说一嘴，一般情况下我们是这样设计 key 的： 表名:列名:主键名:主键值 。\n\n2）布隆过滤器\n\n布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\n\n具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\n\n但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\n\n为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\n\n我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\n\n 1. 使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\n 2. 根据得到的哈希值，在位数组中把对应下标的值置为 1。\n\n我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\n\n 1. 对给定元素再次进行相同的哈希计算；\n 2. 得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\n\n然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\n\n\n# 4.4 缓存雪崩\n\n# 什么是缓存雪崩？\n\n实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\n\n举个例子：系统的缓存模块出了问题比如宕机导致不可用。造成系统的所有访问，都要走数据库。\n\n还有一种缓存雪崩的场景是：有一些被大量访问数据（热点缓存）在某一时刻大面积失效，导致对应的请求直接落到了数据库上。 这样的情况，有下面几种解决办法：\n\n举个例子 ：秒杀开始 12 个小时之前，我们统一存放了一批商品到 Redis 中，设置的缓存过期时间也是 12 个小时，那么秒杀开始的时候，这些秒杀的商品的访问直接就失效了。导致的情况就是，相应的请求直接就落到了数据库上，就像雪崩一样可怕。\n\n# 有哪些解决办法？\n\n针对 Redis 服务不可用的情况：\n\n 1. 采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。\n 2. 限流，避免同时处理大量的请求。\n\n针对热点缓存失效的情况：\n\n 1. 设置不同的失效时间比如随机设置缓存的失效时间。\n 2. 缓存永不失效。\n\n\n# 4.5 如何保证缓存和数据库数据的一致性？\n\n首先，我们必须知道这里的“数据一致性”是什么意思。这里“一致性”包括两种情况：\n\n * 缓存中有数据，那么，缓存的数据需要和数据库中的值相同\n * 缓存中本身没有数据，那么，数据库中的值就必须是最新值。\n\n不符合这两种情况的，就是缓存和数据库的数据不一致了。\n\n# 为什么会发生缓存和数据库的数据不一致\n\n当缓存的读写模式不同时，缓存数据不一致发生的情况不一样。\n\n# 当redis作为读写缓存时\n\n对于读写缓存来说，如果要对数据进行增删改，就需要在缓存中进行，同时还要根据采取的写回策略，决定是否同步写回到数据库中。\n\n * 同步直写策略：写缓存时，也同步写数据库，缓存和数据库中的数据一致\n * 异步写回策略：写缓存时不同步写数据库，等到数据从缓存中淘汰时，再写回数据库。使用这种策略时，如果数据还没有写回数据库，缓存就发生了故障。那么，此时，数据库就没有最新数据了\n\n所以，对于读写缓存来说，要想保证缓存和数据库中的数据一致，就要采用同步直写策略。不过，需要注意的是：如果采用这种策略，就需要保证同时更新缓存和数据库。所以，我们要在业务应用中使用事务机制，来保证缓存和数据库的更新具有原子性，也就是说，两者要不一起更新，要不都不更新，返回错误信息，进行重试。否则，我们就无法实现同步直接\n\n当然，在有些场景下，我们对数据一致性的要求可能不是那么高，那么，我们可以使用异步写回策略。\n\n# 当redis 作为只读缓存时\n\n对于只读缓存来说：\n\n * 如果有数据新增，会直接写入数据库；\n * 有数据删改时，就需要把只读缓存中的数据标记为无效\n   * 这样，应用后继在访问这些，些增删改的数据时，因为缓存中没有相应的数据，就会发生缓存缺失。\n   * 此时，应用再从数据库中把数据读入缓存，这样后续再访问数据时，就能够直接从缓存中读取了。\n\n那么，这个过程中会不会出现数据不一致的情况呢？ （1）新增数据：\n\n * 如果是新增数据，数据会直接写到数据库中，不用对缓存做任何操作。此时，缓存中本身就没有新增数据，而数据库中是最新值\n * 这种情况符合我们刚刚所说的一致性的第 2 种情况，所以，此时，缓存和数据库的数据是一致的。\n\n（2）删改数据\n\n如果发生删改操作，应用既要更新数据库，也要在缓存中删除数据。这两个操作如果无法保证原子性，也就是说，要不都完成，要不都没完成，此时，就会出现数据不一致问题了。\n\n * 我们假设应用先删除缓存，再更新数据库，如果缓存删除成功，但是数据库更新失败，那么，应用再访问数据时，缓存中没有数据，就会发生缓存缺失。然后，应用再访问数据库，但是数据库中的值为旧值，应用就访问到旧值了。\n * 如果应用先完成了数据库的更新，但是，在删除缓存时失败了，那么，数据库中的值是新值，而缓存中的是旧值，这肯定是不一致的。这个时候，如果有其他的并发请求来访问数据，按照正常的缓存访问流程，就会先在缓存中查询，但此时，就会读到旧值了。\n\n总结：在更新数据库和删除缓存值的过程中，无论这两个操作的执行顺序谁先谁后，只要有一个操作失败了，就会导致客户端读取到旧值\n\n# 如何解决数据不一致问题？\n\n# 第一种方法：重试机制\n\n具体的说，就是：\n\n * 可以把要删除的缓存值或者要更新的数据库值暂存到消息队列中。当应用没有能够成功的删除缓存值或者是更新数据库值时，可以从消息队列中重新读取这些值，然后再次进行删除或者更新\n * 如果能够成功删除或者更新，我们就要把这些值从消息队列中去除，以免重复操作，此时，我们也可以保证数据库和缓存一致了。否则的话，我们还需要再次进行重试。如果重试超过一定次数，还是没有成功，我们就需要向应用层发送报错信息了。\n\n刚刚说的是在更新数据库和删除缓存值的过程中，其中一个操作失败的情况，实际上，即使这两个操作第一次执行时都没有失败，当有大量并发请求时，应用还是有可能读到不一致的数据\n\n同样，我们按照不同的删除和更新顺序，分成两种情况来看。在这两种情况下，我们的解决方法也有所不同。\n\n# 情况一：先删除缓存，再更新数据库\n\n假设线程 A 删除缓存值后，还没有来得及更新数据库（比如说有网络延迟），线程 B 就开始读取数据了，那么这个时候，线程 B 会发现缓存缺失，就只能去数据库读取。这会带来两个问题：\n\n 1. 线程 B 读取到了旧值；\n 2. 线程 B 是在缓存缺失的情况下读取的数据库，所以，它还会把旧值写入缓存，这可能会导致其他线程从缓存中读到旧值。\n\n怎么解决呢？在线程 A 更新完数据库值以后，我们可以让它先 sleep 一小段时间，再进行一次缓存删除操作。\n\n * 之所以要加上 sleep 的这段时间，就是为了让线程 B 能够先从数据库读取数据，再把缺失的数据写入缓存，然后，线程 A 再进行删除。所以，线程 A sleep 的时间，就需要大于线 程 B 读取数据再写入缓存的时间。这个时间怎么确定呢？建议你在业务程序运行的时候，统计下线程读数据和写缓存的操作时间，以此为基础来进行估算。\n * 这样一来，其它线程读取数据时，会发现缓存缺失，所以会从数据库中读取最新值。因为这个方案会在第一次删除缓存值后，延迟一段时间再次进行删除，所以我们也把它叫做“延迟双删”。\n\n# 情况二：先更新数据库值，再删除缓存值\n\n * 如果线程 A 删除了数据库中的值，但还没来得及删除缓存值，线程 B 就开始读取数据了，那么此时，线程 B 查询缓存时，发现缓存命中，就会直接从缓存中读取旧值。\n * 不过，在这种情况下，如果其他线程并发读缓存的请求不多，那么，就不会有很多请求读取到旧值。而且，线程 A 一般也会很快删除缓存值，这样一来，其他线程再次读取时，就会发生缓存缺失，进而从数据库中读取最新值。所以，这种情况对业务的影响较小。\n\n方法也是延迟双删。\n\n\n# 五、Redis 的持久化机制\n\n很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。\n\nRedis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持两种不同的持久化操作。Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file, AOF）。这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。\n\n\n# 快照（snapshotting）持久化（RDB）\n\nRedis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\n\n快照持久化是 Redis 默认采用的持久化方式，在 Redis.conf 配置文件中默认有此下配置：\n\n> save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n> \n> save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n> \n> save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。\n\n\n# AOF（append-only file）持久化\n\n与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：\n\n> appendonly yes\n\n开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 server.aof_buf 中，然后再根据 appendfsync 配置来决定何时将其同步到硬盘中的 AOF 文件。\n\nAOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\n\n在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：\n\n> appendfsync always #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度 appendfsync everysec #每秒钟同步一次，显式地将多个写命令同步到硬盘 appendfsync no #让操作系统决定何时进行同步\n\n为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。而且这样即使出现系统崩溃，用户最多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操作的时候，Redis 还会优雅的放慢自己的速度以便适应硬盘的最大写入速度。\n\n\n# 六、Redis 事务\n\nRedis 可以通过 MULTI，EXEC，DISCARD 和 WATCH 等命令来实现事务(transaction)功能。\n\n使用 MULTI 命令后可以输入多个命令。Redis 不会立即执行这些命令，而是将它们放到队列，当调用了 EXEC 命令将执行所有命令。\n\n这个过程是这样的：\n\n 1. 开始事务（MULTI）。\n 2. 命令入队(批量操作 Redis 的命令，先进先出（FIFO）的顺序执行)。\n 3. 执行事务(EXEC)。\n\n你也可以通过 DISCARD 命令取消一个事务，它会清空事务队列中保存的所有命令。\n\nWATCH 命令用于监听指定的键，当调用 EXEC 命令执行事务时，如果一个被 WATCH 命令监视的键被修改的话，整个事务都不会执行，直接返回失败。\n\nRedis 是不支持 roll back 的，因而不满足原子性的（而且不满足持久性）。\n\nRedis 官网也解释了自己为啥不支持回滚。简单来说就是 Redis 开发者们觉得没必要支持回滚，这样更简单便捷并且性能更好。Redis 开发者觉得即使命令执行错误也应该在开发过程中就被发现而不是生产过程中。\n\n你可以将 Redis 中的事务就理解为 ：Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。\n\n\n# 七、Redis 做消息队列\n\nRedis 5.0 新增加的一个数据结构 Stream 可以用来做消息队列，Stream 支持：\n\n * 发布 / 订阅模式\n * 按照消费者组进行消费\n * 消息持久化（ RDB 和 AOF）\n\n不过，和专业的消息队列相比，还是有很多欠缺的地方比如消息丢失和堆积问题不好解决。\n\n我们通常建议是不需要使用 Redis 来做消息队列的，你完全可以选择市面上比较成熟的一些消息队列比如 RocketMQ、Kafka。',normalizedContent:'# 一、概述\n\nredis 是一个高性能的 key-value 数据库，不过与传统数据库不同的是 redis 的数据是存在内存中的 ，也就是它是内存数据库，所以读写速度非常快，因此 redis 被广泛应用于缓存方向。\n\n另外，redis 除了做缓存之外，redis 也经常用来做分布式锁，甚至是消息队列。\n\nredis 提供了多种数据类型来支持不同的业务场景。redis 还支持事务 、持久化、lua 脚本、多种集群方案。\n\n`redis的特点`：\n\n 1. redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。\n 2. redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。(redis支持多数据结构存储)\n 3. redis支持数据的备份，即master-slave模式的数据备份。\n\n\n# 二、redis 常见的数据结构\n\n\n# string\n\n 1. 介绍 ：string 数据结构是简单的 key-value 类型。虽然 redis 是用 c 语言写的，但是 redis 并没有使用 c 的字符串表示，而是自己构建了一种 简单动态字符串（simple dynamic string，sds）。相比于 c 的原生字符串，redis 的 sds 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 o(1)（c 字符串为 o(n)）,除此之外，redis 的 sds api 是安全的，不会造成缓冲区溢出。\n 2. 常用命令： set,get,strlen,exists,decr,incr,setex 等等。\n 3. 应用场景： 一般常用在需要计数的场景，比如用户的访问次数、热点文章的点赞转发数量等等。\n\n**设置过期时间**\n\nsetex key seconds value 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。\n\npsetex key milliseconds value这个命令和 setex 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 setex 命令那样，以秒为单位。\n\n其他类型使用 expire key seconds为给定 key 设置过期时间。\n\n\n# list\n\n 1. 介绍 ：list 即是 链表。链表是一种非常常见的数据结构，特点是易于数据元素的插入和删除并且可以灵活调整链表长度，但是链表的随机访问困难。许多高级编程语言都内置了链表的实现比如 java 中的 linkedlist，但是 c 语言并没有实现链表，所以 redis 实现了自己的链表数据结构。redis 的 list 的实现为一个 双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。\n 2. 常用命令: rpush,lpop,lpush,rpop,lrange,llen 等。\n 3. 应用场景: 发布与订阅或者说消息队列、慢查询。\n\n\n# hash\n\n 1. 介绍 ：hash 类似于 jdk1.8 前的 hashmap，内部实现也差不多(数组 + 链表)。不过，redis 的 hash 做了更多优化。另外，hash 是一个 string 类型的 field 和 value 的映射表，特别适合用于存储对象，后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值。 比如我们可以 hash 数据结构来存储用户信息，商品信息等等。\n 2. 常用命令： hset,hmset,hexists,hget,hgetall,hkeys,hvals 等。\n 3. 应用场景: 系统中对象数据的存储。\n\n\n# set\n\n 1. 介绍 ： set 类似于 java 中的 hashset 。redis 中的 set 类型是一种无序不重复集合，集合中的元素没有先后顺序。当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。比如：你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。redis 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。\n 2. 常用命令： sadd,spop,smembers,sismember,scard,sinterstore,sunion 等。\n 3. 应用场景: 需要存放的数据不能重复以及需要获取多个数据源交集和并集等场景\n\n\n# sorted set\n\n 1. 介绍： 和 set 相比，sorted set 增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列，还可以通过 score 的范围来获取元素的列表。有点像是 java 中 hashmap 和 treeset 的结合体。\n 2. 常用命令： zadd,zcard,zscore,zrange,zrevrange,zrem 等。\n 3. 应用场景： 需要对数据根据某个权重进行排序的场景。比如在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息。\n\n\n# bitmap\n\n 1. 介绍： bitmap 存储的是连续的二进制数字（0 和 1），通过 bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 bitmap 本身会极大的节省储存空间。\n 2. 常用命令： setbit 、getbit 、bitcount、bitop\n 3. 应用场景： 适合需要保存状态信息（比如是否签到、是否登录...）并需要进一步对这些信息进行分析的场景。比如用户签到情况、活跃用户情况、用户行为统计（比如是否点赞过某个视频）。\n\n\n# 三、spring data redis\n\n对于下层，spring data redis 提供了统一的操作模板（后文中，我们会看到是 redistemplate 类），封装了 jedis、lettuce 的 api 操作，访问 redis 数据。所以，实际上，spring data redis 内置真正访问的实际是 jedis、lettuce 等 api 操作。\n\n目前spring data redis 暂时只支持 jedis、lettuce 的内部封装，而 redisson 是由 redisson-spring-data 来提供。\n\n\n# 1. redistemplate\n\norg.springframework.data.redis.core.redistemplate 类，从类名上，我们就明明白白知道，提供 redis 操作模板 api 。核心属性如下：\n\n// 1、序列化相关属性\n@nullable\nprivate redisserializer keyserializer = null;\n@nullable\nprivate redisserializer valueserializer = null;\n@nullable\nprivate redisserializer hashkeyserializer = null;\n@nullable\nprivate redisserializer hashvalueserializer = null;\nprivate redisserializer<string> stringserializer = redisserializer.string();\n\n// 2、lua 脚本执行器\n@nullable\nprivate scriptexecutor<k> scriptexecutor;\n\n// 3、常见数据结构操作类\n@nullable\nprivate valueoperations<k, v> valueops;\n@nullable\nprivate listoperations<k, v> listops;\n@nullable\nprivate setoperations<k, v> setops;\n@nullable\nprivate zsetoperations<k, v> zsetops;\n@nullable\nprivate geooperations<k, v> geoops;\n@nullable\nprivate hyperloglogoperations<k, v> hllops;\n\n\n\n# 2. 序列化\n\n# 2.1 rediserializer\n\norg.springframework.data.redis.serializer.redisserializer 接口，redis 序列化接口，用于 redis key 和 value 的序列化。\n\npublic interface redisserializer<t> {\n    @nullable\n    byte[] serialize(@nullable t var1) throws serializationexception;\n\n    @nullable\n    t deserialize(@nullable byte[] var1) throws serializationexception;\n\n    static redisserializer<object> java() {\n        return java((classloader)null);\n    }\n\n    static redisserializer<object> java(@nullable classloader classloader) {\n        return new jdkserializationredisserializer(classloader);\n    }\n\n    static redisserializer<object> json() {\n        return new genericjackson2jsonredisserializer();\n    }\n\n    static redisserializer<string> string() {\n        return stringredisserializer.utf_8;\n    }\n}\n\n\n * 定义了对象 和二进制数组的转换\n\nredisserializer 的实现类\n\n\n\n主要分成四类：\n\n * jdk 序列化方式\n * string 序列化方式\n * json 序列化方式\n * xml 序列化方式\n\n# 2.1.1 string 序列化方式\n\n 1. org.springframework.data.redis.serializer.stringredisserializer ，字符串和二进制数组的直接转换。代码如下：\n\npublic class stringredisserializer implements redisserializer<string> {\n    private final charset charset;\n    public static final stringredisserializer us_ascii;\n    public static final stringredisserializer iso_8859_1;\n    public static final stringredisserializer utf_8;\n\n    public stringredisserializer() {\n        this(standardcharsets.utf_8);\n    }\n\n    public stringredisserializer(charset charset) {\n        assert.notnull(charset, "charset must not be null!");\n        this.charset = charset;\n    }\n\n    public string deserialize(@nullable byte[] bytes) {\n        return bytes == null ? null : new string(bytes, this.charset);\n    }\n\n    public byte[] serialize(@nullable string string) {\n        return string == null ? null : string.getbytes(this.charset);\n    }\n\n    static {\n        us_ascii = new stringredisserializer(standardcharsets.us_ascii);\n        iso_8859_1 = new stringredisserializer(standardcharsets.iso_8859_1);\n        utf_8 = new stringredisserializer(standardcharsets.utf_8);\n    }\n}\n\n\n绝大多数情况下，我们 key 和 value 都会使用这种序列化方案。\n\n 2. org.springframework.data.redis.serializer.generictostringserializer ，使用 spring conversionservice 实现 <t> 对象和 string 的转换，从而 string 和二进制数组的转换。\n\n# 2.1.2 json 序列化方式\n\n 1. org.springframework.data.redis.serializer.genericjackson2jsonredisserializer ，使用 jackson 实现 json 的序列化方式，并且从 generic 单词可以看出，是支持所有类。\n 2. org.springframework.data.redis.serializer.jackson2jsonredisserializer ，使用 jackson 实现 json 的序列化方式，并且显示指定 <t> 类型。\n 3. com.alibaba.fastjson.support.spring.genericfastjsonredisserializer ，使用 fastjson 实现 json 的序列化方式，和 genericjackson2jsonredisserializer 一致。\n 4. com.alibaba.fastjson.support.spring.fastjsonredisserializer ，使用 fastjson 实现 json 的序列化方式，和 jackson2jsonredisserializer 一致。\n\n# 2.2 配置序列化的方式\n\n 1. 创建 redisconfiguration 配置类\n\n@configuration\npublic class redisconfiguration {\n\n    @bean\n    public redistemplate<string, object> redistemplate(redisconnectionfactory factory) {\n        // 创建 redistemplate 对象\n        redistemplate<string, object> template = new redistemplate<>();\n        // 设置 redisconnection 工厂。\n        template.setconnectionfactory(factory);\n\n        // 使用 string 序列化方式，序列化 key 。\n        template.setkeyserializer(redisserializer.string());\n\n        // 使用 json 序列化方式（库是 jackson ），序列化 value 。\n        template.setvalueserializer(redisserializer.json());\n        return template;\n    }\n\n}\n\n\n * redisserializer#string() 静态方法，返回的就是使用 utf-8 编码的 stringredisserializer 对象。代码如下：\n   \n   // redisserializer.java\n   static redisserializer<string> string() {\n   \treturn stringredisserializer.utf_8;\n   }\n   \n   // stringredisserializer.java\n   public static final stringredisserializer iso_8859_1 = new stringredisserializer(standardcharsets.iso_8859_1);\n   \n\n * redisserializer#json() 静态方法，返回 genericjackson2jsonredisserializer 对象。代码如下：\n\n * // redisserializer.java\n   \n   static redisserializer<object> json() {\n   \treturn new genericjackson2jsonredisserializer();\n   }\n   \n\n\n# 3. redisson\n\nredisson在基于nio的netty框架上，充分的利用了redis键值数据库提供的一系列优势，在java实用工具包中常用接口的基础上，为使用者提供了一系列具有分布式特性的常用工具类。使得原本作为协调单机多线程并发程序的工具包获得了协调分布式多机多线程并发系统的能力，大大降低了设计和研发大规模分布式系统的难度。同时结合各富特色的分布式服务，更进一步简化了分布式环境中程序相互之间的协作。\n\n\n# 四、缓存\n\n\n# 4.1 缓存设置过期时间\n\n一般情况下，我们设置保存的缓存数据的时候都会设置一个过期时间。为什么呢？\n\n因为内存是有限的，如果缓存中的所有数据都是一直保存的话，分分钟直接 out of memory。\n\nredis 中除了字符串类型有自己独有设置过期时间的命令 setex 外，其他方法都需要依靠 expire 命令来设置过期时间 。另外， persist 命令可以移除一个键的过期时间。\n\n过期时间除了有助于缓解内存的消耗，还有什么其他用么？\n\n很多时候，我们的业务场景就是需要某个数据只在某一时间段内存在，比如我们的短信验证码可能只在 1 分钟内有效，用户登录的 token 可能只在 1 天内有效。\n\n如果使用传统的数据库来处理的话，一般都是自己判断过期，这样更麻烦并且性能要差很多。\n\n\n# 4.2 如何判断数据是否过期\n\nredis 通过一个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。过期字典的键指向 redis 数据库中的某个 key(键)，过期字典的值是一个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 unix 时间戳）。\n\n# 4.2.1 过期删除策略\n\n如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，redis 是怎么对这批 key 进行删除的呢？\n\n常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：\n\n 1. 惰性删除 ：只会在取出 key 的时候才对数据进行过期检查。这样对 cpu 最友好，但是可能会造成太多过期 key 没有被删除。\n 2. 定期删除 ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 cpu 时间的影响。\n\n定期删除对内存更加友好，惰性删除对 cpu 更加友好。两者各有千秋，所以 redis 采用的是 定期删除+惰性/懒汉式删除 。\n\n但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 out of memory 了。\n\n怎么解决这个问题呢？答案就是：redis 内存淘汰机制。\n\n * 设置淘汰策略\n   \n   config set maxmemory-policy allkeys-lru\n   \n\nredis 提供 6 种数据淘汰策略：\n\n 1. volatile-lru（least recently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰\n 2. volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰\n 3. volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰\n 4. allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）\n 5. allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰\n 6. no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！\n\n4.0 版本后增加以下两种：\n\n 1. volatile-lfu（least frequently used）：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰\n 2. allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key\n\n# 4.2.2 lru和lfu\n\n * lru（least recently used）\n   \n   即最近最少使用，会将最不常用的数据筛选出来，保留最近频繁使用的数据。lru 会把所有数据组成一个链表，链表头部称为 mru，代表最近最常使用的数据；尾部称为 lru代表最近最不常使用的数据；\n   \n   但是，如果直接在 redis 中使用 lru 算法也会有一些问题：\n   \n   lru 算法在实现过程中使用链表管理所有缓存的数据，这会给 redis 带来额外的开销，而且，当有数据访问时就会有链表移动操作，进而降低 redis 的性能。\n   \n   于是，redis 对 lru 的实现进行了一些改变：\n   \n   * 记录每个 key 最近一次被访问的时间戳（由键值对数据结构 redisobject 中的 lru 字段记录）\n   * 在第一次淘汰数据时，会先随机选择 n 个数据作为一个候选集合，然后淘汰 lru 值最小的。（n 可以通过 config set maxmemory-samples 100 命令来配置）\n   * 后续再淘汰数据时，会挑选数据进入候选集合，进入集合的条件是：它的 lru 小于候选集合中最小的 lru。\n   * 如果候选集合中数据个数达到了 maxmemory-samples，redis 就会将 lru 值小的数据淘汰出去。\n\n * lfu（least frequently used）\n   \n   即最不经常使用策略，它是基于数据访问次数来淘汰数据的，在 redis 4.0 时添加进来。它在 lru 策略基础上，为每个数据增加了一个计数器，来统计这个数据的访问次数。\n   \n   前面说到，lru 使用了 redisobject 中的 lru 字段记录时间戳，lru 是 24bit 的，lfu 将 lru 拆分为两部分：\n   \n   * ldt 值：lru 字段的前 16bit，表示数据的访问时间戳\n   * counter 值：lru 字段的后 8bit，表示数据的访问次数 使用 lfu 策略淘汰缓存时，会把访问次数最低的数据淘汰，如果访问次数相同，再根据访问的时间，将访问时间戳最小的淘汰。\n   \n   为什么 redis 有了 lru 还需要 lfu 呢？\n   \n   在一些场景下，有些数据被访问的次数非常少，甚至只会被访问一次。当这些数据服务完访问请求后，如果还继续留存在缓存中的话，就只会白白占用缓存空间。\n   \n   由于 lru 是基于访问时间的，如果系统对大量数据进行单次查询，这些数据的 lru 值就很大，使用 lfu 算法就不容易被淘汰。\n\n\n# 4.3 缓存穿透\n\n# 什么是缓存穿透？\n\n缓存穿透说简单点就是大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。举个例子：某个黑客故意制造我们缓存中不存在的 key 发起大量请求，导致大量请求落到数据库。\n\n# 有哪些解决办法？\n\n最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。\n\n1）缓存无效 key\n\n如果缓存和数据库都查不到某个 key 的数据就写一个到 redis 中去并设置过期时间，具体命令如下： set key value ex 10086 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。\n\n另外，这里多说一嘴，一般情况下我们是这样设计 key 的： 表名:列名:主键名:主键值 。\n\n2）布隆过滤器\n\n布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。\n\n具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\n\n但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： 布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。\n\n为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！\n\n我们先来看一下，当一个元素加入布隆过滤器中的时候，会进行哪些操作：\n\n 1. 使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。\n 2. 根据得到的哈希值，在位数组中把对应下标的值置为 1。\n\n我们再来看一下，当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：\n\n 1. 对给定元素再次进行相同的哈希计算；\n 2. 得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。\n\n然后，一定会出现这样一种情况：不同的字符串可能哈希出来的位置相同。 （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）\n\n\n# 4.4 缓存雪崩\n\n# 什么是缓存雪崩？\n\n实际上，缓存雪崩描述的就是这样一个简单的场景：缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。\n\n举个例子：系统的缓存模块出了问题比如宕机导致不可用。造成系统的所有访问，都要走数据库。\n\n还有一种缓存雪崩的场景是：有一些被大量访问数据（热点缓存）在某一时刻大面积失效，导致对应的请求直接落到了数据库上。 这样的情况，有下面几种解决办法：\n\n举个例子 ：秒杀开始 12 个小时之前，我们统一存放了一批商品到 redis 中，设置的缓存过期时间也是 12 个小时，那么秒杀开始的时候，这些秒杀的商品的访问直接就失效了。导致的情况就是，相应的请求直接就落到了数据库上，就像雪崩一样可怕。\n\n# 有哪些解决办法？\n\n针对 redis 服务不可用的情况：\n\n 1. 采用 redis 集群，避免单机出现问题整个缓存服务都没办法使用。\n 2. 限流，避免同时处理大量的请求。\n\n针对热点缓存失效的情况：\n\n 1. 设置不同的失效时间比如随机设置缓存的失效时间。\n 2. 缓存永不失效。\n\n\n# 4.5 如何保证缓存和数据库数据的一致性？\n\n首先，我们必须知道这里的“数据一致性”是什么意思。这里“一致性”包括两种情况：\n\n * 缓存中有数据，那么，缓存的数据需要和数据库中的值相同\n * 缓存中本身没有数据，那么，数据库中的值就必须是最新值。\n\n不符合这两种情况的，就是缓存和数据库的数据不一致了。\n\n# 为什么会发生缓存和数据库的数据不一致\n\n当缓存的读写模式不同时，缓存数据不一致发生的情况不一样。\n\n# 当redis作为读写缓存时\n\n对于读写缓存来说，如果要对数据进行增删改，就需要在缓存中进行，同时还要根据采取的写回策略，决定是否同步写回到数据库中。\n\n * 同步直写策略：写缓存时，也同步写数据库，缓存和数据库中的数据一致\n * 异步写回策略：写缓存时不同步写数据库，等到数据从缓存中淘汰时，再写回数据库。使用这种策略时，如果数据还没有写回数据库，缓存就发生了故障。那么，此时，数据库就没有最新数据了\n\n所以，对于读写缓存来说，要想保证缓存和数据库中的数据一致，就要采用同步直写策略。不过，需要注意的是：如果采用这种策略，就需要保证同时更新缓存和数据库。所以，我们要在业务应用中使用事务机制，来保证缓存和数据库的更新具有原子性，也就是说，两者要不一起更新，要不都不更新，返回错误信息，进行重试。否则，我们就无法实现同步直接\n\n当然，在有些场景下，我们对数据一致性的要求可能不是那么高，那么，我们可以使用异步写回策略。\n\n# 当redis 作为只读缓存时\n\n对于只读缓存来说：\n\n * 如果有数据新增，会直接写入数据库；\n * 有数据删改时，就需要把只读缓存中的数据标记为无效\n   * 这样，应用后继在访问这些，些增删改的数据时，因为缓存中没有相应的数据，就会发生缓存缺失。\n   * 此时，应用再从数据库中把数据读入缓存，这样后续再访问数据时，就能够直接从缓存中读取了。\n\n那么，这个过程中会不会出现数据不一致的情况呢？ （1）新增数据：\n\n * 如果是新增数据，数据会直接写到数据库中，不用对缓存做任何操作。此时，缓存中本身就没有新增数据，而数据库中是最新值\n * 这种情况符合我们刚刚所说的一致性的第 2 种情况，所以，此时，缓存和数据库的数据是一致的。\n\n（2）删改数据\n\n如果发生删改操作，应用既要更新数据库，也要在缓存中删除数据。这两个操作如果无法保证原子性，也就是说，要不都完成，要不都没完成，此时，就会出现数据不一致问题了。\n\n * 我们假设应用先删除缓存，再更新数据库，如果缓存删除成功，但是数据库更新失败，那么，应用再访问数据时，缓存中没有数据，就会发生缓存缺失。然后，应用再访问数据库，但是数据库中的值为旧值，应用就访问到旧值了。\n * 如果应用先完成了数据库的更新，但是，在删除缓存时失败了，那么，数据库中的值是新值，而缓存中的是旧值，这肯定是不一致的。这个时候，如果有其他的并发请求来访问数据，按照正常的缓存访问流程，就会先在缓存中查询，但此时，就会读到旧值了。\n\n总结：在更新数据库和删除缓存值的过程中，无论这两个操作的执行顺序谁先谁后，只要有一个操作失败了，就会导致客户端读取到旧值\n\n# 如何解决数据不一致问题？\n\n# 第一种方法：重试机制\n\n具体的说，就是：\n\n * 可以把要删除的缓存值或者要更新的数据库值暂存到消息队列中。当应用没有能够成功的删除缓存值或者是更新数据库值时，可以从消息队列中重新读取这些值，然后再次进行删除或者更新\n * 如果能够成功删除或者更新，我们就要把这些值从消息队列中去除，以免重复操作，此时，我们也可以保证数据库和缓存一致了。否则的话，我们还需要再次进行重试。如果重试超过一定次数，还是没有成功，我们就需要向应用层发送报错信息了。\n\n刚刚说的是在更新数据库和删除缓存值的过程中，其中一个操作失败的情况，实际上，即使这两个操作第一次执行时都没有失败，当有大量并发请求时，应用还是有可能读到不一致的数据\n\n同样，我们按照不同的删除和更新顺序，分成两种情况来看。在这两种情况下，我们的解决方法也有所不同。\n\n# 情况一：先删除缓存，再更新数据库\n\n假设线程 a 删除缓存值后，还没有来得及更新数据库（比如说有网络延迟），线程 b 就开始读取数据了，那么这个时候，线程 b 会发现缓存缺失，就只能去数据库读取。这会带来两个问题：\n\n 1. 线程 b 读取到了旧值；\n 2. 线程 b 是在缓存缺失的情况下读取的数据库，所以，它还会把旧值写入缓存，这可能会导致其他线程从缓存中读到旧值。\n\n怎么解决呢？在线程 a 更新完数据库值以后，我们可以让它先 sleep 一小段时间，再进行一次缓存删除操作。\n\n * 之所以要加上 sleep 的这段时间，就是为了让线程 b 能够先从数据库读取数据，再把缺失的数据写入缓存，然后，线程 a 再进行删除。所以，线程 a sleep 的时间，就需要大于线 程 b 读取数据再写入缓存的时间。这个时间怎么确定呢？建议你在业务程序运行的时候，统计下线程读数据和写缓存的操作时间，以此为基础来进行估算。\n * 这样一来，其它线程读取数据时，会发现缓存缺失，所以会从数据库中读取最新值。因为这个方案会在第一次删除缓存值后，延迟一段时间再次进行删除，所以我们也把它叫做“延迟双删”。\n\n# 情况二：先更新数据库值，再删除缓存值\n\n * 如果线程 a 删除了数据库中的值，但还没来得及删除缓存值，线程 b 就开始读取数据了，那么此时，线程 b 查询缓存时，发现缓存命中，就会直接从缓存中读取旧值。\n * 不过，在这种情况下，如果其他线程并发读缓存的请求不多，那么，就不会有很多请求读取到旧值。而且，线程 a 一般也会很快删除缓存值，这样一来，其他线程再次读取时，就会发生缓存缺失，进而从数据库中读取最新值。所以，这种情况对业务的影响较小。\n\n方法也是延迟双删。\n\n\n# 五、redis 的持久化机制\n\n很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。\n\nredis 不同于 memcached 的很重要一点就是，redis 支持持久化，而且支持两种不同的持久化操作。redis 的一种持久化方式叫快照（snapshotting，rdb），另一种方式是只追加文件（append-only file, aof）。这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。\n\n\n# 快照（snapshotting）持久化（rdb）\n\nredis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（redis 主从结构，主要用来提高 redis 性能），还可以将快照留在原地以便重启服务器的时候使用。\n\n快照持久化是 redis 默认采用的持久化方式，在 redis.conf 配置文件中默认有此下配置：\n\n> save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，redis就会自动触发bgsave命令创建快照。\n> \n> save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，redis就会自动触发bgsave命令创建快照。\n> \n> save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，redis就会自动触发bgsave命令创建快照。\n\n\n# aof（append-only file）持久化\n\n与快照持久化相比，aof 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 redis 没有开启 aof（append only file）方式的持久化，可以通过 appendonly 参数开启：\n\n> appendonly yes\n\n开启 aof 持久化后每执行一条会更改 redis 中的数据的命令，redis 就会将该命令写入到内存缓存 server.aof_buf 中，然后再根据 appendfsync 配置来决定何时将其同步到硬盘中的 aof 文件。\n\naof 文件的保存位置和 rdb 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 appendonly.aof。\n\n在 redis 的配置文件中存在三种不同的 aof 持久化方式，它们分别是：\n\n> appendfsync always #每次有数据修改发生时都会写入aof文件,这样会严重降低redis的速度 appendfsync everysec #每秒钟同步一次，显式地将多个写命令同步到硬盘 appendfsync no #让操作系统决定何时进行同步\n\n为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec 选项 ，让 redis 每秒同步一次 aof 文件，redis 性能几乎没受到任何影响。而且这样即使出现系统崩溃，用户最多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操作的时候，redis 还会优雅的放慢自己的速度以便适应硬盘的最大写入速度。\n\n\n# 六、redis 事务\n\nredis 可以通过 multi，exec，discard 和 watch 等命令来实现事务(transaction)功能。\n\n使用 multi 命令后可以输入多个命令。redis 不会立即执行这些命令，而是将它们放到队列，当调用了 exec 命令将执行所有命令。\n\n这个过程是这样的：\n\n 1. 开始事务（multi）。\n 2. 命令入队(批量操作 redis 的命令，先进先出（fifo）的顺序执行)。\n 3. 执行事务(exec)。\n\n你也可以通过 discard 命令取消一个事务，它会清空事务队列中保存的所有命令。\n\nwatch 命令用于监听指定的键，当调用 exec 命令执行事务时，如果一个被 watch 命令监视的键被修改的话，整个事务都不会执行，直接返回失败。\n\nredis 是不支持 roll back 的，因而不满足原子性的（而且不满足持久性）。\n\nredis 官网也解释了自己为啥不支持回滚。简单来说就是 redis 开发者们觉得没必要支持回滚，这样更简单便捷并且性能更好。redis 开发者觉得即使命令执行错误也应该在开发过程中就被发现而不是生产过程中。\n\n你可以将 redis 中的事务就理解为 ：redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。\n\n\n# 七、redis 做消息队列\n\nredis 5.0 新增加的一个数据结构 stream 可以用来做消息队列，stream 支持：\n\n * 发布 / 订阅模式\n * 按照消费者组进行消费\n * 消息持久化（ rdb 和 aof）\n\n不过，和专业的消息队列相比，还是有很多欠缺的地方比如消息丢失和堆积问题不好解决。\n\n我们通常建议是不需要使用 redis 来做消息队列的，你完全可以选择市面上比较成熟的一些消息队列比如 rocketmq、kafka。',charsets:{cjk:!0},lastUpdated:"2022/04/13, 17:22:27",lastUpdatedTimestamp:1649841747e3},{title:"Elasticsearch",frontmatter:{title:"Elasticsearch",date:"2022-04-10T21:42:33.000Z",permalink:"/pages/0a0365/"},regularPath:"/02.%E6%A1%86%E6%9E%B6/03.SpringBoot/03.%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/02.Elasticsearch.html",relativePath:"02.框架/03.SpringBoot/03.非关系型数据库/02.Elasticsearch.md",key:"v-c2ffda6e",path:"/pages/0a0365/",headers:[{level:2,title:"一、概述",slug:"一、概述",normalizedTitle:"一、概述",charIndex:2},{level:3,title:"Elasticsearch 的用途是什么？",slug:"elasticsearch-的用途是什么",normalizedTitle:"elasticsearch 的用途是什么？",charIndex:269},{level:3,title:"Elasticsearch 的优点",slug:"elasticsearch-的优点",normalizedTitle:"elasticsearch 的优点",charIndex:452},{level:2,title:"二、工作原理",slug:"二、工作原理",normalizedTitle:"二、工作原理",charIndex:1108},{level:3,title:"Elasticsearch 索引是什么？",slug:"elasticsearch-索引是什么",normalizedTitle:"elasticsearch 索引是什么？",charIndex:1281},{level:2,title:"三、安装",slug:"三、安装",normalizedTitle:"三、安装",charIndex:1654},{level:3,title:"3.1 基本安装运行",slug:"_3-1-基本安装运行",normalizedTitle:"3.1 基本安装运行",charIndex:1684},{level:3,title:"3.2 安装 IK 分词器",slug:"_3-2-安装-ik-分词器",normalizedTitle:"3.2 安装 ik 分词器",charIndex:2691},{level:2,title:"四、连接方式",slug:"四、连接方式",normalizedTitle:"四、连接方式",charIndex:3019},{level:3,title:"4.1 Spring Data Jest",slug:"_4-1-spring-data-jest",normalizedTitle:"4.1 spring data jest",charIndex:3597},{level:3,title:"4.2 Spring Data Elasticsearch",slug:"_4-2-spring-data-elasticsearch",normalizedTitle:"4.2 spring data elasticsearch",charIndex:3857}],headersStr:"一、概述 Elasticsearch 的用途是什么？ Elasticsearch 的优点 二、工作原理 Elasticsearch 索引是什么？ 三、安装 3.1 基本安装运行 3.2 安装 IK 分词器 四、连接方式 4.1 Spring Data Jest 4.2 Spring Data Elasticsearch",content:'# 一、概述\n\nElasticsearch 是一个分布式的免费开源搜索和分析引擎，适用于包括文本、数字、地理空间、结构化和非结构化数据等在内的所有类型的数据。Elasticsearch 以其简单的 REST 风格 API、分布式特性、速度和可扩展性而闻名，是 Elastic Stack 的核心组件；Elastic Stack 是一套适用于数据采集、扩充、存储、分析和可视化的免费开源工具。人们通常将 Elastic Stack 称为 ELK Stack（代指 Elasticsearch、Logstash 和 Kibana）；\n\n\n# Elasticsearch 的用途是什么？\n\nElasticsearch 在速度和可扩展性方面都表现出色，而且还能够索引多种类型的内容，这意味着其可用于多种用例：\n\n * 应用程序搜索\n * 网站搜索\n * 企业搜索\n * 日志处理和分析\n * 基础设施指标和容器监测\n * 应用程序性能监测\n * 地理空间数据分析和可视化\n * 安全分析\n * 业务分析\n\n\n# Elasticsearch 的优点\n\n**Elasticsearch 很快。**由于 Elasticsearch 是在 Lucene 基础上构建而成的，所以在全文本搜索方面表现十分出色。Elasticsearch 同时还是一个近实时的搜索平台，这意味着从文档索引操作到文档变为可搜索状态之间的延时很短，一般只有一秒。因此，Elasticsearch 非常适用于对时间有严苛要求的用例，例如安全分析和基础设施监测。\n\n**Elasticsearch 具有分布式的本质特征。**Elasticsearch 中存储的文档分布在不同的容器中，这些容器称为分片，可以进行复制以提供数据冗余副本，以防发生硬件故障。Elasticsearch 的分布式特性使得它可以扩展至数百台（甚至数千台）服务器，并处理 PB 量级的数据。\n\n**Elasticsearch 包含一系列广泛的功能。**除了速度、可扩展性和弹性等优势以外，Elasticsearch 还有大量强大的内置功能（例如数据汇总和索引生命周期管理），可以方便用户更加高效地存储和搜索数据。\n\n**Elastic Stack 简化了数据采集、可视化和报告过程。**通过与 Beats 和 Logstash 进行集成，用户能够在向 Elasticsearch 中索引数据之前轻松地处理数据。同时，Kibana 不仅可针对 Elasticsearch 数据提供实时可视化，同时还提供 UI 以便用户快速访问应用程序性能监测 (APM)、日志和基础设施指标等数据。\n\n\n# 二、工作原理\n\n原始数据会从多个来源（包括日志、系统指标和网络应用程序）输入到 Elasticsearch 中。数据采集指在 Elasticsearch 中进行索引之前解析、标准化并充实这些原始数据的过程。这些数据在 Elasticsearch 中索引完成之后，用户便可针对他们的数据运行复杂的查询，并使用聚合来检索自身数据的复杂汇总。\n\n\n# Elasticsearch 索引是什么？\n\nElasticsearch 索引指相互关联的文档集合。Elasticsearch 会以 JSON 文档的形式存储数据。每个文档都会在一组键（字段或属性的名称）和它们对应的值（字符串、数字、布尔值、日期、数值组、地理位置或其他类型的数据）之间建立联系。\n\nElasticsearch 使用的是一种名为倒排索引的数据结构，这一结构的设计可以允许十分快速地进行全文本搜索。倒排索引会列出在所有文档中出现的每个特有词汇，并且可以找到包含每个词汇的全部文档。\n\n在索引过程中，Elasticsearch 会存储文档并构建倒排索引，这样用户便可以近实时地对文档数据进行搜索。索引过程是在索引 API 中启动的，通过此 API 您既可向特定索引中添加 JSON 文档，也可更改特定索引中的 JSON 文档。\n\n\n# 三、安装\n\n这里以在 docker 中拉取镜像为例\n\n\n# 3.1 基本安装运行\n\n# 1、拉取镜像\ndocker pull elasticsearch:7.17.2   \n\n# 2、创建存放数据及配置文件的文件夹，启动时挂载。\nmkdir -p  /Library/elasticsearch/data/ \nmkdir -p  /Library/elasticsearch/config/\n\n# 3、编写配置文件\necho \'http.host: 0.0.0.0\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*" \'>>/Library/elasticsearch/config/elasticsearch.yml\n# http.cors.enabled: true 和http.cors.allow-origin: "*"配置是为了解决跨域问题，因为等下还要下载可视化工具查看。\n\n# 4、修改文件夹的权限\nchmod -R 777 /Users/aafall/Documents/docker/es\n\n# 5、使用镜像，创建容器并启动\ndocker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" \\\n-e ES_JAVA_OPTS="-Xms64m -Xmx512m" \\\n-v /Users/aafall/Documents/docker/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\n-v /Users/aafall/Documents/docker/es/data:/usr/share/elasticsearch/data \\\n-v /Users/aafall/Documents/docker/es/plugins:/usr/share/elasticsearch/plugins \\\nelasticsearch:7.17.2\n# -d 后台运行容器，返回容器ID\n# -e ES_JAVA_OPTS="-Xms64m -Xmx512m" 配置内存大小\n# -e "discovery.type=single-node" 单例模式\n# -v 目录的映射\n\n\n\n# 3.2 安装 IK 分词器\n\n * 在线安装\n   \n   # 进入容器\n   docker exec -it elasticsearch /bin/bash  \n   # 安装对应版本\n   ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.2/elasticsearch-analysis-ik-7.17.2.zip\n   # https://github.com/medcl/elasticsearch-analysis-ik/releases\n   \n\n * 离线安装\n\n\n# 四、连接方式\n\n * transport ：通过 TCP 方式访问 ES 。\n   \n   > 对应的库是 org.elasticsearch.client.transport 。\n\n * rest ：通过 HTTP API 方式访问 ES 。\n   \n   > 对应的库是：\n   > \n   >  * elasticsearch-rest-client + org.elasticsearch.client.rest\n   >  * elasticsearch-rest-high-level-client ，提供 high-level rest API 。从 Elasticsearch 6.0.0-beta1 开始提供。\n\n我们在项目中，编写数据库操作的逻辑，使用 MyBatis 或者 JPA 为主，而不使用原生的 JDBC 。那么，我们在编写 Elasticsearch 操作的逻辑，也不直接使用上述的客户端，而是：\n\n * spring-data-elasticsearch ，基于 Elasticsearch transport 客户端封装。\n * spring-data-jest ，基于 Jest 客户端封装。\n\n虽然这两者底层使用的不同客户端，但是都基于 Spring Data 体系，所以项目在使用时，编写的代码是相同的。\n\n\n# 4.1 Spring Data Jest\n\n * 引入依赖\n   \n   \x3c!-- 自动化配置 Spring Data Jest --\x3e\n    <dependency>\n        <groupId>com.github.vanroy</groupId>\n        <artifactId>spring-boot-starter-data-jest</artifactId>\n        <version>3.2.5.RELEASE</version>\n   </dependency>\n   \n\n\n# 4.2 Spring Data Elasticsearch',normalizedContent:'# 一、概述\n\nelasticsearch 是一个分布式的免费开源搜索和分析引擎，适用于包括文本、数字、地理空间、结构化和非结构化数据等在内的所有类型的数据。elasticsearch 以其简单的 rest 风格 api、分布式特性、速度和可扩展性而闻名，是 elastic stack 的核心组件；elastic stack 是一套适用于数据采集、扩充、存储、分析和可视化的免费开源工具。人们通常将 elastic stack 称为 elk stack（代指 elasticsearch、logstash 和 kibana）；\n\n\n# elasticsearch 的用途是什么？\n\nelasticsearch 在速度和可扩展性方面都表现出色，而且还能够索引多种类型的内容，这意味着其可用于多种用例：\n\n * 应用程序搜索\n * 网站搜索\n * 企业搜索\n * 日志处理和分析\n * 基础设施指标和容器监测\n * 应用程序性能监测\n * 地理空间数据分析和可视化\n * 安全分析\n * 业务分析\n\n\n# elasticsearch 的优点\n\n**elasticsearch 很快。**由于 elasticsearch 是在 lucene 基础上构建而成的，所以在全文本搜索方面表现十分出色。elasticsearch 同时还是一个近实时的搜索平台，这意味着从文档索引操作到文档变为可搜索状态之间的延时很短，一般只有一秒。因此，elasticsearch 非常适用于对时间有严苛要求的用例，例如安全分析和基础设施监测。\n\n**elasticsearch 具有分布式的本质特征。**elasticsearch 中存储的文档分布在不同的容器中，这些容器称为分片，可以进行复制以提供数据冗余副本，以防发生硬件故障。elasticsearch 的分布式特性使得它可以扩展至数百台（甚至数千台）服务器，并处理 pb 量级的数据。\n\n**elasticsearch 包含一系列广泛的功能。**除了速度、可扩展性和弹性等优势以外，elasticsearch 还有大量强大的内置功能（例如数据汇总和索引生命周期管理），可以方便用户更加高效地存储和搜索数据。\n\n**elastic stack 简化了数据采集、可视化和报告过程。**通过与 beats 和 logstash 进行集成，用户能够在向 elasticsearch 中索引数据之前轻松地处理数据。同时，kibana 不仅可针对 elasticsearch 数据提供实时可视化，同时还提供 ui 以便用户快速访问应用程序性能监测 (apm)、日志和基础设施指标等数据。\n\n\n# 二、工作原理\n\n原始数据会从多个来源（包括日志、系统指标和网络应用程序）输入到 elasticsearch 中。数据采集指在 elasticsearch 中进行索引之前解析、标准化并充实这些原始数据的过程。这些数据在 elasticsearch 中索引完成之后，用户便可针对他们的数据运行复杂的查询，并使用聚合来检索自身数据的复杂汇总。\n\n\n# elasticsearch 索引是什么？\n\nelasticsearch 索引指相互关联的文档集合。elasticsearch 会以 json 文档的形式存储数据。每个文档都会在一组键（字段或属性的名称）和它们对应的值（字符串、数字、布尔值、日期、数值组、地理位置或其他类型的数据）之间建立联系。\n\nelasticsearch 使用的是一种名为倒排索引的数据结构，这一结构的设计可以允许十分快速地进行全文本搜索。倒排索引会列出在所有文档中出现的每个特有词汇，并且可以找到包含每个词汇的全部文档。\n\n在索引过程中，elasticsearch 会存储文档并构建倒排索引，这样用户便可以近实时地对文档数据进行搜索。索引过程是在索引 api 中启动的，通过此 api 您既可向特定索引中添加 json 文档，也可更改特定索引中的 json 文档。\n\n\n# 三、安装\n\n这里以在 docker 中拉取镜像为例\n\n\n# 3.1 基本安装运行\n\n# 1、拉取镜像\ndocker pull elasticsearch:7.17.2   \n\n# 2、创建存放数据及配置文件的文件夹，启动时挂载。\nmkdir -p  /library/elasticsearch/data/ \nmkdir -p  /library/elasticsearch/config/\n\n# 3、编写配置文件\necho \'http.host: 0.0.0.0\nhttp.cors.enabled: true\nhttp.cors.allow-origin: "*" \'>>/library/elasticsearch/config/elasticsearch.yml\n# http.cors.enabled: true 和http.cors.allow-origin: "*"配置是为了解决跨域问题，因为等下还要下载可视化工具查看。\n\n# 4、修改文件夹的权限\nchmod -r 777 /users/aafall/documents/docker/es\n\n# 5、使用镜像，创建容器并启动\ndocker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" \\\n-e es_java_opts="-xms64m -xmx512m" \\\n-v /users/aafall/documents/docker/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\n-v /users/aafall/documents/docker/es/data:/usr/share/elasticsearch/data \\\n-v /users/aafall/documents/docker/es/plugins:/usr/share/elasticsearch/plugins \\\nelasticsearch:7.17.2\n# -d 后台运行容器，返回容器id\n# -e es_java_opts="-xms64m -xmx512m" 配置内存大小\n# -e "discovery.type=single-node" 单例模式\n# -v 目录的映射\n\n\n\n# 3.2 安装 ik 分词器\n\n * 在线安装\n   \n   # 进入容器\n   docker exec -it elasticsearch /bin/bash  \n   # 安装对应版本\n   ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.2/elasticsearch-analysis-ik-7.17.2.zip\n   # https://github.com/medcl/elasticsearch-analysis-ik/releases\n   \n\n * 离线安装\n\n\n# 四、连接方式\n\n * transport ：通过 tcp 方式访问 es 。\n   \n   > 对应的库是 org.elasticsearch.client.transport 。\n\n * rest ：通过 http api 方式访问 es 。\n   \n   > 对应的库是：\n   > \n   >  * elasticsearch-rest-client + org.elasticsearch.client.rest\n   >  * elasticsearch-rest-high-level-client ，提供 high-level rest api 。从 elasticsearch 6.0.0-beta1 开始提供。\n\n我们在项目中，编写数据库操作的逻辑，使用 mybatis 或者 jpa 为主，而不使用原生的 jdbc 。那么，我们在编写 elasticsearch 操作的逻辑，也不直接使用上述的客户端，而是：\n\n * spring-data-elasticsearch ，基于 elasticsearch transport 客户端封装。\n * spring-data-jest ，基于 jest 客户端封装。\n\n虽然这两者底层使用的不同客户端，但是都基于 spring data 体系，所以项目在使用时，编写的代码是相同的。\n\n\n# 4.1 spring data jest\n\n * 引入依赖\n   \n   \x3c!-- 自动化配置 spring data jest --\x3e\n    <dependency>\n        <groupid>com.github.vanroy</groupid>\n        <artifactid>spring-boot-starter-data-jest</artifactid>\n        <version>3.2.5.release</version>\n   </dependency>\n   \n\n\n# 4.2 spring data elasticsearch',charsets:{cjk:!0},lastUpdated:"2022/04/12, 21:23:57",lastUpdatedTimestamp:1649769837e3},{title:"RabbitMQ",frontmatter:{title:"RabbitMQ",date:"2022-04-13T19:52:37.000Z",permalink:"/pages/c267a5/"},regularPath:"/02.%E6%A1%86%E6%9E%B6/03.SpringBoot/04.MQ/01.RabbitMQ.html",relativePath:"02.框架/03.SpringBoot/04.MQ/01.RabbitMQ.md",key:"v-2b9d952b",path:"/pages/c267a5/",headers:[{level:2,title:"一、什么是消息队列",slug:"一、什么是消息队列",normalizedTitle:"一、什么是消息队列",charIndex:2},{level:2,title:"二、为何使用消息队列",slug:"二、为何使用消息队列",normalizedTitle:"二、为何使用消息队列",charIndex:110},{level:2,title:"三、RabbitMQ的特点",slug:"三、rabbitmq的特点",normalizedTitle:"三、rabbitmq的特点",charIndex:205},{level:2,title:"四、RabbitMQ中的概念",slug:"四、rabbitmq中的概念",normalizedTitle:"四、rabbitmq中的概念",charIndex:1119},{level:3,title:"消息模型",slug:"消息模型",normalizedTitle:"消息模型",charIndex:1138},{level:3,title:"RabbitMQ 基本概念",slug:"rabbitmq-基本概念",normalizedTitle:"rabbitmq 基本概念",charIndex:1243},{level:3,title:"Exchange 类型",slug:"exchange-类型",normalizedTitle:"exchange 类型",charIndex:2220},{level:2,title:"五、RabbitMQ 的安装",slug:"五、rabbitmq-的安装",normalizedTitle:"五、rabbitmq 的安装",charIndex:3039}],headersStr:"一、什么是消息队列 二、为何使用消息队列 三、RabbitMQ的特点 四、RabbitMQ中的概念 消息模型 RabbitMQ 基本概念 Exchange 类型 五、RabbitMQ 的安装",content:"# 一、什么是消息队列\n\n消息：在应用之间传递的数据\n\n消息队列：是应用之间的通信方式，消息发送之后可以立即返回，由消息系统保证消息的可靠传递。消息发布者只管把消息发布到MQ中，而消息使用者只管从MQ中取数据。\n\n\n# 二、为何使用消息队列\n\n消息队列是一种应用间的异步协作机制，将一些不需要立即执行生效的操作拆分出来异步执行，提升服务器的性能。\n\n消息队列还可以用来实现：服务解耦、流量控制(消峰)\n\n\n# 三、RabbitMQ的特点\n\nRabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。\n\nAMQP ： Advanced Message Queuing Protocol，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。\n\nRabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：\n\n 1. 可靠性（Reliability） RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。\n 2. 灵活的路由（Flexible Routing） 在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。\n 3. 消息集群（Clustering） 多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。\n 4. 高可用（Highly Available Queues） 队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。\n 5. 多种协议（Multi-protocol） RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。\n 6. 多语言客户端（Many Clients） RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。\n 7. 管理界面（Management UI） RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。\n 8. 跟踪机制（Tracing） 如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。\n 9. 插件机制（Plugin System） RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。\n\n\n# 四、RabbitMQ中的概念\n\n\n# 消息模型\n\n所有 MQ 产品从模型抽象上来说都是一样的过程： 消费者（consumer）订阅某个队列。生产者（producer）创建消息，然后发布到队列（queue）中，最后将消息发送到监听的消费者。\n\n\n# RabbitMQ 基本概念\n\n上面只是最简单抽象的描述，具体到 RabbitMQ 则有更详细的概念需要解释。上面介绍过 RabbitMQ 是 AMQP 协议的一个开源实现，所以其内部实际上也是 AMQP 中的基本概念：\n\n\n\n 1.  Message 消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。\n\n 2.  Publisher 消息的生产者，也是一个向交换器发布消息的客户端应用程序。\n\n 3.  Exchange 交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。\n\n 4.  Binding 绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。\n\n 5.  Queue 消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。\n\n 6.  Connection 网络连接，比如一个TCP连接。\n\n 7.  Channel 信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内地虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。\n\n 8.  Consumer 消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。\n\n 9.  Virtual Host 虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。\n\n 10. Broker 表示消息队列服务器实体。\n\n\n# Exchange 类型\n\nExchange分发消息时根据类型的不同分发策略有区别，目前共四种类型：direct、fanout、topic、headers 。headers 匹配 AMQP 消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接看另外三种类型：\n\n 1. direct\n    \n    消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会转发“dog.puppy”，也不会转发“dog.guard”等等。它是完全匹配、单播的模式。\n    \n    \n\n 2. fanout\n    \n    每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout 类型转发消息是最快的。\n    \n    \n    \n    生产者 Publisher 发送到 Exchange 的所有消息都会路由到图中的两个 Queue，并最终被两个消费者（Consumer1与Comsumer2）消费。\n\n 3. topic\n    \n    topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样也会识别两个通配符：符号“#”和符号“*”。#匹配0个或多个单词，*匹配不多不少一个单词。\n    \n    \n\n\n# 五、RabbitMQ 的安装\n\n#从docker hub 上拉取镜像\ndocker pull rabbitmq:3-management\n#创建RabbitMQ容器\ndocker run -d --name=rabbitmq -p 5672:5672 -p 15672:15672 --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST=/  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin  rabbitmq:3-management\n\n\nRabbitMQ Management",normalizedContent:"# 一、什么是消息队列\n\n消息：在应用之间传递的数据\n\n消息队列：是应用之间的通信方式，消息发送之后可以立即返回，由消息系统保证消息的可靠传递。消息发布者只管把消息发布到mq中，而消息使用者只管从mq中取数据。\n\n\n# 二、为何使用消息队列\n\n消息队列是一种应用间的异步协作机制，将一些不需要立即执行生效的操作拆分出来异步执行，提升服务器的性能。\n\n消息队列还可以用来实现：服务解耦、流量控制(消峰)\n\n\n# 三、rabbitmq的特点\n\nrabbitmq 是一个由 erlang 语言开发的 amqp 的开源实现。\n\namqp ： advanced message queuing protocol，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。\n\nrabbitmq 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：\n\n 1. 可靠性（reliability） rabbitmq 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。\n 2. 灵活的路由（flexible routing） 在消息进入队列之前，通过 exchange 来路由消息的。对于典型的路由功能，rabbitmq 已经提供了一些内置的 exchange 来实现。针对更复杂的路由功能，可以将多个 exchange 绑定在一起，也通过插件机制实现自己的 exchange 。\n 3. 消息集群（clustering） 多个 rabbitmq 服务器可以组成一个集群，形成一个逻辑 broker 。\n 4. 高可用（highly available queues） 队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。\n 5. 多种协议（multi-protocol） rabbitmq 支持多种消息队列协议，比如 stomp、mqtt 等等。\n 6. 多语言客户端（many clients） rabbitmq 几乎支持所有常用语言，比如 java、.net、ruby 等等。\n 7. 管理界面（management ui） rabbitmq 提供了一个易用的用户界面，使得用户可以监控和管理消息 broker 的许多方面。\n 8. 跟踪机制（tracing） 如果消息异常，rabbitmq 提供了消息跟踪机制，使用者可以找出发生了什么。\n 9. 插件机制（plugin system） rabbitmq 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。\n\n\n# 四、rabbitmq中的概念\n\n\n# 消息模型\n\n所有 mq 产品从模型抽象上来说都是一样的过程： 消费者（consumer）订阅某个队列。生产者（producer）创建消息，然后发布到队列（queue）中，最后将消息发送到监听的消费者。\n\n\n# rabbitmq 基本概念\n\n上面只是最简单抽象的描述，具体到 rabbitmq 则有更详细的概念需要解释。上面介绍过 rabbitmq 是 amqp 协议的一个开源实现，所以其内部实际上也是 amqp 中的基本概念：\n\n\n\n 1.  message 消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。\n\n 2.  publisher 消息的生产者，也是一个向交换器发布消息的客户端应用程序。\n\n 3.  exchange 交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。\n\n 4.  binding 绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。\n\n 5.  queue 消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。\n\n 6.  connection 网络连接，比如一个tcp连接。\n\n 7.  channel 信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的tcp连接内地虚拟连接，amqp 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 tcp 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 tcp 连接。\n\n 8.  consumer 消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。\n\n 9.  virtual host 虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 rabbitmq 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 amqp 概念的基础，必须在连接时指定，rabbitmq 默认的 vhost 是 / 。\n\n 10. broker 表示消息队列服务器实体。\n\n\n# exchange 类型\n\nexchange分发消息时根据类型的不同分发策略有区别，目前共四种类型：direct、fanout、topic、headers 。headers 匹配 amqp 消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接看另外三种类型：\n\n 1. direct\n    \n    消息中的路由键（routing key）如果和 binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会转发“dog.puppy”，也不会转发“dog.guard”等等。它是完全匹配、单播的模式。\n    \n    \n\n 2. fanout\n    \n    每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout 类型转发消息是最快的。\n    \n    \n    \n    生产者 publisher 发送到 exchange 的所有消息都会路由到图中的两个 queue，并最终被两个消费者（consumer1与comsumer2）消费。\n\n 3. topic\n    \n    topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样也会识别两个通配符：符号“#”和符号“*”。#匹配0个或多个单词，*匹配不多不少一个单词。\n    \n    \n\n\n# 五、rabbitmq 的安装\n\n#从docker hub 上拉取镜像\ndocker pull rabbitmq:3-management\n#创建rabbitmq容器\ndocker run -d --name=rabbitmq -p 5672:5672 -p 15672:15672 --hostname myrabbit -e rabbitmq_default_vhost=/  -e rabbitmq_default_user=admin -e rabbitmq_default_pass=admin  rabbitmq:3-management\n\n\nrabbitmq management",charsets:{cjk:!0},lastUpdated:"2022/04/13, 19:55:43",lastUpdatedTimestamp:1649850943e3},{title:"资源",frontmatter:{title:"资源",date:"2020-05-12T15:10:15.000Z",permalink:"/pages/db78e2",article:!1},regularPath:"/03.%E5%B7%A5%E5%85%B7/01.%E8%B5%84%E6%BA%90.html",relativePath:"03.工具/01.资源.md",key:"v-b721a6a6",path:"/pages/db78e2/",headers:[{level:2,title:"插件推荐",slug:"插件推荐",normalizedTitle:"插件推荐",charIndex:2},{level:3,title:"更多插件...",slug:"更多插件",normalizedTitle:"更多插件...",charIndex:387},{level:2,title:"社区优秀解决方案",slug:"社区优秀解决方案",normalizedTitle:"社区优秀解决方案",charIndex:443},{level:3,title:"1. 站点信息模块",slug:"_1-站点信息模块",normalizedTitle:"1. 站点信息模块",charIndex:456},{level:3,title:"2. 私密文章功能",slug:"_2-私密文章功能",normalizedTitle:"2. 私密文章功能",charIndex:516},{level:3,title:"3. 首页大图模块",slug:"_3-首页大图模块",normalizedTitle:"3. 首页大图模块",charIndex:567},{level:2,title:"图标&配图",slug:"图标-配图",normalizedTitle:"图标&amp;配图",charIndex:null},{level:3,title:"静态图标",slug:"静态图标",normalizedTitle:"静态图标",charIndex:659},{level:3,title:"萌系图标",slug:"萌系图标",normalizedTitle:"萌系图标",charIndex:714},{level:3,title:"动态图标",slug:"动态图标",normalizedTitle:"动态图标",charIndex:752},{level:3,title:"插画",slug:"插画",normalizedTitle:"插画",charIndex:780},{level:3,title:"配图",slug:"配图",normalizedTitle:"配图",charIndex:605},{level:3,title:"Logo",slug:"logo",normalizedTitle:"logo",charIndex:827},{level:3,title:"Emoji表情",slug:"emoji表情",normalizedTitle:"emoji表情",charIndex:853},{level:2,title:"共享资源",slug:"共享资源",normalizedTitle:"共享资源",charIndex:950}],headersStr:"插件推荐 更多插件... 社区优秀解决方案 1. 站点信息模块 2. 私密文章功能 3. 首页大图模块 图标&配图 静态图标 萌系图标 动态图标 插画 配图 Logo Emoji表情 共享资源",content:'# 插件推荐\n\n * vuepress-plugin-fulltext-search 全文搜索\n\n * vuepress-plugin-thirdparty-search 可以添加第三方搜索链接的搜索框\n\n * vuepress-plugin-one-click-copy 代码块一键复制\n\n * vuepress-plugin-comment 评论区\n\n * vuepress-plugin-vssue 评论区\n\n * vuepress-plugin-flowchart 流程图\n\n * vuepress-plugin-mathjax 数学公式\n\n * vuepress-plugin-tabs 选项卡\n\n * vuepress-plugin-element-ui Element UI\n\n * 花里胡哨的插件 鼠标点击特效、背景彩带、音乐播放器等花里胡哨的插件\n\n\n# 更多插件...\n\nAwesome VuePress\n\n在npm中搜索"vuepress–plugin"\n\n\n# 社区优秀解决方案\n\n\n# 1. 站点信息模块\n\n在首页添加站点信息模块，效果：\n\n\n\n在文章页添加文章字数、阅读时间、浏览量，效果：\n\n\n\n\n# 2. 私密文章功能\n\n当大家想要「云端备份」文章到博客时，又不希望别人看到，该功能能满足你。\n\n\n# 3. 首页大图模块\n\n喜欢首页大图模式的朋友可以参考此教程。\n\n\n# 图标&配图\n\n说明：以下图标非主题内置，你可以选择喜欢的图标右键保存或到图标库下载。更多图标：阿里图标库\n\n\n# 静态图标\n\n编程   服务器   机器学习   计算机网络   面向对象   软件开发   数据结构\n\n\n# 萌系图标\n\n * 猫咪系列\n   \n * 数码宝贝\n * 水果系列\n\n\n# 动态图标\n\n猫1   猫2   猫3   猫4\n\n\n# 插画\n\n免费插画\n2D/3D/手绘插画\n阿里插画库\n\n\n\n# 配图\n\n可画-文章配图\n\n\n# Logo\n\nlogo生成1\nlogo生成2\n\n\n# Emoji表情\n\nEmoji百科\n\n小技巧\n\n在任意输入框快速打开emoji表情方法：\nWindows系统下按Win + .\nMac系统下按Control + Command + 空格\n\n\n# 共享资源\n\n如果您有不错的资源，欢迎在 资源分享区 留言。',normalizedContent:'# 插件推荐\n\n * vuepress-plugin-fulltext-search 全文搜索\n\n * vuepress-plugin-thirdparty-search 可以添加第三方搜索链接的搜索框\n\n * vuepress-plugin-one-click-copy 代码块一键复制\n\n * vuepress-plugin-comment 评论区\n\n * vuepress-plugin-vssue 评论区\n\n * vuepress-plugin-flowchart 流程图\n\n * vuepress-plugin-mathjax 数学公式\n\n * vuepress-plugin-tabs 选项卡\n\n * vuepress-plugin-element-ui element ui\n\n * 花里胡哨的插件 鼠标点击特效、背景彩带、音乐播放器等花里胡哨的插件\n\n\n# 更多插件...\n\nawesome vuepress\n\n在npm中搜索"vuepress–plugin"\n\n\n# 社区优秀解决方案\n\n\n# 1. 站点信息模块\n\n在首页添加站点信息模块，效果：\n\n\n\n在文章页添加文章字数、阅读时间、浏览量，效果：\n\n\n\n\n# 2. 私密文章功能\n\n当大家想要「云端备份」文章到博客时，又不希望别人看到，该功能能满足你。\n\n\n# 3. 首页大图模块\n\n喜欢首页大图模式的朋友可以参考此教程。\n\n\n# 图标&配图\n\n说明：以下图标非主题内置，你可以选择喜欢的图标右键保存或到图标库下载。更多图标：阿里图标库\n\n\n# 静态图标\n\n编程   服务器   机器学习   计算机网络   面向对象   软件开发   数据结构\n\n\n# 萌系图标\n\n * 猫咪系列\n   \n * 数码宝贝\n * 水果系列\n\n\n# 动态图标\n\n猫1   猫2   猫3   猫4\n\n\n# 插画\n\n免费插画\n2d/3d/手绘插画\n阿里插画库\n\n\n\n# 配图\n\n可画-文章配图\n\n\n# logo\n\nlogo生成1\nlogo生成2\n\n\n# emoji表情\n\nemoji百科\n\n小技巧\n\n在任意输入框快速打开emoji表情方法：\nwindows系统下按win + .\nmac系统下按control + command + 空格\n\n\n# 共享资源\n\n如果您有不错的资源，欢迎在 资源分享区 留言。',charsets:{cjk:!0},lastUpdated:"2022/04/05, 22:07:38",lastUpdatedTimestamp:1649167658e3},{title:"案例",frontmatter:{title:"案例",date:"2020-05-14T11:39:45.000Z",permalink:"/pages/5d571c",article:!1},regularPath:"/04.%E9%A1%B9%E7%9B%AE/01.%E6%A1%88%E4%BE%8B.html",relativePath:"04.项目/01.案例.md",key:"v-065d30b4",path:"/pages/5d571c/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 22:07:38",lastUpdatedTimestamp:1649167658e3},{title:"问答",frontmatter:{title:"问答",date:"2020-05-25T12:01:52.000Z",permalink:"/pages/9cc27d",article:!1},regularPath:"/05.%E4%BA%91/01.%E9%97%AE%E7%AD%94.html",relativePath:"05.云/01.问答.md",key:"v-669128ba",path:"/pages/9cc27d/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 22:07:38",lastUpdatedTimestamp:1649167658e3},{title:"支持这个项目",frontmatter:{title:"支持这个项目",date:"2020-05-12T15:09:57.000Z",permalink:"/pages/1b12ed",sidebar:!1,article:!1},regularPath:"/06.%E4%B9%A6%E7%B1%8D/01.%E6%94%AF%E6%8C%81.html",relativePath:"06.书籍/01.支持.md",key:"v-02cf1748",path:"/pages/1b12ed/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/04/05, 22:07:38",lastUpdatedTimestamp:1649167658e3},{title:"Home",frontmatter:{home:!0,heroImage:"https://cdn.jsdelivr.net/gh/TitoniPine/Images@main/uPic/cat2.png",heroText:"梅花香自苦寒来",tagline:"🚀记录知识",actionText:"开始阅读 →",actionLink:"/pages/52d5c3/",bannerBg:"none",postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-19e87a0e",path:"/",headersStr:null,content:"\n\n\n\n\n\n\n",normalizedContent:"\n\n\n\n\n\n\n",charsets:{},lastUpdated:"2022/04/05, 22:07:38",lastUpdatedTimestamp:1649167658e3},{title:"博客文章",frontmatter:{archivesPage:!0,title:"博客文章",permalink:"/blog/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-332e2ff5",path:"/blog/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2020/05/29, 16:33:54",lastUpdatedTimestamp:1590741234e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"基础",link:"/pages/52d5c3/",items:[]},{text:"框架",link:"/pages/ce6c78/",items:[]},{text:"工具",link:"/pages/db78e2/"},{text:"项目",link:"/pages/5d571c/"},{text:"☁️",link:"/pages/9cc27d/"},{text:"书籍",link:"/pages/1b12ed/"}],sidebarDepth:2,logo:"https://cdn.jsdelivr.net/gh/TitoniPine/Images@main/uPic/cat1.png",repo:"titonipine",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/01.基础/":[{title:"基础知识",collapsable:!1,children:[["01.基础知识/01.基础.md","基础面试题","/pages/52d5c3"],["01.基础知识/04.JVM.md","JVM","/pages/649cb6/"]]},{title:"并发",collapsable:!1,children:[]},{title:"数据库",collapsable:!1,children:[["03.数据库/01.MySQL.md","MySQL","/pages/a99400/"]]}],catalogue:{},"/02.框架/":[{title:"Spring",collapsable:!1,children:[{title:"基础",collapsable:!1,children:[["01.Spring/01.基础/01.Spring.md","Spring","/pages/5aa973/"]]},{title:"安全框架",collapsable:!1,children:[["01.Spring/10.安全框架/01.JWT.md","JWT","/pages/ce6c78/"]]}]},{title:"Mybatis",collapsable:!1,children:[]},{title:"SpringBoot",collapsable:!1,children:[{title:"web",collapsable:!1,children:[]},{title:"非关系型数据库",collapsable:!1,children:[["03.SpringBoot/03.非关系型数据库/01.Redis.md","Redis","/pages/9a6634/"],["03.SpringBoot/03.非关系型数据库/02.Elasticsearch.md","Elasticsearch","/pages/0a0365/"]]},{title:"MQ",collapsable:!1,children:[["03.SpringBoot/04.MQ/01.RabbitMQ.md","RabbitMQ","/pages/c267a5/"]]}]}],"/03.工具/":[["01.资源.md","资源","/pages/db78e2"]],"/04.项目/":[["01.案例.md","案例","/pages/5d571c"]],"/05.云/":[["01.问答.md","问答","/pages/9cc27d"]],"/06.书籍/":[["01.支持.md","支持这个项目","/pages/1b12ed"]]},updateBar:{showToArticle:!1},category:!1,tag:!1,author:{name:"Plum Blossom",href:"https://github.com/titonipine"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:hyt10101025@163.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/titonipine"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/"}]},footer:{createYear:2019,copyrightInfo:"Plum Blossom | MIT License"},htmlModules:{pageB:'\n  <div class="wwads-cn wwads-horizontal pageB" data-id="136" style="width:100%;max-height:80px;min-height:auto;"></div>\n  <style>\n    .pageB img{width:80px!important;}\n    .wwads-horizontal .wwads-text, .wwads-content .wwads-text{line-height:1;}\n  </style>\n  ',windowRB:'\n    <div class="wwads-cn wwads-vertical windowRB" data-id="136" style="max-width:160px;\n    min-width: auto;min-height:auto;"></div>\n    <style>\n      .windowRB{ padding: 0;}\n      .windowRB .wwads-img{margin-top: 10px;}\n      .windowRB .wwads-content{margin: 0 10px 10px 10px;}\n      .custom-html-window-rb .close-but{\n        display: none;\n      }\n    </style>\n  '}}},ll=(t(366),t(151),t(207),t(138),t(217)),cl=t(218),ul=(t(372),t(232),t(42));var pl={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,r=e.article,a=e.home;return!(t||!1===r||!0===a)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(ul.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(ul.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(ul.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},r=function(r,a){var i=n[r].frontmatter,o=i.categories,s=i.tags;"array"===Object(ul.n)(o)&&o.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[r]))})),"array"===Object(ul.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[r]))}))},a=0,i=n.length;a<i;a++)r(a);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var r in n.categories)e.push({key:r,length:n.categories[r].length});for(var a in n.tags)t.push({key:a,length:n.tags[a].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Ra.component(ll.default),Ra.component(cl.default);function dl(n){return n.toString().padStart(2,"0")}t(376);Ra.component("Badge",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,489))})),Ra.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,217))})),Ra.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,218))}));t(377);var fl=[{},function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,r=e.date,a=e.author;"string"==typeof r&&"Z"===r.charAt(r.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(dl(n.getUTCMonth()+1),"-").concat(dl(n.getUTCDate())," ").concat(dl(n.getUTCHours()),":").concat(dl(n.getUTCMinutes()),":").concat(dl(n.getUTCSeconds()))}(r)),a?n.author=a:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(pl)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{}],hl=[];t(210);function vl(n,e){return(vl=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}t(211),t(212);function ml(n){return(ml=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function gl(n,e){if(e&&("object"===To(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function bl(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=ml(n);if(e){var a=ml(this).constructor;t=Reflect.construct(r,arguments,a)}else t=r.apply(this,arguments);return gl(this,t)}}var yl=function(n){!function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&vl(n,e)}(t,n);var e=bl(t);function t(){return cs(this,t),e.apply(this,arguments)}return ps(t)}(function(){function n(){cs(this,n),this.store=new Ra({data:{state:{}}})}return ps(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){Ra.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(yl.prototype,{getPageAsyncComponent:Fo,getLayoutAsyncComponent:qo,getAsyncComponent:Uo,getVueComponent:Ho});var xl={install:function(n){var e=new yl;n.$vuepress=e,n.prototype.$vuepress=e}};function _l(n){n.beforeEach((function(e,t,r){if(wl(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var a=e.path.replace(/\/$/,"")+".html";wl(n,a)?r(a):r()}else r();else{var i=e.path+"/",o=e.path+".html";wl(n,o)?r(o):wl(n,i)?r(i):r()}}))}function wl(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var kl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Go("pageKey",e),Ra.component(e)||Ra.component(e,Fo(e)),Ra.component(e)?n(e):n("")}},Sl={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},jl={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Tl=(t(378),t(379),Object(al.a)(jl,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function El(){return(El=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,a,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:sl.routerBase||sl.base,_l(r=new So({base:t,mode:"history",fallback:!1,routes:ol,scrollBehavior:function(n,e,t){return t||(n.hash?!Ra.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),a={},n.prev=4,n.next=7,Promise.all(fl.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:Ra,options:a,router:r,siteData:sl,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return i=new Ra(Object.assign(a,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},hl.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:i,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}Ra.config.productionTip=!1,Ra.use(So),Ra.use(xl),Ra.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ra;jo(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),a=new r,i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),o={};return Object.keys(i).reduce((function(n,e){return e.startsWith("$")&&(n[e]=i[e].get),n}),o),{computed:o}}((function(n){return function(){function e(){cs(this,e)}return ps(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var a in r)"/"===a?e=r[a]:0===this.$page.path.indexOf(a)&&(n=r[a]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),sl)),Ra.component("Content",kl),Ra.component("ContentSlotsDistributor",Sl),Ra.component("OutboundLink",Tl),Ra.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),Ra.component("Layout",qo("Layout")),Ra.component("NotFound",qo("NotFound")),Ra.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.2",hash:"7a3aeb1"},function(n){return El.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);