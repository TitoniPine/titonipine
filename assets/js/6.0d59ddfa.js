(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{475:function(v,_,e){"use strict";e.r(_);var a=e(29),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("ol",[e("li",[e("h3",{attrs:{id:"java-语言的特点-如果你简历上有提到-c-可能还会问你-java-和-c-的区别-。【⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-语言的特点-如果你简历上有提到-c-可能还会问你-java-和-c-的区别-。【⭐⭐】"}},[v._v("#")]),v._v(" Java 语言的特点（如果你简历上有提到 C++ 可能还会问你 Java 和 C++ 的区别）。【⭐⭐】")]),v._v(" "),e("ul",[e("li",[v._v("面向对象（封装，继承，多态）；")]),v._v(" "),e("li",[v._v("平台无关性（ Java 虚拟机实现平台无关性）；")]),v._v(" "),e("li",[v._v("支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；")]),v._v(" "),e("li",[v._v("可靠性；")]),v._v(" "),e("li",[v._v("安全性；")]),v._v(" "),e("li",[v._v("支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；")]),v._v(" "),e("li",[v._v("编译与解释并存；")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"比较-jvm-和-jdk-以及-jre-。【⭐⭐⭐】非常非常基础的一个问题-学了-java-之后还不知这个问题如何回答的小伙伴自觉去面壁吧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较-jvm-和-jdk-以及-jre-。【⭐⭐⭐】非常非常基础的一个问题-学了-java-之后还不知这个问题如何回答的小伙伴自觉去面壁吧"}},[v._v("#")]),v._v(" 比较 JVM 和 JDK 以及 JRE 。【⭐⭐⭐】非常非常基础的一个问题！学了 Java 之后还不知这个问题如何回答的小伙伴自觉去面壁吧！")]),v._v(" "),e("ul",[e("li",[v._v("JVM：是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java\n语言“一次编译，随处可以运行”的关键所在。")]),v._v(" "),e("li",[v._v("JDK：它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。")]),v._v(" "),e("li",[v._v("JRE：Java的运行时环境，它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"为什么说-java-语言-解释与编译并存-。【⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么说-java-语言-解释与编译并存-。【⭐⭐】"}},[v._v("#")]),v._v(" 为什么说 Java 语言“解释与编译并存”。【⭐⭐】")]),v._v(" "),e("p",[v._v("我们可以将高级编程语言按照程序的执行方式分为两种：")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("编译型")]),v._v(" ："),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[v._v("编译型语言"),e("OutboundLink")],1),v._v("\n会通过"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[v._v("编译器"),e("OutboundLink")],1),v._v("将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有\nC、C++、Go、Rust 等等。")]),v._v(" "),e("li",[e("strong",[v._v("解释型")]),v._v("\n："),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[v._v("解释型语言"),e("OutboundLink")],1),v._v("会通过"),e("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[v._v("解释器"),e("OutboundLink")],1),v._v("一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有\nPython、JavaScript、PHP 等等。")])]),v._v(" "),e("p",[v._v("这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（"),e("code",[v._v(".class")]),v._v(" 文件），这种字节码必须由 Java\n解释器来解释执行。")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"java-基本类型有哪几种-各占多少位-【⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-基本类型有哪几种-各占多少位-【⭐⭐】"}},[v._v("#")]),v._v(" Java 基本类型有哪几种，各占多少位？【⭐⭐】")]),v._v(" "),e("p",[v._v("| 基本数据类型         | 占用字节 | 默认值  | 范围            | 包装类    |\n| -------------------- | -------- | ------- | --------------- | --------- |\n| byte(字节型)         | 1        | 0       | -2^7 ~ 2^7-1    | Byte      |\n| short(短整型)        | 2        | 0       | -2^15 ~ 2^15-1  | Short     |\n| int(整型)            | 4        | 0       | -2^31 ~ 2^31-1  | Integer   |\n| long(长整型)         | 8        | 0L      | -2^63 ~ 2^63-1  | Long      |\n| float(浮点型)        | 4        | 0.0f    |                 | Float     |\n| double(双精度浮点型) | 8        | 0.0d    |                 | Double    |\n| char(字符类型)       | 2        | 'u0000' | \\u0000 ~ \\uffff | Character |\n| boolean(布尔类型)    | 1        | false   | true/false      |           |")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"java-泛型-类型擦除。【⭐⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-泛型-类型擦除。【⭐⭐⭐】"}},[v._v("#")]),v._v(" Java 泛型，类型擦除。【⭐⭐⭐】")]),v._v(" "),e("p",[v._v("泛型：泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的"),e("a",{attrs:{href:"https://baike.baidu.com/item/%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[v._v("类型"),e("OutboundLink")],1),v._v("，在"),e("a",{attrs:{href:"https://baike.baidu.com/item/%E5%AE%9E%E4%BE%8B%E5%8C%96",target:"_blank",rel:"noopener noreferrer"}},[v._v("实例化"),e("OutboundLink")],1),v._v("时作为参数指明这些类型。")]),v._v(" "),e("p",[v._v("Java 的泛型是伪泛型，这是因为 Java 在运行期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。")]),v._v(" "),e("p",[v._v("泛型的优点：")]),v._v(" "),e("ul",[e("li",[e("p",[e("strong",[v._v("编译时的强类型检查")])]),v._v(" "),e("p",[v._v("泛型要求在声明时指定实际数据类型，Java 编译器在编译时会对泛型代码做强类型检查，并在代码违反类型安全时发出告警。早发现，早治理，把隐患扼杀于摇篮，在编译时发现并修复错误所付出的代价远比在运行时小。")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("避免了类型转换")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("泛型编程可以实现通用算法")])])])]),v._v(" "),e("p",[v._v("类型擦除：Java 语言引入泛型是为了在编译时提供更严格的类型检查，并支持泛型编程。不同于 C++ 的模板机制，"),e("strong",[v._v("Java 泛型是使用类型擦除来实现的，使用泛型时，任何具体的类型信息都被擦除了")]),v._v("。")]),v._v(" "),e("p",[v._v("那么，类型擦除做了什么呢？它做了以下工作：")]),v._v(" "),e("ul",[e("li",[v._v("把泛型中的所有类型参数替换为 Object，如果指定类型边界，则使用类型边界来替换。因此，生成的字节码仅包含普通的类，接口和方法。")]),v._v(" "),e("li",[v._v("擦除出现的类型声明，即去掉 "),e("code",[v._v("<>")]),v._v(" 的内容。比如 "),e("code",[v._v("T get()")]),v._v(" 方法声明就变成了 "),e("code",[v._v("Object get()")]),v._v(" ；"),e("code",[v._v("List<String>")]),v._v(" 就变成了 "),e("code",[v._v("List")]),v._v("。如有必要，插入类型转换以保持类型安全。")]),v._v(" "),e("li",[v._v("生成桥接方法以保留扩展泛型类型中的多态性。类型擦除确保不为参数化类型创建新类；因此，泛型不会产生运行时开销")])]),v._v(" "),e("p",[v._v("类型通配符：")]),v._v(" "),e("ul",[e("li",[v._v("extend 上界通配符：将未知类型限制为该类型的特定类型或其子类。")]),v._v(" "),e("li",[v._v("super 下界通配符：将未知类型限制为该类型的特定类型或超类类型。")])]),v._v(" "),e("p",[e("strong",[v._v("常用的通配符为： T，E，K，V，？")])]),v._v(" "),e("ul",[e("li",[v._v("？ 表示不确定的 Java 类型")]),v._v(" "),e("li",[v._v("T (type) 表示具体的一个 Java 类型")]),v._v(" "),e("li",[v._v("K V (key value) 分别代表 Java 键值中的 Key Value")]),v._v(" "),e("li",[v._v("E (element) 代表 Element")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"和-equals-的区别。【⭐⭐⭐】-这个问题在-2018-年之前几乎是面试必问的问题-但是现在大厂以及比较少问了-现在小厂中厂问的多。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和-equals-的区别。【⭐⭐⭐】-这个问题在-2018-年之前几乎是面试必问的问题-但是现在大厂以及比较少问了-现在小厂中厂问的多。"}},[v._v("#")]),v._v(" "),e("code",[v._v("==")]),v._v(" 和 "),e("code",[v._v("equals()")]),v._v(" 的区别。【⭐⭐⭐】：这个问题在 2018 年之前几乎是面试必问的问题，但是现在大厂以及比较少问了，现在小厂中厂问的多。")]),v._v(" "),e("p",[e("strong",[e("code",[v._v("==")])]),v._v(" 对于基本类型和引用类型的作用效果是不同的：")]),v._v(" "),e("ul",[e("li",[v._v("对于基本数据类型来说，"),e("code",[v._v("==")]),v._v(" 比较的是值。")]),v._v(" "),e("li",[v._v("对于引用数据类型来说，"),e("code",[v._v("==")]),v._v(" 比较的是对象的内存地址。")])]),v._v(" "),e("blockquote",[e("p",[v._v("因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。")])]),v._v(" "),e("p",[e("strong",[e("code",[v._v("equals()")])]),v._v(" 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。"),e("code",[v._v("equals()")]),v._v("方法存在于"),e("code",[v._v("Object")]),v._v("类中，而"),e("code",[v._v("Object")]),v._v("类是所有类的直接或间接父类，因此所有的类都有"),e("code",[v._v("equals()")]),v._v("方法。")]),v._v(" "),e("p",[e("code",[v._v("equals()")]),v._v(" 方法存在两种使用情况：")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("类没有重写 "),e("code",[v._v("equals()")]),v._v("方法")]),v._v(" ：通过"),e("code",[v._v("equals()")]),v._v("比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 "),e("code",[v._v("Object")]),v._v("类"),e("code",[v._v("equals()")]),v._v("方法。")]),v._v(" "),e("li",[e("strong",[v._v("类重写了 "),e("code",[v._v("equals()")]),v._v("方法")]),v._v(" ：一般我们都重写 "),e("code",[v._v("equals()")]),v._v("方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"hashcode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashcode"}},[v._v("#")]),v._v(" **"),e("code",[v._v("hashCode()")])]),v._v(" "),e("p",[v._v("和 "),e("code",[v._v("equals()")]),v._v("** 【⭐⭐⭐⭐】：这个问题经常问，面试官经常问为什么重写 "),e("code",[v._v("equals()")]),v._v(" 时要重写 "),e("code",[v._v("hashCode()")]),v._v(" 方法？另外，这个问题经常结合着 "),e("code",[v._v("HashSet")]),v._v(" 问。")]),v._v(" "),e("p",[e("code",[v._v("hashCode()")]),v._v(" 的作用是获取哈希码（"),e("code",[v._v("int")]),v._v(" 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。")]),v._v(" "),e("p",[e("code",[v._v("hashCode()")]),v._v("定义在 JDK 的 "),e("code",[v._v("Object")]),v._v(" 类中，这就意味着 Java 中的任何类都包含有 "),e("code",[v._v("hashCode()")]),v._v(" 函数。另外需要注意的是： "),e("code",[v._v("Object")]),v._v(" 的 "),e("code",[v._v("hashCode()")]),v._v(" 方法是本地方法，也就是用\nC 语言或 C++ 实现的，该方法通常用来将对象的内存地址转换为整数之后返回。")]),v._v(" "),e("p",[v._v("其实， "),e("code",[v._v("hashCode()")]),v._v(" 和 "),e("code",[v._v("equals()")]),v._v("都是用于比较两个对象是否相等。")]),v._v(" "),e("p",[e("strong",[v._v("那为什么 JDK 还要同时提供这两个方法呢？")])]),v._v(" "),e("p",[v._v("这是因为在一些容器（比如 "),e("code",[v._v("HashMap")]),v._v("、"),e("code",[v._v("HashSet")]),v._v("）中，有了 "),e("code",[v._v("hashCode()")]),v._v(" 之后，判断元素是否在对应容器中的效率会更高（参考添加元素进"),e("code",[v._v("HastSet")]),v._v("的过程）！")]),v._v(" "),e("p",[v._v("我们在前面也提到了添加元素进"),e("code",[v._v("HastSet")]),v._v("的过程，如果 "),e("code",[v._v("HashSet")]),v._v(" 在对比的时候，同样的 "),e("code",[v._v("hashCode")]),v._v(" 有多个对象，它会继续使用 "),e("code",[v._v("equals()")]),v._v(" 来判断是否真的相同。也就是说 "),e("code",[v._v("hashCode")]),v._v("\n帮助我们大大缩小了查找成本。")]),v._v(" "),e("p",[e("strong",[v._v("那为什么不只提供 "),e("code",[v._v("hashCode()")]),v._v(" 方法呢？")])]),v._v(" "),e("p",[v._v("这是因为两个对象的"),e("code",[v._v("hashCode")]),v._v(" 值相等并不代表两个对象就相等。")]),v._v(" "),e("p",[e("strong",[v._v("那为什么两个对象有相同的 "),e("code",[v._v("hashCode")]),v._v(" 值，它们也不一定是相等的？")])]),v._v(" "),e("p",[v._v("因为 "),e("code",[v._v("hashCode()")]),v._v(" 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓哈希碰撞也就是指的是不同的对象得到相同的 "),e("code",[v._v("hashCode")]),v._v(" )。")]),v._v(" "),e("p",[v._v("总结下来就是 ：")]),v._v(" "),e("ul",[e("li",[v._v("如果两个对象的"),e("code",[v._v("hashCode")]),v._v(" 值相等，那这两个对象不一定相等（哈希碰撞）。")]),v._v(" "),e("li",[v._v("如果两个对象的"),e("code",[v._v("hashCode")]),v._v(" 值相等并且"),e("code",[v._v("equals()")]),v._v("方法也返回 "),e("code",[v._v("true")]),v._v("，我们才认为这两个对象相等。")]),v._v(" "),e("li",[v._v("如果两个对象的"),e("code",[v._v("hashCode")]),v._v(" 值不相等，我们就可以直接认为这两个对象不相等。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"重载和重写的区别。-【⭐⭐⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别。-【⭐⭐⭐⭐】"}},[v._v("#")]),v._v(" "),e("strong",[v._v("重载和重写的区别。")]),v._v(" 【⭐⭐⭐⭐】")]),v._v(" "),e("p",[v._v("重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理")]),v._v(" "),e("p",[v._v("重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法")]),v._v(" "),e("p",[v._v("重载：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。")]),v._v(" "),e("p",[v._v("重写：重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。"),e("strong",[v._v("重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。")])]),v._v(" "),e("p",[v._v("| 区别点     | 重载方法 | 重写方法                                                     |\n| ---------- | -------- | ------------------------------------------------------------ |\n| 发生范围   | 同一个类 | 子类                                                         |\n| 参数列表   | 必须修改 | 一定不能修改                                                 |\n| 返回类型   | 可修改   | 子类方法返回值类型应比父类方法返回值类型更小或相等           |\n| 异常       | 可修改   | 子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等； |\n| 访问修饰符 | 可修改   | 一定不能做更严格的限制（可以降低限制）                       |\n| 发生阶段   | 编译期   | 运行期                                                       |")]),v._v(" "),e("p",[v._v("⭐️ 关于 "),e("strong",[v._v("重写的返回值类型")]),v._v(" 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"深拷贝和浅拷贝-https-developer-aliyun-com-article-617684-text-关于java的深拷贝和浅拷贝-简单来说就是创建一个和已知对象一模一样的对象。-可能日常编码过程中用的不多-但是这是一个面试经常会问的问题-而且了解深拷贝和浅拷贝的原理-对于java中的所谓值传递或者引用传递将会有更深的理解。-1、创建对象的5种方式-。【⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝-https-developer-aliyun-com-article-617684-text-关于java的深拷贝和浅拷贝-简单来说就是创建一个和已知对象一模一样的对象。-可能日常编码过程中用的不多-但是这是一个面试经常会问的问题-而且了解深拷贝和浅拷贝的原理-对于java中的所谓值传递或者引用传递将会有更深的理解。-1、创建对象的5种方式-。【⭐】"}},[v._v("#")]),v._v(" [深拷贝和浅拷贝](https://developer.aliyun.com/article/617684#:~:text=关于Java的深拷贝和浅拷贝，简单来说就是创建一个和已知对象一模一样的对象。,可能日常编码过程中用的不多，但是这是一个面试经常会问的问题，而且了解深拷贝和浅拷贝的原理，对于Java中的所谓值传递或者引用传递将会有更深的理解。 1、创建对象的5种方式)。【⭐】")]),v._v(" "),e("p",[e("strong",[v._v("浅拷贝：创建一个新对象，然后将当前对象的非静态字段复制到该新对象，如果字段是值类型的，那么对该字段执行复制；如果该字段是引用类型的话，则复制引用但不复制引用的对象。因此，原始对象及其副本引用同一个对象。")])]),v._v(" "),e("p",[e("strong",[v._v("深拷贝：创建一个新对象，然后将当前对象的非静态字段复制到该新对象，无论该字段是值类型的还是引用类型，都复制独立的一份。当你修改其中一个对象的任何内容时，都不会影响另一个对象的内容。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"面向对象和面向过程的区别。【⭐⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程的区别。【⭐⭐⭐】"}},[v._v("#")]),v._v(" 面向对象和面向过程的区别。【⭐⭐⭐】")]),v._v(" "),e("p",[v._v("两者的主要区别在于解决问题的方式不同：")]),v._v(" "),e("ul",[e("li",[v._v("面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。")]),v._v(" "),e("li",[v._v("面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。")])]),v._v(" "),e("p",[v._v("另外，面向对象开发的程序一般更易维护、易复用、易扩展。")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"成员变量与局部变量的区别。【⭐⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员变量与局部变量的区别。【⭐⭐⭐】"}},[v._v("#")]),v._v(" 成员变量与局部变量的区别。【⭐⭐⭐】")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("语法形式")]),v._v(" ：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 "),e("code",[v._v("public")]),v._v(","),e("code",[v._v("private")]),v._v(","),e("code",[v._v("static")]),v._v("\n等修饰符所修饰，而局部变量不能被访问控制修饰符及 "),e("code",[v._v("static")]),v._v(" 所修饰；但是，成员变量和局部变量都能被 "),e("code",[v._v("final")]),v._v(" 所修饰。")]),v._v(" "),e("li",[e("strong",[v._v("存储方式")]),v._v(" ：从变量在内存中的存储方式来看,如果成员变量是使用 "),e("code",[v._v("static")]),v._v(" 修饰的，那么这个成员变量是属于类的，如果没有使用 "),e("code",[v._v("static")]),v._v("\n修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。")]),v._v(" "),e("li",[e("strong",[v._v("生存时间")]),v._v(" ：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。")]),v._v(" "),e("li",[e("strong",[v._v("默认值")]),v._v(" ：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 "),e("code",[v._v("final")]),v._v(" 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】"}},[v._v("#")]),v._v(" 面向对象三大特性是什么。并解释这三大特性。【⭐⭐⭐⭐】")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("封装：封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。")])]),v._v(" "),e("li",[e("p",[v._v("继承")]),v._v(" "),e("p",[v._v("继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。")]),v._v(" "),e("p",[v._v("通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。")]),v._v(" "),e("p",[e("strong",[v._v("关于继承如下 3 点请记住：")])]),v._v(" "),e("ol",[e("li",[v._v("子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，"),e("strong",[v._v("只是拥有")]),v._v("。")]),v._v(" "),e("li",[v._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),v._v(" "),e("li",[v._v("子类可以用自己的方式实现父类的方法。（以后介绍）。")])])]),v._v(" "),e("li",[e("p",[v._v("多态")]),v._v(" "),e("p",[v._v("多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。")]),v._v(" "),e("p",[e("strong",[v._v("多态的特点:")])]),v._v(" "),e("ul",[e("li",[v._v("对象类型和引用类型之间具有继承（类）/实现（接口）的关系；")]),v._v(" "),e("li",[v._v("引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；")]),v._v(" "),e("li",[v._v("多态不能调用“只在子类存在但在父类不存在”的方法；")]),v._v(" "),e("li",[v._v("如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。")])])])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"string、stringbuffer-和-stringbuilder-的区别。-【⭐⭐⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer-和-stringbuilder-的区别。-【⭐⭐⭐⭐】"}},[v._v("#")]),v._v(" "),e("strong",[e("code",[v._v("String")]),v._v("、"),e("code",[v._v("StringBuffer")]),v._v(" 和 "),e("code",[v._v("StringBuilder")]),v._v(" 的区别。")]),v._v(" 【⭐⭐⭐⭐】")]),v._v(" "),e("p",[e("strong",[v._v("可变性")])]),v._v(" "),e("p",[v._v("在 Java 9 之后，"),e("code",[v._v("String")]),v._v(" 、"),e("code",[v._v("StringBuilder")]),v._v(" 与 "),e("code",[v._v("StringBuffer")]),v._v(" 的实现改用 byte 数组存储字符串。之前用字符数组来存储字符串")]),v._v(" "),e("p",[e("code",[v._v("String")]),v._v(" 真正不可变有下面几点原因：")]),v._v(" "),e("ol",[e("li",[v._v("保存字符串的数组被 "),e("code",[v._v("final")]),v._v(" 修饰且为私有的，并且"),e("code",[v._v("String")]),v._v(" 类没有提供/暴露修改这个字符串的方法。")]),v._v(" "),e("li",[e("code",[v._v("String")]),v._v(" 类被 "),e("code",[v._v("final")]),v._v(" 修饰导致其不能被继承，进而避免了子类破坏 "),e("code",[v._v("String")]),v._v(" 不可变。")])]),v._v(" "),e("p",[e("code",[v._v("StringBuilder")]),v._v(" 与 "),e("code",[v._v("StringBuffer")]),v._v(" 都继承自 "),e("code",[v._v("AbstractStringBuilder")]),v._v(" 类，在 "),e("code",[v._v("AbstractStringBuilder")]),v._v(" 中也是使用字符数组保存字符串，不过没有使用 "),e("code",[v._v("final")]),v._v(" 和 "),e("code",[v._v("private")]),v._v(" 关键字修饰，最关键的是这个 "),e("code",[v._v("AbstractStringBuilder")]),v._v(" 类还提供了很多修改字符串的方法比如 "),e("code",[v._v("append")]),v._v(" 方法。")]),v._v(" "),e("p",[e("strong",[v._v("线程安全性")])]),v._v(" "),e("p",[e("code",[v._v("String")]),v._v(" 中的对象是不可变的，也就可以理解为常量，线程安全。"),e("code",[v._v("AbstractStringBuilder")]),v._v(" 是 "),e("code",[v._v("StringBuilder")]),v._v(" 与 "),e("code",[v._v("StringBuffer")]),v._v(" 的公共父类，定义了一些字符串的基本操作，如 "),e("code",[v._v("expandCapacity")]),v._v("、"),e("code",[v._v("append")]),v._v("、"),e("code",[v._v("insert")]),v._v("、"),e("code",[v._v("indexOf")]),v._v(" 等公共方法。"),e("code",[v._v("StringBuffer")]),v._v(" 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。"),e("code",[v._v("StringBuilder")]),v._v(" 并没有对方法进行加同步锁，所以是非线程安全的。")]),v._v(" "),e("p",[e("strong",[v._v("性能")])]),v._v(" "),e("p",[v._v("每次对 "),e("code",[v._v("String")]),v._v(" 类型进行改变的时候，都会生成一个新的 "),e("code",[v._v("String")]),v._v(" 对象，然后将指针指向新的 "),e("code",[v._v("String")]),v._v(" 对象。"),e("code",[v._v("StringBuffer")]),v._v(" 每次都会对 "),e("code",[v._v("StringBuffer")]),v._v(" 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 "),e("code",[v._v("StringBuilder")]),v._v(" 相比使用 "),e("code",[v._v("StringBuffer")]),v._v(" 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。")]),v._v(" "),e("p",[e("strong",[v._v("对于三者使用的总结：")])]),v._v(" "),e("ol",[e("li",[v._v("操作少量的数据: 适用 "),e("code",[v._v("String")])]),v._v(" "),e("li",[v._v("单线程操作字符串缓冲区下操作大量数据: 适用 "),e("code",[v._v("StringBuilder")])]),v._v(" "),e("li",[v._v("多线程操作字符串缓冲区下操作大量数据: 适用 "),e("code",[v._v("StringBuffer")])])]),v._v(" "),e("p",[v._v("对象引用和“+”的字符串拼接方式，实际上是通过 "),e("code",[v._v("StringBuilder")]),v._v(" 调用 "),e("code",[v._v("append()")]),v._v(" 方法实现的，拼接完成之后调用 "),e("code",[v._v("toString()")]),v._v(" 得到一个 "),e("code",[v._v("String")]),v._v(" 对象 。")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"字符串常量池的作用了解吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串常量池的作用了解吗"}},[v._v("#")]),v._v(" 字符串常量池的作用了解吗？")]),v._v(" "),e("p",[e("strong",[v._v("字符串常量池")]),v._v(" 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"java-异常。【⭐⭐⭐】-不会问的特别细。经常的问法是异常可以分为哪几种-然后你答了可检查异常和不可检查异常以后-会让你举例可检查异常有哪些-不可检查有哪些。然后-异常的代码要会写-有一场字节的面试-直接让我写一个把异常捕获了然后抛出去的代码。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-异常。【⭐⭐⭐】-不会问的特别细。经常的问法是异常可以分为哪几种-然后你答了可检查异常和不可检查异常以后-会让你举例可检查异常有哪些-不可检查有哪些。然后-异常的代码要会写-有一场字节的面试-直接让我写一个把异常捕获了然后抛出去的代码。"}},[v._v("#")]),v._v(" Java 异常。【⭐⭐⭐】：不会问的特别细。经常的问法是异常可以分为哪几种，然后你答了可检查异常和不可检查异常以后，会让你举例可检查异常有哪些，不可检查有哪些。然后，异常的代码要会写，有一场字节的面试，直接让我写一个把异常捕获了然后抛出去的代码。")]),v._v(" "),e("p",[v._v("在 Java 中，所有的异常都有一个共同的祖先 "),e("code",[v._v("java.lang")]),v._v(" 包中的 "),e("code",[v._v("Throwable")]),v._v(" 类。"),e("code",[v._v("Throwable")]),v._v(" 类有两个重要的子类:")]),v._v(" "),e("ul",[e("li",[e("strong",[e("code",[v._v("Exception")])]),v._v(" :程序本身可以处理的异常，可以通过 "),e("code",[v._v("catch")]),v._v(" 来进行捕获。"),e("code",[v._v("Exception")]),v._v(" 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked\nException (不受检查异常，可以不处理)。")]),v._v(" "),e("li",[e("strong",[e("code",[v._v("Error")])]),v._v(" ："),e("code",[v._v("Error")]),v._v(" 属于程序无法处理的错误 ，我们没办法通过 "),e("code",[v._v("catch")]),v._v(" 来进行捕获 。例如Java 虚拟机运行错误（"),e("code",[v._v("Virtual MachineError")]),v._v("\n）、虚拟机内存不够错误("),e("code",[v._v("OutOfMemoryError")]),v._v(")、类定义错误（"),e("code",[v._v("NoClassDefFoundError")]),v._v("）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。")])]),v._v(" "),e("p",[e("strong",[v._v("Checked Exception")]),v._v(" 即受检查异常，Java 代码在编译过程中，如果受检查异常没有被 "),e("code",[v._v("catch")]),v._v("/"),e("code",[v._v("throw")]),v._v(" 处理的话，就没办法通过编译 。")]),v._v(" "),e("p",[v._v("除了"),e("code",[v._v("RuntimeException")]),v._v("及其子类以外，其他的"),e("code",[v._v("Exception")]),v._v("类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、"),e("code",[v._v("ClassNotFoundException")]),v._v(" 、"),e("code",[v._v("SQLException")]),v._v("\n...。")]),v._v(" "),e("p",[e("strong",[v._v("Unchecked Exception")]),v._v(" 即 "),e("strong",[v._v("不受检查异常")]),v._v(" ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。")]),v._v(" "),e("p",[e("code",[v._v("RuntimeException")]),v._v(" 及其子类都统称为非受检查异常，例如："),e("code",[v._v("NullPointerException")]),v._v("、"),e("code",[v._v("NumberFormatException")]),v._v("\n（字符串转换为数字）、"),e("code",[v._v("ArrayIndexOutOfBoundsException")]),v._v("（数组越界）、"),e("code",[v._v("ClassCastException")]),v._v("（类型转换错误）、"),e("code",[v._v("ArithmeticException")]),v._v("（算术错误）等。")]),v._v(" "),e("p",[v._v("常见的运行时异常。 运行时异常的概念:\n继承自RuntimeException的异常或者其子类， 编译阶段是不会出错的，它是在运行时阶段可能出现的错误， 运行时异常编译阶段可以处理也可以不处理,代码编译都能通过！！")]),v._v(" "),e("p",[v._v("1.数组索引越界异常: ArrayIndexOutOfBoundsException。 ​ 2.空指针异常 : NullPointerException。 ​ 直接输出没有问题。但是调用空指针的变量的功能就会报错！！ ​\n3.类型转换异常：ClassCastException。 ​ 4.迭代器遍历没有此元素异常：NoSuchElementException。 ​ 5.数学操作异常：ArithmeticException。 ​ 6.数字转换异常：\nNumberFormatException。")]),v._v(" "),e("h4",{attrs:{id:"throwable-类常用方法有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#throwable-类常用方法有哪些"}},[v._v("#")]),v._v(" Throwable 类常用方法有哪些？")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("String getMessage()")]),v._v(": 返回异常发生时的简要描述")]),v._v(" "),e("li",[e("code",[v._v("String toString()")]),v._v(": 返回异常发生时的详细信息")]),v._v(" "),e("li",[e("code",[v._v("String getLocalizedMessage()")]),v._v(": 返回异常对象的本地化信息。使用 "),e("code",[v._v("Throwable")]),v._v("\n的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 "),e("code",[v._v("getMessage()")]),v._v("返回的结果相同")]),v._v(" "),e("li",[e("code",[v._v("void printStackTrace()")]),v._v(": 在控制台上打印 "),e("code",[v._v("Throwable")]),v._v(" 对象封装的异常信息")])]),v._v(" "),e("h4",{attrs:{id:"try-catch-finally-如何使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally-如何使用"}},[v._v("#")]),v._v(" try-catch-finally 如何使用？")]),v._v(" "),e("ul",[e("li",[e("strong",[e("code",[v._v("try")]),v._v("块：")]),v._v(" 用于捕获异常。其后可接零个或多个 "),e("code",[v._v("catch")]),v._v(" 块，如果没有 "),e("code",[v._v("catch")]),v._v(" 块，则必须跟一个 "),e("code",[v._v("finally")]),v._v(" 块。")]),v._v(" "),e("li",[e("strong",[e("code",[v._v("catch")]),v._v("块：")]),v._v(" 用于处理 try 捕获到的异常。")]),v._v(" "),e("li",[e("strong",[e("code",[v._v("finally")]),v._v(" 块：")]),v._v(" 无论是否捕获或处理异常，"),e("code",[v._v("finally")]),v._v(" 块里的语句都会被执行。当在 "),e("code",[v._v("try")]),v._v(" 块或 "),e("code",[v._v("catch")]),v._v(" 块中遇到 "),e("code",[v._v("return")]),v._v(" 语句时，"),e("code",[v._v("finally")]),v._v(" 语句块将在方法返回之前被执行。")])]),v._v(" "),e("p",[v._v("**\n注意：不要在 finally 语句块中使用 return!** 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return\n返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。")]),v._v(" "),e("h4",{attrs:{id:"finally-中的代码一定会执行吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#finally-中的代码一定会执行吗"}},[v._v("#")]),v._v(" finally 中的代码一定会执行吗？")]),v._v(" "),e("p",[v._v("不一定的！在某些情况下，finally 中的代码不会被执行。")]),v._v(" "),e("p",[v._v("就比如说 "),e("code",[v._v("finally")]),v._v(" 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。")]),v._v(" "),e("p",[v._v("另外，在以下 2 种特殊情况下，"),e("code",[v._v("finally")]),v._v(" 块的代码也不会被执行：")]),v._v(" "),e("ol",[e("li",[v._v("程序所在的线程死亡。")]),v._v(" "),e("li",[v._v("关闭 CPU。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"序列化和反序列化【⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序列化和反序列化【⭐⭐】"}},[v._v("#")]),v._v(" 序列化和反序列化【⭐⭐】")]),v._v(" "),e("p",[v._v("如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。")]),v._v(" "),e("p",[v._v("简单来说：")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("序列化")]),v._v("： 将数据结构或对象转换成二进制字节流的过程")]),v._v(" "),e("li",[e("strong",[v._v("反序列化")]),v._v("：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程")])]),v._v(" "),e("p",[v._v("对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。")]),v._v(" "),e("h4",{attrs:{id:"java-序列化中如果有些字段不想进行序列化-怎么办"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-序列化中如果有些字段不想进行序列化-怎么办"}},[v._v("#")]),v._v(" Java 序列化中如果有些字段不想进行序列化，怎么办？")]),v._v(" "),e("p",[v._v("对于不想进行序列化的变量，使用 "),e("code",[v._v("transient")]),v._v(" 关键字修饰。")]),v._v(" "),e("p",[e("code",[v._v("transient")]),v._v(" 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 "),e("code",[v._v("transient")]),v._v(" 修饰的变量值不会被持久化和恢复。")]),v._v(" "),e("p",[v._v("关于 "),e("code",[v._v("transient")]),v._v(" 还有几点注意：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("transient")]),v._v(" 只能修饰变量，不能修饰类和方法。")]),v._v(" "),e("li",[e("code",[v._v("transient")]),v._v(" 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 "),e("code",[v._v("int")]),v._v(" 类型，那么反序列后结果就是 "),e("code",[v._v("0")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("static")]),v._v(" 变量因为不属于任何对象(Object)，所以无论有没有 "),e("code",[v._v("transient")]),v._v(" 关键字修饰，均不会被序列化。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"反射【⭐⭐】面试官可能会问你什么是反射-它的优缺点是什么-有哪些应用场景。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反射【⭐⭐】面试官可能会问你什么是反射-它的优缺点是什么-有哪些应用场景。"}},[v._v("#")]),v._v(" 反射【⭐⭐】面试官可能会问你什么是反射，它的优缺点是什么，有哪些应用场景。")]),v._v(" "),e("p",[v._v("通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。")]),v._v(" "),e("p",[v._v("反射机制优缺点")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("优点")]),v._v(" ： 可以让咱们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利")]),v._v(" "),e("li",[e("strong",[v._v("缺点")]),v._v(" ：让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"list、set、-map-的区别。【⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list、set、-map-的区别。【⭐⭐】"}},[v._v("#")]),v._v(" "),e("code",[v._v("List")]),v._v("、Set"),e("code",[v._v("、")]),v._v(" "),e("code",[v._v("Map")]),v._v(" 的区别。【⭐⭐】")]),v._v(" "),e("p",[v._v("Set系列集合：添加的元素是无序，不重复，无索引的。")]),v._v(" "),e("ul",[e("li",[v._v("HashSet:添加的元素是无序，不重复，无索引的。\n"),e("ul",[e("li",[v._v("LinkedHashSet:添加的元素是有序，不重复，无索引的。")])])]),v._v(" "),e("li",[v._v("TreeSet:不重复，无索引，按照大小默认升序排序!!")])]),v._v(" "),e("p",[v._v("List系列集合：添加的元素是有序，可重复，有索引。")]),v._v(" "),e("ul",[e("li",[v._v("ArrayList：添加的元素是有序，可重复，有索引。")]),v._v(" "),e("li",[v._v("LinkedList：添加的元素是有序，可重复，有索引。")])]),v._v(" "),e("p",[v._v("Map集合的特点： 1.Map集合的特点都是由键决定的。 2.Map集合的键是无序,不重复的，无索引的。 Map集合后面重复的键对应的元素会覆盖前面的整个元素！ 3.Map集合的值无要求。 4.Map集合的键值对都可以为null。")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"arraylist-和-linkedlist-的区别。【⭐⭐⭐⭐】-答清楚每个分别采用什么数据结构-对比相应的优点和缺点。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-linkedlist-的区别。【⭐⭐⭐⭐】-答清楚每个分别采用什么数据结构-对比相应的优点和缺点。"}},[v._v("#")]),v._v(" "),e("strong",[e("code",[v._v("ArrayList")]),v._v(" 和 "),e("code",[v._v("LinkedList")]),v._v(" 的区别。")]),v._v("【⭐⭐⭐⭐】：答清楚每个分别采用什么数据结构，对比相应的优点和缺点。")]),v._v(" "),e("p",[v._v("ArrayList:：底层基于数组存储数据的，查询快，增删慢！！")]),v._v(" "),e("p",[v._v("LinkedList：底层是基于双链表的，增删比较快，查询慢！！ LinkedList是支持双链表，定位前后的元素是非常快的，增删首尾的元素也是最快的")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"比较-hashset、linkedhashset-和-treeset-三者的异同。【⭐⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较-hashset、linkedhashset-和-treeset-三者的异同。【⭐⭐⭐】"}},[v._v("#")]),v._v(" 比较 "),e("code",[v._v("HashSet")]),v._v("、"),e("code",[v._v("LinkedHashSet")]),v._v(" 和 "),e("code",[v._v("TreeSet")]),v._v(" 三者的异同。【⭐⭐⭐】")]),v._v(" "),e("p",[v._v("如果希望元素可以重复，又有索引，查询要快用ArrayList集合。（用的最多） 如果希望元素可以重复，又有索引，增删要快要用LinkedList集合。（适合查询元素比较少的情况，经常要首尾操作元素的情况）\n如果希望增删改查都很快，但是元素不重复以及无序无索引，那么用HashSet集合。 如果希望增删改查都很快且有序，但是元素不重复以及无索引，那么用LinkedHashSet集合。")]),v._v(" "),e("h4",{attrs:{id:"treeset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[v._v("#")]),v._v(" TreeSet")]),v._v(" "),e("p",[v._v("底层基于TreeMap实现")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"hashmap-多线程操作导致死循环问题。【⭐⭐⭐】jdk-1-8-后解决了这个问题-但是还是不建议在多线程下使用-hashmap-因为多线程下使用-hashmap-还是会存在其他问题比如数据丢失。并发环境下推荐使用-concurrenthashmap-。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-多线程操作导致死循环问题。【⭐⭐⭐】jdk-1-8-后解决了这个问题-但是还是不建议在多线程下使用-hashmap-因为多线程下使用-hashmap-还是会存在其他问题比如数据丢失。并发环境下推荐使用-concurrenthashmap-。"}},[v._v("#")]),v._v(" HashMap 多线程操作导致死循环问题。【⭐⭐⭐】jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 "),e("code",[v._v("HashMap")]),v._v(",因为多线程下使用 "),e("code",[v._v("HashMap")]),v._v(" 还是会存在其他问题比如数据丢失。并发环境下推荐使用 "),e("code",[v._v("ConcurrentHashMap")]),v._v(" 。")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"hashmap-的长度为什么是-2-的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的长度为什么是-2-的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。"}},[v._v("#")]),v._v(" HashMap 的长度为什么是 2 的幂次方。【⭐⭐⭐】主要是考虑到了对运算效率的提升。")])]),v._v(" "),e("li",[e("h3",{attrs:{id:"hashmap、hashtable、以及-concurrenthashmap-的区别。【⭐⭐⭐⭐⭐】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap、hashtable、以及-concurrenthashmap-的区别。【⭐⭐⭐⭐⭐】"}},[v._v("#")]),v._v(" "),e("strong",[e("code",[v._v("HashMap")]),v._v("、"),e("code",[v._v("HashTable")]),v._v("、以及 "),e("code",[v._v("ConcurrentHashMap")]),v._v(" 的区别。")]),v._v("【⭐⭐⭐⭐⭐】")]),v._v(" "),e("ol",[e("li",[e("strong",[v._v("线程是否安全：")]),v._v(" "),e("code",[v._v("HashMap")]),v._v(" 是非线程安全的，"),e("code",[v._v("Hashtable")]),v._v(" 是线程安全的,因为 "),e("code",[v._v("Hashtable")]),v._v(" 内部的方法基本都经过"),e("code",[v._v("synchronized")]),v._v("\n修饰。（如果你要保证线程安全的话就使用 "),e("code",[v._v("ConcurrentHashMap")]),v._v(" 吧！）；")]),v._v(" "),e("li",[e("strong",[v._v("效率：")]),v._v(" 因为线程安全的问题，"),e("code",[v._v("HashMap")]),v._v(" 要比 "),e("code",[v._v("Hashtable")]),v._v(" 效率高一点。另外，"),e("code",[v._v("Hashtable")]),v._v(" 基本被淘汰，不要在代码中使用它；")]),v._v(" "),e("li",[e("strong",[v._v("对 Null key 和 Null value 的支持：")]),v._v(" "),e("code",[v._v("HashMap")]),v._v(" 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有\nnull 键和 null 值，否则会抛出 "),e("code",[v._v("NullPointerException")]),v._v("。")]),v._v(" "),e("li",[e("strong",[v._v("初始容量大小和每次扩充容量大小的不同 ：")]),v._v(" ① 创建时如果不指定容量初始值，"),e("code",[v._v("Hashtable")]),v._v(" 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。"),e("code",[v._v("HashMap")]),v._v(" 默认的初始化大小为\n16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 "),e("code",[v._v("HashMap")]),v._v(" 会将其扩充为 2 的幂次方大小（"),e("code",[v._v("HashMap")]),v._v("\n中的"),e("code",[v._v("tableSizeFor()")]),v._v("方法保证，下面给出了源代码）。也就是说 "),e("code",[v._v("HashMap")]),v._v(" 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。")]),v._v(" "),e("li",[e("strong",[v._v("底层数据结构：")]),v._v(" JDK1.8 以后的 "),e("code",[v._v("HashMap")]),v._v(" 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于\n64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。")])]),v._v(" "),e("p",[e("code",[v._v("ConcurrentHashMap")]),v._v(" 和 "),e("code",[v._v("Hashtable")]),v._v(" 的区别主要体现在实现线程安全的方式上不同。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("底层数据结构：")]),v._v(" JDK1.7 的 "),e("code",[v._v("ConcurrentHashMap")]),v._v(" 底层采用 "),e("strong",[v._v("分段的数组+链表")]),v._v(" 实现，JDK1.8 采用的数据结构跟 "),e("code",[v._v("HashMap1.8")]),v._v("\n的结构一样，数组+链表/红黑二叉树。"),e("code",[v._v("Hashtable")]),v._v(" 和 JDK1.8 之前的 "),e("code",[v._v("HashMap")]),v._v(" 的底层数据结构类似都是采用 "),e("strong",[v._v("数组+链表")]),v._v(" 的形式，数组是 HashMap\n的主体，链表则是主要为了解决哈希冲突而存在的；")]),v._v(" "),e("li",[e("strong",[v._v("实现线程安全的方式（重要）：")]),v._v(" ① "),e("strong",[v._v("在 JDK1.7 的时候，"),e("code",[v._v("ConcurrentHashMap")]),v._v("（分段锁）")]),v._v(" 对整个桶数组进行了分割分段("),e("code",[v._v("Segment")]),v._v(")\n，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。 "),e("strong",[v._v("到了 JDK1.8 的时候已经摒弃了 "),e("code",[v._v("Segment")]),v._v(" 的概念，而是直接用 "),e("code",[v._v("Node")]),v._v("\n数组+链表+红黑树的数据结构来实现，并发控制使用 "),e("code",[v._v("synchronized")]),v._v(" 和 CAS 来操作。（JDK1.6 以后 对 "),e("code",[v._v("synchronized")]),v._v(" 锁做了很多优化）")]),v._v("\n整个看起来就像是优化过且线程安全的 "),e("code",[v._v("HashMap")]),v._v("，虽然在 JDK1.8 中还能看到 "),e("code",[v._v("Segment")]),v._v(" 的数据结构，但是已经简化了属性，只是为了兼容旧版本；② "),e("strong",[e("code",[v._v("Hashtable")]),v._v("(同一把锁)")]),v._v(" :\n使用 "),e("code",[v._v("synchronized")]),v._v(" 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用\nget，竞争会越来越激烈效率越低。")])])]),v._v(" "),e("li",[e("h3",{attrs:{id:"queue-与-deque-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queue-与-deque-的区别"}},[v._v("#")]),v._v(" Queue 与 Deque 的区别")]),v._v(" "),e("p",[e("code",[v._v("Queue")]),v._v(" 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 "),e("strong",[v._v("先进先出（FIFO）")]),v._v(" 规则。")]),v._v(" "),e("p",[e("code",[v._v("Queue")]),v._v(" 扩展了 "),e("code",[v._v("Collection")]),v._v(" 的接口，根据 "),e("strong",[v._v("因为容量问题而导致操作失败后处理方式的不同")]),v._v(" 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。")]),v._v(" "),e("p",[v._v("| "),e("code",[v._v("Queue")]),v._v(" 接口 | 抛出异常  | 返回特殊值 |\n| ------------ | --------- | ---------- |\n| 插入队尾     | add(E e)  | offer(E e) |\n| 删除队首     | remove()  | poll()     |\n| 查询队首元素 | element() | peek()     |")]),v._v(" "),e("p",[e("code",[v._v("Deque")]),v._v("实现了Queue接口是双端队列，在队列的两端均可以插入或删除元素。")]),v._v(" "),e("p",[e("code",[v._v("Deque")]),v._v(" 扩展了 "),e("code",[v._v("Queue")]),v._v(" 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：")]),v._v(" "),e("p",[v._v("| "),e("code",[v._v("Deque")]),v._v(" 接口 | 抛出异常      | 返回特殊值      |\n| ------------ | ------------- | --------------- |\n| 插入队首     | addFirst(E e) | offerFirst(E e) |\n| 插入队尾     | addLast(E e)  | offerLast(E e)  |\n| 删除队首     | removeFirst() | pollFirst()     |\n| 删除队尾     | removeLast()  | pollLast()      |\n| 查询队首元素 | getFirst()    | peekFirst()     |\n| 查询队尾元素 | getLast()     | peekLast()      |")]),v._v(" "),e("p",[v._v("事实上，"),e("code",[v._v("Deque")]),v._v(" 还提供有 "),e("code",[v._v("push()")]),v._v(" 和 "),e("code",[v._v("pop()")]),v._v(" 等其他方法，可用于模拟栈。")])])])])}),[],!1,null,null,null);_.default=t.exports}}]);