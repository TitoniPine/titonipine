(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{480:function(s,t,a){"use strict";a.r(t);var e=a(29),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一、概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[s._v("#")]),s._v(" 一、概述")]),s._v(" "),a("p",[a("strong",[s._v("Redis 是一个高性能的 key-value 数据库")]),s._v("，不过与传统数据库不同的是 "),a("strong",[s._v("Redis 的数据是存在内存中的")]),s._v(" ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。")]),s._v(" "),a("p",[s._v("另外，"),a("strong",[s._v("Redis 除了做缓存之外，Redis 也经常用来做分布式锁，甚至是消息队列。")])]),s._v(" "),a("p",[a("strong",[s._v("Redis 提供了多种数据类型来支持不同的业务场景。Redis 还支持事务 、持久化、Lua 脚本、多种集群方案。")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("`Redis的特点`：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("Redis支持数据的持久化")]),s._v("，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。")]),s._v(" "),a("li",[s._v("Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。("),a("strong",[s._v("Redis支持多数据结构存储")]),s._v(")")]),s._v(" "),a("li",[a("strong",[s._v("Redis支持数据的备份")]),s._v("，即master-slave模式的数据备份。")])])]),s._v(" "),a("h2",{attrs:{id:"二、redis-常见的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、redis-常见的数据结构"}},[s._v("#")]),s._v(" 二、Redis 常见的数据结构")]),s._v(" "),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" string")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("介绍")]),s._v(" ：string 数据结构是简单的 key-value 类型。虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 "),a("strong",[s._v("简单动态字符串")]),s._v("（simple dynamic string，"),a("strong",[s._v("SDS")]),s._v("）。相比于 C 的原生字符串，Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）,除此之外，Redis 的 SDS API 是安全的，不会造成缓冲区溢出。")]),s._v(" "),a("li",[a("strong",[s._v("常用命令：")]),s._v(" "),a("code",[s._v("set,get,strlen,exists,decr,incr,setex")]),s._v(" 等等。")]),s._v(" "),a("li",[a("strong",[s._v("应用场景：")]),s._v(" 一般常用在需要计数的场景，比如用户的访问次数、热点文章的点赞转发数量等等。")])]),s._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[s._v("**设置过期时间**")]),s._v(" "),a("p",[a("code",[s._v("SETEX key seconds value")]),s._v(" 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。")]),s._v(" "),a("p",[a("code",[s._v("PSETEX key milliseconds value")]),s._v("这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。")]),s._v(" "),a("p",[s._v("其他类型使用 "),a("code",[s._v("EXPIRE key seconds")]),s._v("为给定 key 设置过期时间。")])]),s._v(" "),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" list")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("介绍")]),s._v(" ："),a("strong",[s._v("list")]),s._v(" 即是 "),a("strong",[s._v("链表")]),s._v("。链表是一种非常常见的数据结构，特点是易于数据元素的插入和删除并且可以灵活调整链表长度，但是链表的随机访问困难。许多高级编程语言都内置了链表的实现比如 Java 中的 "),a("strong",[s._v("LinkedList")]),s._v("，但是 C 语言并没有实现链表，所以 Redis 实现了自己的链表数据结构。Redis 的 list 的实现为一个 "),a("strong",[s._v("双向链表")]),s._v("，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。")]),s._v(" "),a("li",[a("strong",[s._v("常用命令:")]),s._v(" "),a("code",[s._v("rpush,lpop,lpush,rpop,lrange,llen")]),s._v(" 等。")]),s._v(" "),a("li",[a("strong",[s._v("应用场景:")]),s._v(" 发布与订阅或者说消息队列、慢查询。")])]),s._v(" "),a("h3",{attrs:{id:"hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" hash")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("介绍")]),s._v(" ：hash 类似于 JDK1.8 前的 HashMap，内部实现也差不多(数组 + 链表)。不过，Redis 的 hash 做了更多优化。另外，"),a("strong",[s._v("hash 是一个 string 类型的 field 和 value 的映射表")]),s._v("，"),a("strong",[s._v("特别适合用于存储对象")]),s._v("，后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值。 比如我们可以 hash 数据结构来存储用户信息，商品信息等等。")]),s._v(" "),a("li",[a("strong",[s._v("常用命令：")]),s._v(" "),a("code",[s._v("hset,hmset,hexists,hget,hgetall,hkeys,hvals")]),s._v(" 等。")]),s._v(" "),a("li",[a("strong",[s._v("应用场景:")]),s._v(" 系统中对象数据的存储。")])]),s._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" set")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("介绍 ：")]),s._v(" set 类似于 Java 中的 "),a("code",[s._v("HashSet")]),s._v(" 。Redis 中的 set 类型是一种无序不重复集合，集合中的元素没有先后顺序。当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。比如：你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。")]),s._v(" "),a("li",[a("strong",[s._v("常用命令：")]),s._v(" "),a("code",[s._v("sadd,spop,smembers,sismember,scard,sinterstore,sunion")]),s._v(" 等。")]),s._v(" "),a("li",[a("strong",[s._v("应用场景:")]),s._v(" 需要存放的数据不能重复以及需要获取多个数据源交集和并集等场景")])]),s._v(" "),a("h3",{attrs:{id:"sorted-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sorted-set"}},[s._v("#")]),s._v(" sorted set")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("介绍：")]),s._v(" 和 set 相比，sorted set 增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列，还可以通过 score 的范围来获取元素的列表。有点像是 Java 中 HashMap 和 TreeSet 的结合体。")]),s._v(" "),a("li",[a("strong",[s._v("常用命令：")]),s._v(" "),a("code",[s._v("zadd,zcard,zscore,zrange,zrevrange,zrem")]),s._v(" 等。")]),s._v(" "),a("li",[a("strong",[s._v("应用场景：")]),s._v(" 需要对数据根据某个权重进行排序的场景。比如在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息。")])]),s._v(" "),a("h3",{attrs:{id:"bitmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitmap"}},[s._v("#")]),s._v(" bitmap")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("介绍：")]),s._v(" bitmap 存储的是连续的二进制数字（0 和 1），通过 bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 bitmap 本身会极大的节省储存空间。")]),s._v(" "),a("li",[a("strong",[s._v("常用命令：")]),s._v(" "),a("code",[s._v("setbit")]),s._v(" 、"),a("code",[s._v("getbit")]),s._v(" 、"),a("code",[s._v("bitcount")]),s._v("、"),a("code",[s._v("bitop")])]),s._v(" "),a("li",[a("strong",[s._v("应用场景：")]),s._v(" 适合需要保存状态信息（比如是否签到、是否登录...）并需要进一步对这些信息进行分析的场景。比如用户签到情况、活跃用户情况、用户行为统计（比如是否点赞过某个视频）。")])]),s._v(" "),a("h2",{attrs:{id:"三、spring-data-redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、spring-data-redis"}},[s._v("#")]),s._v(" 三、Spring Data Redis")]),s._v(" "),a("p",[s._v("对于下层，Spring Data Redis 提供了统一的操作模板（后文中，我们会看到是 RedisTemplate 类），封装了 Jedis、Lettuce 的 API 操作，访问 Redis 数据。所以，"),a("strong",[s._v("实际上，Spring Data Redis 内置真正访问的实际是 Jedis、Lettuce 等 API 操作")]),s._v("。")]),s._v(" "),a("p",[s._v("目前Spring Data Redis 暂时只支持 Jedis、Lettuce 的内部封装，而 Redisson 是由 "),a("a",{attrs:{href:"https://github.com/redisson/redisson/tree/master/redisson-spring-data",target:"_blank",rel:"noopener noreferrer"}},[s._v("redisson-spring-data"),a("OutboundLink")],1),s._v(" 来提供。")]),s._v(" "),a("h3",{attrs:{id:"_1-redistemplate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-redistemplate"}},[s._v("#")]),s._v(" 1. RedisTemplate")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/core/RedisTemplate.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("org.springframework.data.redis.core.RedisTemplate")]),a("OutboundLink")],1),s._v(" 类，从类名上，我们就明明白白知道，提供 Redis 操作模板 API 。核心属性如下：")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、序列化相关属性")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),s._v(" keySerializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),s._v(" valueSerializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),s._v(" hashKeySerializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),s._v(" hashValueSerializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stringSerializer "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、Lua 脚本执行器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ScriptExecutor")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" scriptExecutor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3、常见数据结构操作类")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ValueOperations")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" valueOps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListOperations")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" listOps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SetOperations")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" setOps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ZSetOperations")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" zSetOps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GeoOperations")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" geoOps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HyperLogLogOperations")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" hllOps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"_2-序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-序列化"}},[s._v("#")]),s._v(" 2. 序列化")]),s._v(" "),a("h4",{attrs:{id:"_2-1-rediserializer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-rediserializer"}},[s._v("#")]),s._v(" 2.1 Rediserializer")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/serializer/RedisSerializer.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("org.springframework.data.redis.serializer.RedisSerializer")]),a("OutboundLink")],1),s._v(" 接口，Redis 序列化接口，用于 Redis KEY 和 VALUE 的序列化。")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SerializationException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deserialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" var1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SerializationException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" classLoader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JdkSerializationRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("classLoader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("json")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GenericJackson2JsonRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("UTF_8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("ul",[a("li",[s._v("定义了对象 "),a("T",[s._v(" 和二进制数组的转换")])],1)]),s._v(" "),a("p",[a("strong",[s._v("RedisSerializer 的实现类")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/TitoniPine/Images@main/uPic/20220409211022.png",alt:"20220409211022"}})]),s._v(" "),a("p",[s._v("主要分成四类：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("JDK 序列化方式")])]),s._v(" "),a("li",[a("strong",[s._v("String 序列化方式")])]),s._v(" "),a("li",[a("strong",[s._v("JSON 序列化方式")])]),s._v(" "),a("li",[a("strong",[s._v("XML 序列化方式")])])]),s._v(" "),a("h5",{attrs:{id:"_2-1-1-string-序列化方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-string-序列化方式"}},[s._v("#")]),s._v(" 2.1.1 String 序列化方式")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/serializer/StringRedisSerializer.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("org.springframework.data.redis.serializer.StringRedisSerializer")]),a("OutboundLink")],1),s._v(" ，字符串和二进制数组的"),a("strong",[s._v("直接")]),s._v("转换。代码如下：")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Charset")]),s._v(" charset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),s._v(" US_ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),s._v(" ISO_8859_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),s._v(" UTF_8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardCharsets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("UTF_8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Charset")]),s._v(" charset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("notNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("charset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Charset must not be null!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("charset "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" charset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deserialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" bytes "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("charset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("charset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        US_ASCII "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardCharsets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("US_ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        ISO_8859_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardCharsets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ISO_8859_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        UTF_8 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardCharsets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("UTF_8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("strong",[s._v("绝大多数情况下，我们 KEY 和 VALUE 都会使用这种序列化方案")]),s._v("。")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/serializer/GenericToStringSerializer.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("org.springframework.data.redis.serializer.GenericToStringSerializer")]),a("OutboundLink")],1),s._v(" ，使用 Spring "),a("code",[s._v("ConversionService")]),s._v(" 实现 "),a("code",[s._v("<T>")]),s._v(" 对象和 String 的转换，从而 String 和二进制数组的转换。")])]),s._v(" "),a("h5",{attrs:{id:"_2-1-2-json-序列化方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-json-序列化方式"}},[s._v("#")]),s._v(" 2.1.2 JSON 序列化方式")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/serializer/GenericJackson2JsonRedisSerializer.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer")]),a("OutboundLink")],1),s._v(" ，使用 Jackson 实现 JSON 的序列化方式，并且从 Generic 单词可以看出，是支持所有类。")]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/serializer/GenericJackson2JsonRedisSerializer.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer")]),a("OutboundLink")],1),s._v(" ，使用 Jackson 实现 JSON 的序列化方式，并且显示指定 "),a("code",[s._v("<T>")]),s._v(" 类型。")]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializer.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer")]),a("OutboundLink")],1),s._v(" ，使用 FastJSON 实现 JSON 的序列化方式，和 GenericJackson2JsonRedisSerializer 一致。")]),s._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/support/spring/FastJsonRedisSerializer.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("com.alibaba.fastjson.support.spring.FastJsonRedisSerializer")]),a("OutboundLink")],1),s._v(" ，使用 FastJSON 实现 JSON 的序列化方式，和 Jackson2JsonRedisSerializer 一致。")])]),s._v(" "),a("h4",{attrs:{id:"_2-2-配置序列化的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-配置序列化的方式"}},[s._v("#")]),s._v(" 2.2 配置序列化的方式")]),s._v(" "),a("ol",[a("li",[s._v("创建 RedisConfiguration 配置类")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Configuration")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisConfiguration")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Bean")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisTemplate")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("redisTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisConnectionFactory")]),s._v(" factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建 RedisTemplate 对象")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisTemplate")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" template "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisTemplate")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置 RedisConnection 工厂。")]),s._v("\n        template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setConnectionFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 String 序列化方式，序列化 KEY 。")]),s._v("\n        template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setKeySerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 JSON 序列化方式（库是 Jackson ），序列化 VALUE 。")]),s._v("\n        template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setValueSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("json")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("ul",[a("li",[a("p",[a("code",[s._v("RedisSerializer#string()")]),s._v(" 静态方法，返回的就是使用 UTF-8 编码的 StringRedisSerializer 对象。代码如下：")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// RedisSerializer.java")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("UTF_8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// StringRedisSerializer.java")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),s._v(" ISO_8859_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StandardCharsets")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ISO_8859_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("RedisSerializer#json()")]),s._v(" 静态方法，返回 GenericJackson2JsonRedisSerializer 对象。代码如下：")])]),s._v(" "),a("li",[a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// RedisSerializer.java")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisSerializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("json")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("GenericJackson2JsonRedisSerializer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])]),s._v(" "),a("h3",{attrs:{id:"_3-redisson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-redisson"}},[s._v("#")]),s._v(" 3. Redisson")]),s._v(" "),a("p",[s._v("Redisson在基于NIO的"),a("a",{attrs:{href:"http://netty.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Netty"),a("OutboundLink")],1),s._v("框架上，充分的利用了Redis键值数据库提供的一系列优势，在Java实用工具包中常用接口的基础上，为使用者提供了一系列具有分布式特性的常用工具类。使得原本作为协调单机多线程并发程序的工具包获得了协调分布式多机多线程并发系统的能力，大大降低了设计和研发大规模分布式系统的难度。同时结合各富特色的分布式服务，更进一步简化了分布式环境中程序相互之间的协作。")]),s._v(" "),a("h2",{attrs:{id:"四、缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、缓存"}},[s._v("#")]),s._v(" 四、缓存")]),s._v(" "),a("h3",{attrs:{id:"_4-1-缓存设置过期时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-缓存设置过期时间"}},[s._v("#")]),s._v(" 4.1 缓存设置过期时间")]),s._v(" "),a("p",[s._v("一般情况下，我们设置保存的缓存数据的时候都会设置一个过期时间。为什么呢？")]),s._v(" "),a("p",[s._v("因为内存是有限的，如果缓存中的所有数据都是一直保存的话，分分钟直接 Out of memory。")]),s._v(" "),a("p",[a("strong",[s._v("Redis 中除了字符串类型有自己独有设置过期时间的命令 "),a("code",[s._v("setex")]),s._v(" 外，其他方法都需要依靠 "),a("code",[s._v("expire")]),s._v(" 命令来设置过期时间 。另外， "),a("code",[s._v("persist")]),s._v(" 命令可以移除一个键的过期时间。")])]),s._v(" "),a("p",[a("strong",[s._v("过期时间除了有助于缓解内存的消耗，还有什么其他用么？")])]),s._v(" "),a("p",[s._v("很多时候，我们的业务场景就是需要某个数据只在某一时间段内存在，比如我们的短信验证码可能只在 1 分钟内有效，用户登录的 token 可能只在 1 天内有效。")]),s._v(" "),a("p",[s._v("如果使用传统的数据库来处理的话，一般都是自己判断过期，这样更麻烦并且性能要差很多。")]),s._v(" "),a("h3",{attrs:{id:"_4-2-如何判断数据是否过期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-如何判断数据是否过期"}},[s._v("#")]),s._v(" 4.2 如何判断数据是否过期")]),s._v(" "),a("p",[s._v("Redis 通过一个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。过期字典的键指向 Redis 数据库中的某个 key(键)，过期字典的值是一个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 UNIX 时间戳）。")]),s._v(" "),a("h4",{attrs:{id:"_4-2-1-过期删除策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-过期删除策略"}},[s._v("#")]),s._v(" 4.2.1 过期删除策略")]),s._v(" "),a("p",[s._v("如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？")]),s._v(" "),a("p",[s._v("常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("惰性删除")]),s._v(" ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。")]),s._v(" "),a("li",[a("strong",[s._v("定期删除")]),s._v(" ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。")])]),s._v(" "),a("p",[s._v("定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 "),a("strong",[s._v("定期删除+惰性/懒汉式删除")]),s._v(" 。")]),s._v(" "),a("p",[s._v("但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。")]),s._v(" "),a("p",[s._v("怎么解决这个问题呢？答案就是："),a("strong",[s._v("Redis 内存淘汰机制。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("设置淘汰策略")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" maxmemory-policy allkeys-lru\n")])])])])]),s._v(" "),a("p",[s._v("Redis 提供 6 种数据淘汰策略：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("volatile-lru（least recently used）")]),s._v("：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰")]),s._v(" "),a("li",[a("strong",[s._v("volatile-ttl")]),s._v("：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰")]),s._v(" "),a("li",[a("strong",[s._v("volatile-random")]),s._v("：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰")]),s._v(" "),a("li",[a("strong",[s._v("allkeys-lru（least recently used）")]),s._v("：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）")]),s._v(" "),a("li",[a("strong",[s._v("allkeys-random")]),s._v("：从数据集（server.db[i].dict）中任意选择数据淘汰")]),s._v(" "),a("li",[a("strong",[s._v("no-eviction")]),s._v("：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！")])]),s._v(" "),a("p",[s._v("4.0 版本后增加以下两种：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("volatile-lfu（least frequently used）")]),s._v("：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰")]),s._v(" "),a("li",[a("strong",[s._v("allkeys-lfu（least frequently used）")]),s._v("：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key")])]),s._v(" "),a("h4",{attrs:{id:"_4-2-2-lru和lfu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-lru和lfu"}},[s._v("#")]),s._v(" 4.2.2 LRU和LFU")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("LRU（Least Recently Used）")]),s._v(" "),a("p",[s._v("即"),a("code",[s._v("最近最少使用")]),s._v("，会将最不常用的数据筛选出来，保留最近频繁使用的数据。LRU 会把所有数据组成一个链表，链表头部称为 MRU，代表最近最常使用的数据；尾部称为 LRU代表最近最不常使用的数据；")]),s._v(" "),a("p",[a("strong",[s._v("但是，如果直接在 Redis 中使用 LRU 算法也会有一些问题：")])]),s._v(" "),a("p",[s._v("LRU 算法在实现过程中使用链表管理所有缓存的数据，这会给 Redis 带来额外的开销，而且，当有数据访问时就会有链表移动操作，进而降低 Redis 的性能。")]),s._v(" "),a("p",[s._v("于是，Redis 对 LRU 的实现进行了一些改变：")]),s._v(" "),a("ul",[a("li",[s._v("记录每个 key 最近一次被访问的时间戳（由键值对数据结构 RedisObject 中的 lru 字段记录）")]),s._v(" "),a("li",[s._v("在第一次淘汰数据时，会先随机选择 N 个数据作为一个候选集合，然后淘汰 lru 值最小的。（N 可以通过 config set maxmemory-samples 100 命令来配置）")]),s._v(" "),a("li",[s._v("后续再淘汰数据时，会挑选数据进入候选集合，进入集合的条件是：它的 lru 小于候选集合中最小的 lru。")]),s._v(" "),a("li",[s._v("如果候选集合中数据个数达到了 maxmemory-samples，Redis 就会将 lru 值小的数据淘汰出去。")])])]),s._v(" "),a("li",[a("p",[s._v("LFU（Least Frequently Used）")]),s._v(" "),a("p",[s._v("即最不经常使用策略，它是基于数据访问次数来淘汰数据的，在 Redis 4.0 时添加进来。它在 LRU 策略基础上，为每个数据增加了一个计数器，来统计这个数据的访问次数。")]),s._v(" "),a("p",[s._v("前面说到，LRU 使用了 RedisObject 中的 lru 字段记录时间戳，lru 是 24bit 的，LFU 将 lru 拆分为两部分：")]),s._v(" "),a("ul",[a("li",[s._v("ldt 值：lru 字段的前 16bit，表示数据的访问时间戳")]),s._v(" "),a("li",[s._v("counter 值：lru 字段的后 8bit，表示数据的访问次数 使用 LFU 策略淘汰缓存时，会把访问次数最低的数据淘汰，如果访问次数相同，再根据访问的时间，将访问时间戳最小的淘汰。")])]),s._v(" "),a("p",[a("strong",[s._v("为什么 Redis 有了 LRU 还需要 LFU 呢？")])]),s._v(" "),a("p",[s._v("在一些场景下，有些数据被访问的次数非常少，甚至只会被访问一次。当这些数据服务完访问请求后，如果还继续留存在缓存中的话，就只会白白占用缓存空间。")]),s._v(" "),a("p",[s._v("由于 LRU 是基于访问时间的，如果系统对大量数据进行单次查询，这些数据的 lru 值就很大，使用 LFU 算法就不容易被淘汰。")])])]),s._v(" "),a("h3",{attrs:{id:"_4-3-缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-缓存穿透"}},[s._v("#")]),s._v(" 4.3 缓存穿透")]),s._v(" "),a("h4",{attrs:{id:"什么是缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存穿透"}},[s._v("#")]),s._v(" 什么是缓存穿透？")]),s._v(" "),a("p",[s._v("缓存穿透说简单点就是大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上，根本没有经过缓存这一层。举个例子：某个黑客故意制造我们缓存中不存在的 key 发起大量请求，导致大量请求落到数据库。")]),s._v(" "),a("h4",{attrs:{id:"有哪些解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些解决办法"}},[s._v("#")]),s._v(" 有哪些解决办法？")]),s._v(" "),a("p",[s._v("最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。")]),s._v(" "),a("p",[a("strong",[s._v("1）缓存无效 key")])]),s._v(" "),a("p",[s._v("如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下： "),a("code",[s._v("SET key value EX 10086")]),s._v(" 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。")]),s._v(" "),a("p",[s._v("另外，这里多说一嘴，一般情况下我们是这样设计 key 的： "),a("code",[s._v("表名:列名:主键名:主键值")]),s._v(" 。")]),s._v(" "),a("p",[a("strong",[s._v("2）布隆过滤器")])]),s._v(" "),a("p",[s._v("布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们需要的就是判断 key 是否合法，有没有感觉布隆过滤器就是我们想要找的那个“人”。")]),s._v(" "),a("p",[s._v("具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。")]),s._v(" "),a("p",[s._v("但是，需要注意的是布隆过滤器可能会存在误判的情况。总结来说就是： "),a("strong",[s._v("布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。")])]),s._v(" "),a("p",[a("em",[s._v("为什么会出现误判的情况呢? 我们还要从布隆过滤器的原理来说！")])]),s._v(" "),a("p",[s._v("我们先来看一下，"),a("strong",[s._v("当一个元素加入布隆过滤器中的时候，会进行哪些操作：")])]),s._v(" "),a("ol",[a("li",[s._v("使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。")]),s._v(" "),a("li",[s._v("根据得到的哈希值，在位数组中把对应下标的值置为 1。")])]),s._v(" "),a("p",[s._v("我们再来看一下，"),a("strong",[s._v("当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行哪些操作：")])]),s._v(" "),a("ol",[a("li",[s._v("对给定元素再次进行相同的哈希计算；")]),s._v(" "),a("li",[s._v("得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。")])]),s._v(" "),a("p",[s._v("然后，一定会出现这样一种情况："),a("strong",[s._v("不同的字符串可能哈希出来的位置相同。")]),s._v(" （可以适当增加位数组大小或者调整我们的哈希函数来降低概率）")]),s._v(" "),a("h3",{attrs:{id:"_4-4-缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-缓存雪崩"}},[s._v("#")]),s._v(" 4.4 缓存雪崩")]),s._v(" "),a("h4",{attrs:{id:"什么是缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是缓存雪崩"}},[s._v("#")]),s._v(" 什么是缓存雪崩？")]),s._v(" "),a("p",[s._v("实际上，缓存雪崩描述的就是这样一个简单的场景："),a("strong",[s._v("缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。")]),s._v(" 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。")]),s._v(" "),a("p",[s._v("举个例子：系统的缓存模块出了问题比如宕机导致不可用。造成系统的所有访问，都要走数据库。")]),s._v(" "),a("p",[s._v("还有一种缓存雪崩的场景是："),a("strong",[s._v("有一些被大量访问数据（热点缓存）在某一时刻大面积失效，导致对应的请求直接落到了数据库上。")]),s._v(" 这样的情况，有下面几种解决办法：")]),s._v(" "),a("p",[s._v("举个例子 ：秒杀开始 12 个小时之前，我们统一存放了一批商品到 Redis 中，设置的缓存过期时间也是 12 个小时，那么秒杀开始的时候，这些秒杀的商品的访问直接就失效了。导致的情况就是，相应的请求直接就落到了数据库上，就像雪崩一样可怕。")]),s._v(" "),a("h4",{attrs:{id:"有哪些解决办法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些解决办法-2"}},[s._v("#")]),s._v(" 有哪些解决办法？")]),s._v(" "),a("p",[a("strong",[s._v("针对 Redis 服务不可用的情况：")])]),s._v(" "),a("ol",[a("li",[s._v("采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。")]),s._v(" "),a("li",[s._v("限流，避免同时处理大量的请求。")])]),s._v(" "),a("p",[a("strong",[s._v("针对热点缓存失效的情况：")])]),s._v(" "),a("ol",[a("li",[s._v("设置不同的失效时间比如随机设置缓存的失效时间。")]),s._v(" "),a("li",[s._v("缓存永不失效。")])]),s._v(" "),a("h3",{attrs:{id:"_4-5-如何保证缓存和数据库数据的一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-如何保证缓存和数据库数据的一致性"}},[s._v("#")]),s._v(" 4.5 如何保证缓存和数据库数据的一致性？")]),s._v(" "),a("p",[s._v("首先，我们必须知道这里的“数据一致性”是什么意思。这里“一致性”包括两种情况：")]),s._v(" "),a("ul",[a("li",[s._v("缓存中有数据，那么，缓存的数据需要和数据库中的值相同")]),s._v(" "),a("li",[s._v("缓存中本身没有数据，那么，数据库中的值就必须是最新值。")])]),s._v(" "),a("p",[s._v("不符合这两种情况的，就是缓存和数据库的数据不一致了。")]),s._v(" "),a("h4",{attrs:{id:"为什么会发生缓存和数据库的数据不一致"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会发生缓存和数据库的数据不一致"}},[s._v("#")]),s._v(" 为什么会发生缓存和数据库的数据不一致")]),s._v(" "),a("p",[s._v("当缓存的读写模式不同时，缓存数据不一致发生的情况不一样。")]),s._v(" "),a("h5",{attrs:{id:"当redis作为读写缓存时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当redis作为读写缓存时"}},[s._v("#")]),s._v(" 当redis作为读写缓存时")]),s._v(" "),a("p",[s._v("对于读写缓存来说，如果要对数据进行增删改，就需要在缓存中进行，同时还要根据采取的写回策略，决定是否同步写回到数据库中。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("同步直写策略")]),s._v("：写缓存时，也同步写数据库，缓存和数据库中的数据一致")]),s._v(" "),a("li",[a("code",[s._v("异步写回策略")]),s._v("：写缓存时不同步写数据库，等到数据从缓存中淘汰时，再写回数据库。使用这种策略时，如果数据还没有写回数据库，缓存就发生了故障。那么，此时，数据库就没有最新数据了")])]),s._v(" "),a("p",[s._v("所以，对于读写缓存来说，要想保证缓存和数据库中的数据一致，就要采用同步直写策略。不过，需要注意的是：如果采用这种策略，"),a("strong",[s._v("就需要保证同时更新缓存和数据库")]),s._v("。所以，我们"),a("strong",[s._v("要在业务应用中使用事务机制")]),s._v("，来保证缓存和数据库的更新具有原子性，也就是说，两者要不一起更新，要不都不更新，返回错误信息，进行重试。否则，我们就无法实现同步直接")]),s._v(" "),a("p",[s._v("当然，在有些场景下，我们对数据一致性的要求可能不是那么高，那么，我们可以使用异步写回策略。")]),s._v(" "),a("h5",{attrs:{id:"当redis-作为只读缓存时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当redis-作为只读缓存时"}},[s._v("#")]),s._v(" 当redis 作为只读缓存时")]),s._v(" "),a("p",[s._v("对于只读缓存来说：")]),s._v(" "),a("ul",[a("li",[s._v("如果有数据新增，会直接写入数据库；")]),s._v(" "),a("li",[s._v("有数据删改时，就需要把只读缓存中的数据标记为无效\n"),a("ul",[a("li",[s._v("这样，应用后继在访问这些，些增删改的数据时，因为缓存中没有相应的数据，就会发生缓存缺失。")]),s._v(" "),a("li",[s._v("此时，应用再从数据库中把数据读入缓存，这样后续再访问数据时，就能够直接从缓存中读取了。")])])])]),s._v(" "),a("p",[s._v("那么，这个过程中会不会出现数据不一致的情况呢？\n（1）新增数据：")]),s._v(" "),a("ul",[a("li",[s._v("如果是新增数据，数据会直接写到数据库中，不用对缓存做任何操作。此时，缓存中本身就没有新增数据，而数据库中是最新值")]),s._v(" "),a("li",[s._v("这种情况符合我们刚刚所说的一致性的第 2 种情况，所以，此时，缓存和数据库的数据是一致的。")])]),s._v(" "),a("p",[s._v("（2）删改数据")]),s._v(" "),a("p",[s._v("如果发生删改操作，应用既要更新数据库，也要在缓存中删除数据。这两个操作如果无法保证原子性，也就是说，要不都完成，要不都没完成，此时，就会出现数据不一致问题了。")]),s._v(" "),a("ul",[a("li",[s._v("我们假设应用先删除缓存，再更新数据库，如果缓存删除成功，但是数据库更新失败，那么，应用再访问数据时，缓存中没有数据，就会发生缓存缺失。然后，应用再访问数据库，但是数据库中的值为旧值，应用就访问到旧值了。")]),s._v(" "),a("li",[s._v("如果应用先完成了数据库的更新，但是，在删除缓存时失败了，那么，数据库中的值是新值，而缓存中的是旧值，这肯定是不一致的。这个时候，如果有其他的并发请求来访问数据，按照正常的缓存访问流程，就会先在缓存中查询，但此时，就会读到旧值了。")])]),s._v(" "),a("p",[s._v("总结："),a("strong",[s._v("在更新数据库和删除缓存值的过程中，无论这两个操作的执行顺序谁先谁后，只要有一个操作失败了，就会导致客户端读取到旧值")])]),s._v(" "),a("h4",{attrs:{id:"如何解决数据不一致问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决数据不一致问题"}},[s._v("#")]),s._v(" 如何解决数据不一致问题？")]),s._v(" "),a("h6",{attrs:{id:"第一种方法-重试机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一种方法-重试机制"}},[s._v("#")]),s._v(" 第一种方法：重试机制")]),s._v(" "),a("p",[s._v("具体的说，就是：")]),s._v(" "),a("ul",[a("li",[s._v("可以把要删除的缓存值或者要更新的数据库值暂存到消息队列中。当应用没有能够成功的删除缓存值或者是更新数据库值时，可以从消息队列中重新读取这些值，然后再次进行删除或者更新")]),s._v(" "),a("li",[s._v("如果能够成功删除或者更新，我们就要把这些值从消息队列中去除，以免重复操作，此时，我们也可以保证数据库和缓存一致了。否则的话，我们还需要再次进行重试。如果重试超过一定次数，还是没有成功，我们就需要向应用层发送报错信息了。")])]),s._v(" "),a("p",[s._v("刚刚说的是在更新数据库和删除缓存值的过程中，其中一个操作失败的情况，实际上，即使这两个操作第一次执行时都没有失败，当有大量并发请求时，应用还是有可能读到不一致的数据")]),s._v(" "),a("p",[s._v("同样，我们按照不同的删除和更新顺序，分成两种情况来看。在这两种情况下，我们的解决方法也有所不同。")]),s._v(" "),a("h6",{attrs:{id:"情况一-先删除缓存-再更新数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况一-先删除缓存-再更新数据库"}},[s._v("#")]),s._v(" 情况一：先删除缓存，再更新数据库")]),s._v(" "),a("p",[s._v("假设线程 A 删除缓存值后，还没有来得及更新数据库（比如说有网络延迟），线程 B 就开始读取数据了，那么这个时候，线程 B 会发现缓存缺失，就只能去数据库读取。这会带来两个问题：")]),s._v(" "),a("ol",[a("li",[s._v("线程 B 读取到了旧值；")]),s._v(" "),a("li",[s._v("线程 B 是在缓存缺失的情况下读取的数据库，所以，它还会把旧值写入缓存，这可能会导致其他线程从缓存中读到旧值。")])]),s._v(" "),a("p",[s._v("怎么解决呢？"),a("strong",[s._v("在线程 A 更新完数据库值以后，我们可以让它先 sleep 一小段时间，再进行一次缓存删除操作。")])]),s._v(" "),a("ul",[a("li",[s._v("之所以要加上 sleep 的这段时间，就是为了让线程 B 能够先从数据库读取数据，再把缺失的数据写入缓存，然后，线程 A 再进行删除。所以，线程 A sleep 的时间，就需要大于线\n程 B 读取数据再写入缓存的时间。这个时间怎么确定呢？建议你在业务程序运行的时候，统计下线程读数据和写缓存的操作时间，以此为基础来进行估算。")]),s._v(" "),a("li",[s._v("这样一来，其它线程读取数据时，会发现缓存缺失，所以会从数据库中读取最新值。因为这个方案会在第一次删除缓存值后，延迟一段时间再次进行删除，所以我们也把它叫做“延迟双删”。")])]),s._v(" "),a("h6",{attrs:{id:"情况二-先更新数据库值-再删除缓存值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况二-先更新数据库值-再删除缓存值"}},[s._v("#")]),s._v(" 情况二：先更新数据库值，再删除缓存值")]),s._v(" "),a("ul",[a("li",[s._v("如果线程 A 删除了数据库中的值，但还没来得及删除缓存值，线程 B 就开始读取数据了，那么此时，线程 B 查询缓存时，发现缓存命中，就会直接从缓存中读取旧值。")]),s._v(" "),a("li",[s._v("不过，在这种情况下，如果其他线程并发读缓存的请求不多，那么，就不会有很多请求读取到旧值。而且，线程 A 一般也会很快删除缓存值，这样一来，其他线程再次读取时，就会发生缓存缺失，进而从数据库中读取最新值。所以，这种情况对业务的影响较小。")])]),s._v(" "),a("p",[s._v("方法也是延迟双删。")]),s._v(" "),a("h2",{attrs:{id:"五、redis-的持久化机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、redis-的持久化机制"}},[s._v("#")]),s._v(" 五、Redis 的持久化机制")]),s._v(" "),a("p",[s._v("很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了防止系统故障而将数据备份到一个远程位置。")]),s._v(" "),a("p",[s._v("Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持两种不同的持久化操作。"),a("strong",[s._v("Redis 的一种持久化方式叫快照（snapshotting，RDB），另一种方式是只追加文件（append-only file, AOF）")]),s._v("。这两种方法各有千秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方法。")]),s._v(" "),a("h3",{attrs:{id:"快照-snapshotting-持久化-rdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快照-snapshotting-持久化-rdb"}},[s._v("#")]),s._v(" "),a("strong",[s._v("快照（snapshotting）持久化（RDB）")])]),s._v(" "),a("p",[s._v("Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。")]),s._v(" "),a("p",[s._v("快照持久化是 Redis 默认采用的持久化方式，在 Redis.conf 配置文件中默认有此下配置：")]),s._v(" "),a("blockquote",[a("p",[s._v("save 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令创建快照。")]),s._v(" "),a("p",[s._v("save 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。")]),s._v(" "),a("p",[s._v("save 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。")])]),s._v(" "),a("h3",{attrs:{id:"aof-append-only-file-持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aof-append-only-file-持久化"}},[s._v("#")]),s._v(" "),a("strong",[s._v("AOF（append-only file）持久化")])]),s._v(" "),a("p",[s._v("与快照持久化相比，AOF 持久化的实时性更好，因此已成为主流的持久化方案。默认情况下 Redis 没有开启 AOF（append only file）方式的持久化，可以通过 appendonly 参数开启：")]),s._v(" "),a("blockquote",[a("p",[s._v("appendonly yes")])]),s._v(" "),a("p",[s._v("开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 "),a("code",[s._v("server.aof_buf")]),s._v(" 中，然后再根据 "),a("code",[s._v("appendfsync")]),s._v(" 配置来决定何时将其同步到硬盘中的 AOF 文件。")]),s._v(" "),a("p",[s._v("AOF 文件的保存位置和 RDB 文件的位置相同，都是通过 dir 参数设置的，默认的文件名是 "),a("code",[s._v("appendonly.aof")]),s._v("。")]),s._v(" "),a("p",[s._v("在 Redis 的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：")]),s._v(" "),a("blockquote",[a("p",[s._v("appendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度\nappendfsync everysec  #每秒钟同步一次，显式地将多个写命令同步到硬盘\nappendfsync no        #让操作系统决定何时进行同步")])]),s._v(" "),a("p",[s._v("为了兼顾数据和写入性能，用户可以考虑 "),a("code",[s._v("appendfsync everysec")]),s._v(" 选项 ，让 Redis 每秒同步一次 AOF 文件，Redis 性能几乎没受到任何影响。而且这样即使出现系统崩溃，用户最多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操作的时候，Redis 还会优雅的放慢自己的速度以便适应硬盘的最大写入速度。")]),s._v(" "),a("h2",{attrs:{id:"六、redis-事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、redis-事务"}},[s._v("#")]),s._v(" 六、Redis 事务")]),s._v(" "),a("p",[s._v("Redis 可以通过 "),a("strong",[a("code",[s._v("MULTI")]),s._v("，"),a("code",[s._v("EXEC")]),s._v("，"),a("code",[s._v("DISCARD")]),s._v(" 和 "),a("code",[s._v("WATCH")])]),s._v(" 等命令来实现事务(transaction)功能。")]),s._v(" "),a("p",[s._v("使用 "),a("a",{attrs:{href:"https://redis.io/commands/multi",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("MULTI")]),a("OutboundLink")],1),s._v(" 命令后可以输入多个命令。Redis 不会立即执行这些命令，而是将它们放到队列，当调用了 "),a("a",{attrs:{href:"https://redis.io/commands/exec",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("EXEC")]),a("OutboundLink")],1),s._v(" 命令将执行所有命令。")]),s._v(" "),a("p",[s._v("这个过程是这样的：")]),s._v(" "),a("ol",[a("li",[s._v("开始事务（"),a("code",[s._v("MULTI")]),s._v("）。")]),s._v(" "),a("li",[s._v("命令入队(批量操作 Redis 的命令，先进先出（FIFO）的顺序执行)。")]),s._v(" "),a("li",[s._v("执行事务("),a("code",[s._v("EXEC")]),s._v(")。")])]),s._v(" "),a("p",[s._v("你也可以通过 "),a("a",{attrs:{href:"https://redis.io/commands/discard",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("DISCARD")]),a("OutboundLink")],1),s._v(" 命令取消一个事务，它会清空事务队列中保存的所有命令。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://redis.io/commands/watch",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("WATCH")]),a("OutboundLink")],1),s._v(" 命令用于监听指定的键，当调用 "),a("code",[s._v("EXEC")]),s._v(" 命令执行事务时，如果一个被 "),a("code",[s._v("WATCH")]),s._v(" 命令监视的键被修改的话，整个事务都不会执行，直接返回失败。")]),s._v(" "),a("p",[a("strong",[s._v("Redis 是不支持 roll back 的，因而不满足原子性的（而且不满足持久性）。")])]),s._v(" "),a("p",[s._v("Redis 官网也解释了自己为啥不支持回滚。简单来说就是 Redis 开发者们觉得没必要支持回滚，这样更简单便捷并且性能更好。Redis 开发者觉得即使命令执行错误也应该在开发过程中就被发现而不是生产过程中。")]),s._v(" "),a("p",[s._v("你可以将 Redis 中的事务就理解为 ："),a("strong",[s._v("Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。")])]),s._v(" "),a("h2",{attrs:{id:"七、redis-做消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、redis-做消息队列"}},[s._v("#")]),s._v(" 七、Redis 做消息队列")]),s._v(" "),a("p",[s._v("Redis 5.0 新增加的一个数据结构 "),a("code",[s._v("Stream")]),s._v(" 可以用来做消息队列，"),a("code",[s._v("Stream")]),s._v(" 支持：")]),s._v(" "),a("ul",[a("li",[s._v("发布 / 订阅模式")]),s._v(" "),a("li",[s._v("按照消费者组进行消费")]),s._v(" "),a("li",[s._v("消息持久化（ RDB 和 AOF）")])]),s._v(" "),a("p",[s._v("不过，和专业的消息队列相比，还是有很多欠缺的地方比如消息丢失和堆积问题不好解决。")]),s._v(" "),a("p",[s._v("我们通常建议是不需要使用 Redis 来做消息队列的，你完全可以选择市面上比较成熟的一些消息队列比如 RocketMQ、Kafka。")])])}),[],!1,null,null,null);t.default=n.exports}}]);